<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker 学习</title>
      <link href="/2021/08/04/Docker-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/08/04/Docker-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><h1 id="1-Docker-概述"><a href="#1-Docker-概述" class="headerlink" title="1.Docker 概述"></a>1.Docker 概述</h1><h2 id="Docker为什么出现？"><a href="#Docker为什么出现？" class="headerlink" title="Docker为什么出现？"></a>Docker为什么出现？</h2><p>一款产品：</p><p>开发——上线  两套环境  应用环境  应用配置</p><p>开发——运维  问题：我在我的电脑上可以允许！版本更新，导致服务不可用！对于运维来说考验十分大？</p><p>环境配置是十分的麻烦，每一个及其都要部署环境(集群Redis、ES、Hadoop…) !费事费力。</p><p>发布一个项目( jar + (Redis MySQL JDK ES) ),项目能不能带上环境安装打包！</p><p>之前在服务器配置一个应用的环境 Redis MySQL JDK ES Hadoop 配置超麻烦了，不能够跨平台。</p><p>开发环境Windows，最后发布到Linux！</p><p>传统：开发jar，运维来做！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>安卓流程：java — apk —发布（应用商店）一 张三使用apk一安装即可用！</p><p>docker流程： java-jar（环境） — 打包项目帯上环境（镜像） — ( Docker仓库：商店）——-</p><p>Docker给以上的问题，提出了解决方案！</p><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/src=http___image.mamicode.com_info_201807_20180715122259940087.png&amp;refer=http___image.mamicode.jpg" alt="src=http___image.mamicode.com_info_201807_20180715122259940087.png&amp;refer=http___image.mamicode"></p><blockquote><p>镜像（image）</p></blockquote><p>docker镜像就好比是一个模板，可以通过这个模板来创建容器服务。</p><p>tomcat镜像 ==&gt; run ==&gt; tomcat容器（提供服务）</p><p>通过这个镜像可以创建多个容器（最终运行或者项目运行都是在容器中的）。</p><blockquote><p>容器（container）</p></blockquote><p>Docker利用容器技术，独立运行一个或者一组应用，是通过镜像来创建的。</p><p>有启动，停止，删除等Linux基本指令！</p><p>目前就可以把这个容器理解为一个简易的Linux系统</p><blockquote><p>仓库（repository）</p></blockquote><p>仓库就是存放镜像的地方，分为私有仓库和公有仓库；</p><p>Docker Hub（默认是国外的）</p><p>阿里云…都有容器服务器（配置镜像加速！）</p><h1 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2.安装Docker"></a>2.安装Docker</h1><blockquote><p>Linux（CentOS7）</p></blockquote><h2 id="可视化界面安装"><a href="#可视化界面安装" class="headerlink" title="可视化界面安装"></a>可视化界面安装</h2><p>当你安装centOS7服务器版本的时候，系统默认是不会安装GUI的图形界面程序，这个需要手动安装CentOS7 Gnome GUI包。</p><p>1.检查安装源yum是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list</span><br></pre></td></tr></table></figure><p>2.下载可视化图形界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">"X Window System"</span></span><br><span class="line"><span class="comment">#一系列操作结束后，输入以下命令</span></span><br><span class="line">yum groupinstall <span class="string">"GNOME Desktop"</span></span><br></pre></td></tr></table></figure><p>3.进入可视化界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式1</span></span><br><span class="line">init 5</span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line">startx</span><br></pre></td></tr></table></figure><p>4.设置开机自动进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先查看当前模式</span></span><br><span class="line">systemctl get-default</span><br><span class="line"><span class="comment">#图形界面</span></span><br><span class="line">systemctl <span class="built_in">set</span>-default graphical.target</span><br><span class="line"><span class="comment">#重启系统</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>5.设置启动命令行界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符界面</span></span><br><span class="line">systemctl <span class="built_in">set</span>-default multi-user.target</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>6.卸载图形化界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupremove <span class="string">"GNOME Desktop"</span></span><br></pre></td></tr></table></figure><blockquote><p>环境查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统内核查看</span></span><br><span class="line">uname -r</span><br><span class="line">3.10.0-1160.el7.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统版本</span></span><br><span class="line">cat /etc/os-release </span><br><span class="line"></span><br><span class="line">NAME=<span class="string">"CentOS Linux"</span></span><br><span class="line">VERSION=<span class="string">"7 (Core)"</span></span><br><span class="line">ID=<span class="string">"centos"</span></span><br><span class="line">ID_LIKE=<span class="string">"rhel fedora"</span></span><br><span class="line">VERSION_ID=<span class="string">"7"</span></span><br><span class="line">PRETTY_NAME=<span class="string">"CentOS Linux 7 (Core)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"0;31"</span></span><br><span class="line">CPE_NAME=<span class="string">"cpe:/o:centos:centos:7"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.centos.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.centos.org/"</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">"CentOS-7"</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">"7"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">"centos"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">"7"</span></span><br></pre></td></tr></table></figure><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><blockquote><p>安装</p></blockquote><p>帮助文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、卸载旧的版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="comment"># 2、需要的安装包</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、设置镜像的仓库</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、安装docker相关的源 docker-ce 社区 ee 企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、查看是否安装成功</span></span><br><span class="line">docker version </span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、查看下载的这个 hello-world 镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><blockquote><p>卸载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、依赖卸载</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># /var/lib/docker 是docker的默认工作路径</span></span><br></pre></td></tr></table></figure><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728111552898.png" alt="image-20210728111552898"></p><p>配置镜像加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://68zgn28t.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="3-Docker原理"><a href="#3-Docker原理" class="headerlink" title="3.Docker原理"></a>3.Docker原理</h1><h2 id="run的执行流程"><a href="#run的执行流程" class="headerlink" title="run的执行流程"></a>run的执行流程</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728113033416.png" alt="image-20210728113033416"></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><blockquote><p><strong>Docker工作原理</strong></p></blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问！</p><p>DockerServer接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728113546538.png" alt="image-20210728113546538"></p><blockquote><p><strong>Docker为什么比VM快？</strong></p></blockquote><ul><li>Docker有着比虚拟机更少的抽象层</li><li>Docker利用的是宿主机的内核，VM需要的是Guest OS（重新搭建一个环境）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728114156812.png" alt="image-20210728114156812"></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728114121592.png" alt="image-20210728114121592"></p><p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guset OS , 分钟级别的，而docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级。</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728114430818.png" alt="image-20210728114430818"></p><h1 id="4-Docker常用命令"><a href="#4-Docker常用命令" class="headerlink" title="4.Docker常用命令"></a>4.Docker常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>帮助文档的地址：<a href="https://docs.docker.com/reference/" target="_blank" rel="noopener">https://docs.docker.com/reference/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version      <span class="comment"># 显示docker的版本信息</span></span><br><span class="line">docker info         <span class="comment"># 显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span>   <span class="comment"># 帮助命令</span></span><br></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><blockquote><p><strong>docker images 查看所有本地主机上的镜像</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[eternal@192 ~]$ sudo docker images</span><br><span class="line">[sudo] eternal 的密码：</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像的标签</span><br><span class="line">IMAGE ID    镜像的id</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">-a, --all      <span class="comment"># 列出所有的镜像</span></span><br><span class="line">-q, --quiet    <span class="comment"># 只显示镜像的id</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>docker search 搜索镜像</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[eternal@192 ~]$ sudo docker  search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11175     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4243      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   833                  [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   548       [OK]       </span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface <span class="keyword">for</span> MySQL and M…   281       [OK]       </span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   90                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   88                   </span><br><span class="line">centurylink/mysql                 Image containing mysql. Optimized to be link…   59                   [OK]</span><br><span class="line">databack/mysql-backup             Back up mysql databases to... anywhere!         45                   </span><br><span class="line">deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]</span><br><span class="line">prom/mysqld-exporter                                                              40                   [OK]</span><br><span class="line">tutum/mysql                       Base docker image to run a MySQL database se…   35                   </span><br><span class="line">linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   30                   </span><br><span class="line">schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   29                   [OK]</span><br><span class="line">mysql/mysql-router                MySQL Router provides transparent routing be…   21                   </span><br><span class="line">centos/mysql-56-centos7           MySQL 5.6 SQL database server                   20                   </span><br><span class="line">arey/mysql-client                 Run a MySQL client from a docker container      18                   [OK]</span><br><span class="line">fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   15                   [OK]</span><br><span class="line">openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                    </span><br><span class="line">devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3                    </span><br><span class="line">jelastic/mysql                    An image of the MySQL database server mainta…   2                    </span><br><span class="line">ansibleplaybookbundle/mysql-apb   An APB <span class="built_in">which</span> deploys RHSCL MySQL                2                    [OK]</span><br><span class="line">widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]</span><br><span class="line">centos/mysql-80-centos7           MySQL 8.0 SQL database server                   1                    </span><br><span class="line">vitess/mysqlctld                  vitess/mysqlctld                                1                    [OK]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选项</span></span><br><span class="line">--filter , -f<span class="comment">#根据提供的条件过滤输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤出的mysql版本</span></span><br><span class="line">[eternal@192 ~]$ sudo docker search mysql -f=stars=5000</span><br><span class="line">[sudo] eternal 的密码：</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11175     [OK]     </span><br><span class="line"></span><br><span class="line">[eternal@192 ~]$ sudo docker search mysql -f=stars=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11175     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4243      [OK]</span><br></pre></td></tr></table></figure><blockquote><p><strong>docker pull 下载镜像</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[eternal@192 ~]$ sudo docker pull mysql</span><br><span class="line">Using default tag: latest <span class="comment"># 如果不写tag,默认就是latest</span></span><br><span class="line">latest: Pulling from library/mysql </span><br><span class="line">bf5952930446: Pull complete <span class="comment"># 分层下载，docker image的核心 联合文件系统</span></span><br><span class="line">8254623a9871: Pull complete </span><br><span class="line">938e3e06dac4: Pull complete </span><br><span class="line">ea28ebf28884: Pull complete </span><br><span class="line">f3cef38785c2: Pull complete </span><br><span class="line">894f9792565a: Pull complete </span><br><span class="line">1d8a57523420: Pull complete </span><br><span class="line">6c676912929f: Pull complete </span><br><span class="line">ff39fdb566b4: Pull complete </span><br><span class="line">fff872988aba: Pull complete </span><br><span class="line">4d34e365ae68: Pull complete </span><br><span class="line">7886ee20621e: Pull complete </span><br><span class="line">Digest: sha256:c358e72e100ab493a0304bda35e6f239db2ec8c9bb836d8a427ac34307d074ed <span class="comment"># 签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest <span class="comment"># 真实地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两条命令等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本下载</span></span><br><span class="line">docker pull mysql:8.0</span><br><span class="line"></span><br><span class="line">[eternal@192 ~]$ sudo docker pull mysql:8.0</span><br><span class="line">[sudo] eternal 的密码：</span><br><span class="line">8.0: Pulling from library/mysql</span><br><span class="line">33847f680f63: Pull complete </span><br><span class="line">5cb67864e624: Pull complete </span><br><span class="line">1a2b594783f5: Pull complete </span><br><span class="line">b30e406dd925: Pull complete </span><br><span class="line">48901e306e4c: Pull complete </span><br><span class="line">603d2b7147fd: Pull complete </span><br><span class="line">802aa684c1c4: Pull complete </span><br><span class="line">715d3c143a06: Pull complete </span><br><span class="line">6978e1b7a511: Pull complete </span><br><span class="line">f0d78b0ac1be: Pull complete </span><br><span class="line">35a94d251ed1: Pull complete </span><br><span class="line">36f75719b1a9: Pull complete </span><br><span class="line">Digest: sha256:8b928a5117cf5c2238c7a09cd28c2e801ac98f91c3f8203a8938ae51f14700fd</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:8.0</span><br><span class="line">docker.io/library/mysql:8.0</span><br></pre></td></tr></table></figure><blockquote><p><strong>docker rmi 删除镜像</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         8.0       c60d96bd2b77   5 days ago     514MB</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br><span class="line"> </span><br><span class="line"><span class="comment">#根据IMAGE ID 来删除指定的镜像</span></span><br><span class="line">[root@AlibabaECS ~]<span class="comment"># docker rmi -f 镜像id                # 删除指定的镜像</span></span><br><span class="line">[root@AlibabaECS ~]<span class="comment"># docker rmi -f  镜像id 镜像id 镜像id  # 删除多个镜像</span></span><br><span class="line">[root@AlibabaECS ~]<span class="comment"># docker rmi -f $(docker images -aq) # 删除全部镜像</span></span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：我们有了镜像才可以创建容器，linux，下载一个centos镜像来测试学习</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><blockquote><p><strong>新建容器并启动</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--name = <span class="string">"Name"</span>    容器名字  tomcat01，tomcat02,用来区分容器</span><br><span class="line">-d                 后台方式运行</span><br><span class="line">-it                使用交互方式运行，进入容器查看区分</span><br><span class="line">-p                 指定容器的端口 -p 8080：8080</span><br><span class="line">    -p ip:主机端口：容器端口</span><br><span class="line">    -p 主机端口：容器端口(常用)</span><br><span class="line">    -p 容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-p                 随机指定端口</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试，启动并进入容器</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">centos       latest    300e315adb2f   7 months ago   209MB</span><br><span class="line"></span><br><span class="line">[root@192 eternal]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment">#进入容器，名称已发生改变</span></span><br><span class="line">[root@f337b5c89a38 /]<span class="comment"># ls#查看容器内的centos 基础版本，很多命令都是不完善的！</span></span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp</span><br><span class="line">etc  lib64  mntroot  srv   usr</span><br><span class="line">[root@f337b5c89a38 /]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器中退回主机</span></span><br><span class="line">[root@f337b5c89a38 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@192 eternal]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>列出所有的运行的容器</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps 命令</span></span><br><span class="line"> <span class="comment"># 列出当前正在运行的容器</span></span><br><span class="line">-a   <span class="comment"># 列出当前正在运行的容器+带出历史运行过的容器</span></span><br><span class="line">  -n=? <span class="comment"># 显示最近创建的容器</span></span><br><span class="line">  -q   <span class="comment"># 只显示容器的编号</span></span><br><span class="line">  </span><br><span class="line">[root@192 eternal]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                            PORTS     NAMES</span><br><span class="line">f337b5c89a38   centos         <span class="string">"/bin/bash"</span>   4 minutes ago   Exited (130) About a minute ago             quirky_knuth</span><br><span class="line">263278b1e98e   d1165f221234   <span class="string">"/hello"</span>      2 hours ago     Exited (0) 2 hours ago                      elegant_gagarin</span><br></pre></td></tr></table></figure><blockquote><p><strong>退出容器</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>            <span class="comment"># 直接容器停止并退出</span></span><br><span class="line">Ctrl + P + Q    <span class="comment"># 容器不停止退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker start f337b5c89a38 </span></span><br><span class="line">f337b5c89a38</span><br><span class="line">[root@192 eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS         PORTS     NAMES</span><br><span class="line">f337b5c89a38   centos    <span class="string">"/bin/bash"</span>   15 minutes ago   Up 6 seconds             quirky_knuth</span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment">#退出容器且不停止运行</span></span><br><span class="line">[root@0ded8a91e9c6 /]<span class="comment"># [root@192 eternal]# docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">0ded8a91e9c6   centos    <span class="string">"/bin/bash"</span>   27 seconds ago   Up 26 seconds             naughty_chatterjee</span><br><span class="line">f337b5c89a38   centos    <span class="string">"/bin/bash"</span>   18 minutes ago   Up 3 minutes              quirky_knuth</span><br><span class="line"><span class="comment">#可以看到容器还在运行</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>删除容器</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id                  <span class="comment"># 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</span></span><br><span class="line">docker rm -f $(docker ps -aq)    <span class="comment"># 删除所有的容器</span></span><br><span class="line">docker ps -aq|xargs docker rm    <span class="comment"># 删除所有的容器</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>启动和停止容器的操作</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id        <span class="comment"># 启动容器</span></span><br><span class="line">docker restart 容器id      <span class="comment"># 重启容器</span></span><br><span class="line">docker stop 容器id         <span class="comment"># 停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id         <span class="comment"># 强制停止当前容器</span></span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><blockquote><p><strong>后台启动容器</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令 docker run -d 镜像名</span></span><br><span class="line">docker run -d centos</span><br><span class="line"><span class="comment"># 问题docker ps, 发现 centos 停止了</span></span><br><span class="line"><span class="comment"># 常见的坑, docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="comment"># nginx,容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>查看日志</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 容器，没有日志</span><br><span class="line"><span class="comment"># 自己编写一段shell脚本</span></span><br><span class="line">docker run -d centos /bin/sh -c <span class="string">"while true;do echo kuangshen;sleep 1;done"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日志</span></span><br><span class="line">-tf                <span class="comment"># 显示日志</span></span><br><span class="line">--tail number      <span class="comment"># 要显示的日志条数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker logs -ft --tail f1178d5b0bd8</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>查看容器中的进程信息ps</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令 docker top 容器id</span></span><br><span class="line"></span><br><span class="line">[root@192 eternal]<span class="comment"># docker top fcfb1d878478</span></span><br><span class="line">UID                 PID                 PPID                C              STIME          TTY  </span><br><span class="line">root                13589               13564               0              13:22          ?  </span><br><span class="line">root                14172               13589               0              13:27          ?</span><br></pre></td></tr></table></figure><blockquote><p><strong>查看镜像源数据</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect f1178d5b0bd8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                 </span><br><span class="line">d19b9013d986   centos         <span class="string">"/bin/bash"</span>              11 minutes ago   Up 11 minutes           </span><br><span class="line"><span class="comment">#查看源数据</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker inspect d19b9013d986</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"d19b9013d986f9952d28eb554748868a386f5dbd22026d7ac843606ca30eca43"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-07-28T05:19:12.629578742Z"</span>,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"/bin/bash"</span>,</span><br><span class="line">        <span class="string">"Args"</span>: [],</span><br><span class="line">        <span class="string">"State"</span>: &#123;</span><br><span class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</span><br><span class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Paused"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Restarting"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OOMKilled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Dead"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Pid"</span>: 13175,</span><br><span class="line">            <span class="string">"ExitCode"</span>: 0,</span><br><span class="line">            <span class="string">"Error"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"StartedAt"</span>: <span class="string">"2021-07-28T05:19:12.948018217Z"</span>,</span><br><span class="line">            <span class="string">"FinishedAt"</span>: <span class="string">"0001-01-01T00:00:00Z"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Image"</span>: <span class="string">"sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55"</span>,</span><br><span class="line">        <span class="string">"ResolvConfPath"</span>: <span class="string">"/var/lib/docker/containers/d19b9013d986f9952d28eb554748868a386f5dbd22026d7ac843606ca30eca43/resolv.conf"</span>,</span><br><span class="line">        <span class="string">"HostnamePath"</span>: <span class="string">"/var/lib/docker/containers/d19b9013d986f9952d28eb554748868a386f5dbd22026d7ac843606ca30eca43/hostname"</span>,</span><br><span class="line">        <span class="string">"HostsPath"</span>: <span class="string">"/var/lib/docker/containers/d19b9013d986f9952d28eb554748868a386f5dbd22026d7ac843606ca30eca43/hosts"</span>,</span><br><span class="line">        <span class="string">"LogPath"</span>: <span class="string">"/var/lib/docker/containers/d19b9013d986f9952d28eb554748868a386f5dbd22026d7ac843606ca30eca43/d19b9013d986f9952d28eb554748868a386f5dbd22026d7ac843606ca30eca43-json.log"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"/happy_khayyam"</span>,</span><br><span class="line">        <span class="string">"RestartCount"</span>: 0,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">        <span class="string">"Platform"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"MountLabel"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ProcessLabel"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"AppArmorProfile"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"ExecIDs"</span>: null,</span><br><span class="line">        <span class="string">"HostConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Binds"</span>: null,</span><br><span class="line">            <span class="string">"ContainerIDFile"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"LogConfig"</span>: &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">                <span class="string">"Config"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"NetworkMode"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"PortBindings"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"RestartPolicy"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"no"</span>,</span><br><span class="line">                <span class="string">"MaximumRetryCount"</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"AutoRemove"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"VolumesFrom"</span>: null,</span><br><span class="line">            <span class="string">"CapAdd"</span>: null,</span><br><span class="line">            <span class="string">"CapDrop"</span>: null,</span><br><span class="line">            <span class="string">"CgroupnsMode"</span>: <span class="string">"host"</span>,</span><br><span class="line">            <span class="string">"Dns"</span>: [],</span><br><span class="line">            <span class="string">"DnsOptions"</span>: [],</span><br><span class="line">            <span class="string">"DnsSearch"</span>: [],</span><br><span class="line">            <span class="string">"ExtraHosts"</span>: null,</span><br><span class="line">            <span class="string">"GroupAdd"</span>: null,</span><br><span class="line">            <span class="string">"IpcMode"</span>: <span class="string">"private"</span>,</span><br><span class="line">            <span class="string">"Cgroup"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Links"</span>: null,</span><br><span class="line">            <span class="string">"OomScoreAdj"</span>: 0,</span><br><span class="line">            <span class="string">"PidMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Privileged"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"PublishAllPorts"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ReadonlyRootfs"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"SecurityOpt"</span>: null,</span><br><span class="line">            <span class="string">"UTSMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"UsernsMode"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"ShmSize"</span>: 67108864,</span><br><span class="line">            <span class="string">"Runtime"</span>: <span class="string">"runc"</span>,</span><br><span class="line">            <span class="string">"ConsoleSize"</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Isolation"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"CpuShares"</span>: 0,</span><br><span class="line">            <span class="string">"Memory"</span>: 0,</span><br><span class="line">            <span class="string">"NanoCpus"</span>: 0,</span><br><span class="line">            <span class="string">"CgroupParent"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"BlkioWeight"</span>: 0,</span><br><span class="line">            <span class="string">"BlkioWeightDevice"</span>: [],</span><br><span class="line">            <span class="string">"BlkioDeviceReadBps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceWriteBps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceReadIOps"</span>: null,</span><br><span class="line">            <span class="string">"BlkioDeviceWriteIOps"</span>: null,</span><br><span class="line">            <span class="string">"CpuPeriod"</span>: 0,</span><br><span class="line">            <span class="string">"CpuQuota"</span>: 0,</span><br><span class="line">            <span class="string">"CpuRealtimePeriod"</span>: 0,</span><br><span class="line">            <span class="string">"CpuRealtimeRuntime"</span>: 0,</span><br><span class="line">            <span class="string">"CpusetCpus"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"CpusetMems"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Devices"</span>: [],</span><br><span class="line">            <span class="string">"DeviceCgroupRules"</span>: null,</span><br><span class="line">            <span class="string">"DeviceRequests"</span>: null,</span><br><span class="line">            <span class="string">"KernelMemory"</span>: 0,</span><br><span class="line">            <span class="string">"KernelMemoryTCP"</span>: 0,</span><br><span class="line">            <span class="string">"MemoryReservation"</span>: 0,</span><br><span class="line">            <span class="string">"MemorySwap"</span>: 0,</span><br><span class="line">            <span class="string">"MemorySwappiness"</span>: null,</span><br><span class="line">            <span class="string">"OomKillDisable"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"PidsLimit"</span>: null,</span><br><span class="line">            <span class="string">"Ulimits"</span>: null,</span><br><span class="line">            <span class="string">"CpuCount"</span>: 0,</span><br><span class="line">            <span class="string">"CpuPercent"</span>: 0,</span><br><span class="line">            <span class="string">"IOMaximumIOps"</span>: 0,</span><br><span class="line">            <span class="string">"IOMaximumBandwidth"</span>: 0,</span><br><span class="line">            <span class="string">"MaskedPaths"</span>: [</span><br><span class="line">                <span class="string">"/proc/asound"</span>,</span><br><span class="line">                <span class="string">"/proc/acpi"</span>,</span><br><span class="line">                <span class="string">"/proc/kcore"</span>,</span><br><span class="line">                <span class="string">"/proc/keys"</span>,</span><br><span class="line">                <span class="string">"/proc/latency_stats"</span>,</span><br><span class="line">                <span class="string">"/proc/timer_list"</span>,</span><br><span class="line">                <span class="string">"/proc/timer_stats"</span>,</span><br><span class="line">                <span class="string">"/proc/sched_debug"</span>,</span><br><span class="line">                <span class="string">"/proc/scsi"</span>,</span><br><span class="line">                <span class="string">"/sys/firmware"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ReadonlyPaths"</span>: [</span><br><span class="line">                <span class="string">"/proc/bus"</span>,</span><br><span class="line">                <span class="string">"/proc/fs"</span>,</span><br><span class="line">                <span class="string">"/proc/irq"</span>,</span><br><span class="line">                <span class="string">"/proc/sys"</span>,</span><br><span class="line">                <span class="string">"/proc/sysrq-trigger"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="string">"Data"</span>: &#123;</span><br><span class="line">                <span class="string">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/dd2564cfba071204f422704e6415b7ca5c5a8491e1eaffea52b71b923263af08-init/diff:/var/lib/docker/overlay2/092e6798349c035a360bc973f7d3a2c6d41252e68b6067fa775278441904685a/diff"</span>,</span><br><span class="line">                <span class="string">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/dd2564cfba071204f422704e6415b7ca5c5a8491e1eaffea52b71b923263af08/merged"</span>,</span><br><span class="line">                <span class="string">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/dd2564cfba071204f422704e6415b7ca5c5a8491e1eaffea52b71b923263af08/diff"</span>,</span><br><span class="line">                <span class="string">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/dd2564cfba071204f422704e6415b7ca5c5a8491e1eaffea52b71b923263af08/work"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Name"</span>: <span class="string">"overlay2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Mounts"</span>: [],</span><br><span class="line">        <span class="string">"Config"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"d19b9013d986"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/bash"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"centos"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: null,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: null,</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;</span><br><span class="line">                <span class="string">"org.label-schema.build-date"</span>: <span class="string">"20201204"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.license"</span>: <span class="string">"GPLv2"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.name"</span>: <span class="string">"CentOS Base Image"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.schema-version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">                <span class="string">"org.label-schema.vendor"</span>: <span class="string">"CentOS"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"NetworkSettings"</span>: &#123;</span><br><span class="line">            <span class="string">"Bridge"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"SandboxID"</span>: <span class="string">"6a005fd0ac7cf3b331c0908689c1bf4bd72833bd6a0568c40884a71e83f35bfe"</span>,</span><br><span class="line">            <span class="string">"HairpinMode"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"LinkLocalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"LinkLocalIPv6PrefixLen"</span>: 0,</span><br><span class="line">            <span class="string">"Ports"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"SandboxKey"</span>: <span class="string">"/var/run/docker/netns/6a005fd0ac7c"</span>,</span><br><span class="line">            <span class="string">"SecondaryIPAddresses"</span>: null,</span><br><span class="line">            <span class="string">"SecondaryIPv6Addresses"</span>: null,</span><br><span class="line">            <span class="string">"EndpointID"</span>: <span class="string">"d15226e38017f4581b48d07956a95a59ac8144489eef214ccfb73d532e22f013"</span>,</span><br><span class="line">            <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">            <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"GlobalIPv6PrefixLen"</span>: 0,</span><br><span class="line">            <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.2"</span>,</span><br><span class="line">            <span class="string">"IPPrefixLen"</span>: 16,</span><br><span class="line">            <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">            <span class="string">"Networks"</span>: &#123;</span><br><span class="line">                <span class="string">"bridge"</span>: &#123;</span><br><span class="line">                    <span class="string">"IPAMConfig"</span>: null,</span><br><span class="line">                    <span class="string">"Links"</span>: null,</span><br><span class="line">                    <span class="string">"Aliases"</span>: null,</span><br><span class="line">                    <span class="string">"NetworkID"</span>: <span class="string">"1e9815b8c590e452bececb0f3f9d4dcf4cd91d40780944f960a3668d658455a6"</span>,</span><br><span class="line">                    <span class="string">"EndpointID"</span>: <span class="string">"d15226e38017f4581b48d07956a95a59ac8144489eef214ccfb73d532e22f013"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">                    <span class="string">"IPAddress"</span>: <span class="string">"172.17.0.2"</span>,</span><br><span class="line">                    <span class="string">"IPPrefixLen"</span>: 16,</span><br><span class="line">                    <span class="string">"IPv6Gateway"</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">"GlobalIPv6Address"</span>: <span class="string">""</span>,</span><br><span class="line">                    <span class="string">"GlobalIPv6PrefixLen"</span>: 0,</span><br><span class="line">                    <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">                    <span class="string">"DriverOpts"</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p><strong>进入当前正在运行的容器</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们通常都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id baseShell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">fcfb1d878478   centos    <span class="string">"/bin/sh -c 'while t…"</span>   16 minutes ago   Up 16 minutes             nostalgic_chatelet</span><br><span class="line">d19b9013d986   centos    <span class="string">"/bin/bash"</span>              19 minutes ago   Up 19 minutes             happy_khayyam</span><br><span class="line"></span><br><span class="line">[root@192 eternal]<span class="comment"># docker exec -it fcfb1d878478 /bin/bash</span></span><br><span class="line"></span><br><span class="line">[root@fcfb1d878478 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line">[root@fcfb1d878478 /]<span class="comment"># ps -ef</span></span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 05:22 ?        00:00:00 /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> zhuxiaopeng;sleep 1;<span class="keyword">done</span></span><br><span class="line">root       1004      0  0 05:39 pts/0    00:00:00 /bin/bash</span><br><span class="line">root       1030      1  0 05:39 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sle</span><br><span class="line">root       1031   1004  0 05:39 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># docker attach fcfb1d878478 </span></span><br><span class="line">正在执行当前代码。。。</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker exec        # 进入容器后开启一个新的终端，可以在里面操作(常用)</span></span><br><span class="line"><span class="comment"># docker attach      # 进入容器正在执行的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>从容器内拷贝到主机上</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker cp [r] 容器id :容器内路径 目的地主机路径</span><br><span class="line"><span class="comment"># 参数r : 递归拷贝</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker cp a485a9d900b4:/home/test.java /home</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前运行的容器</span></span><br><span class="line">[root@192 home]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">d19b9013d986   centos    <span class="string">"/bin/bash"</span>   36 minutes ago   Up 36 minutes             happy_khayyam</span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">[root@192 home]<span class="comment"># docker attach d19b9013d986</span></span><br><span class="line"><span class="comment">#在容器中home目录下创建java文件</span></span><br><span class="line">[root@d19b9013d986 /]<span class="comment"># cd /home</span></span><br><span class="line">[root@d19b9013d986 home]<span class="comment"># ls</span></span><br><span class="line">[root@d19b9013d986 home]<span class="comment"># touch test.java</span></span><br><span class="line"><span class="comment">#退出容器</span></span><br><span class="line">[root@d19b9013d986 home]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">#容器没有运行</span></span><br><span class="line">[root@192 home]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="comment">#查询历史运行</span></span><br><span class="line">[root@192 home]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS                       PORTS     NAMES</span><br><span class="line">3ea2748d7593   centos         <span class="string">"/bin/bash"</span>              5 minutes ago       Exited (127) 3 minutes ago             vigorous_shaw</span><br><span class="line">fcfb1d878478   centos         <span class="string">"/bin/sh -c 'while t…"</span>   34 minutes ago      Exited (137) 6 minutes ago             nostalgic_chatelet</span><br><span class="line">d19b9013d986   centos         <span class="string">"/bin/bash"</span>              37 minutes ago      Exited (0) 15 seconds ago              happy_khayyam</span><br><span class="line">4188e7491ced   centos         <span class="string">"/bin/bash"</span>              42 minutes ago      Exited (0) 42 minutes ago              tender_ellis</span><br><span class="line">0ded8a91e9c6   centos         <span class="string">"/bin/bash"</span>              47 minutes ago      Exited (0) 43 minutes ago              naughty_chatterjee</span><br><span class="line">f337b5c89a38   centos         <span class="string">"/bin/bash"</span>              About an hour ago   Exited (0) 44 minutes ago              quirky_knuth</span><br><span class="line">263278b1e98e   d1165f221234   <span class="string">"/hello"</span>                 3 hours ago         Exited (0) 3 hours ago                 elegant_gagarin</span><br><span class="line"><span class="comment">#将容器中的java文件拷贝到主机home目录下</span></span><br><span class="line">[root@192 home]<span class="comment"># docker cp d19b9013d986:/home/test.java /home</span></span><br><span class="line"><span class="comment">#查看，已成功复制test.java</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">eternal  springboot  test.java  www  zhuxiaopeng.java</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728145612058.png" alt="image-20210728145612058"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container  #当前shell下attach连接指定运行镜像</span><br><span class="line"></span><br><span class="line">build     Build an image from a Dockerfile  #通过Dockerfile定制镜像</span><br><span class="line"></span><br><span class="line">commit    Create a new image from a containers changes  #提交当前容器为新的镜像</span><br><span class="line"></span><br><span class="line">cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line"></span><br><span class="line">create    Create a new container  #创建一个新的容器，同run 但不启动容器</span><br><span class="line"></span><br><span class="line">diff    Inspect changes on a containers filesystem  #查看docker容器变化</span><br><span class="line"></span><br><span class="line">events    Get real time events from the server#从docker服务获取容器实时事件</span><br><span class="line"></span><br><span class="line">exec    Run a command in a running container#在已存在的容器上运行命令</span><br><span class="line"></span><br><span class="line">export    Export a containers filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)</span><br><span class="line"></span><br><span class="line">history    Show the history of an image  #展示一个镜像形成历史</span><br><span class="line"></span><br><span class="line">images    List images  #列出系统当前镜像</span><br><span class="line"></span><br><span class="line">import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)</span><br><span class="line"></span><br><span class="line">info    Display system-wide information  #显示系统相关信息</span><br><span class="line"></span><br><span class="line">inspect    Return low-level information on a container or image  #查看容器详细信息</span><br><span class="line"></span><br><span class="line">kill    Kill a running container  #kill指定docker容器</span><br><span class="line"></span><br><span class="line">load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)</span><br><span class="line"></span><br><span class="line">login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器</span><br><span class="line"></span><br><span class="line">logout    Log out from a Docker registry  #从当前Docker registry退出</span><br><span class="line"></span><br><span class="line">logs    Fetch the logs of a container  #输出当前容器日志信息</span><br><span class="line"></span><br><span class="line">pause    Pause all processes within a container#暂停容器</span><br><span class="line"></span><br><span class="line">port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口</span><br><span class="line"></span><br><span class="line">ps    List containers  #列出容器列表</span><br><span class="line"></span><br><span class="line">pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line"></span><br><span class="line">push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"></span><br><span class="line">rename    Rename a container  #重命名容器</span><br><span class="line"></span><br><span class="line">restart    Restart a running container  #重启运行的容器</span><br><span class="line"></span><br><span class="line">rm    Remove one or more containers  #移除一个或者多个容器</span><br><span class="line"></span><br><span class="line">rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span><br><span class="line"></span><br><span class="line">run    Run a command in a new container  #创建一个新的容器并运行一个命令</span><br><span class="line"></span><br><span class="line">save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)</span><br><span class="line"></span><br><span class="line">search    Search the Docker Hub for images  #在docker</span><br><span class="line"></span><br><span class="line">hub中搜索镜像</span><br><span class="line">start    Start one or more stopped containers#启动容器</span><br><span class="line"></span><br><span class="line">stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源</span><br><span class="line"></span><br><span class="line">stop    Stop a running container  #停止容器</span><br><span class="line"></span><br><span class="line">tag         Tag an image into a repository  #给源中镜像打标签</span><br><span class="line"></span><br><span class="line">top       Display the running processes of a container #查看容器中运行的进程信息</span><br><span class="line"></span><br><span class="line">unpause    Unpause all processes within a container  #取消暂停容器</span><br><span class="line"></span><br><span class="line">version    Show the Docker version information#查看容器版本号</span><br><span class="line"></span><br><span class="line">wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote><p><strong>使用Docker 安装 Nginx</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728180401165.png" alt="image-20210728180401165"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、搜索镜像</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker pull nginx</span></span><br><span class="line"><span class="comment"># 2、开启一个端口</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">07e8c16c1f84cbb020b53f16bb7c0a25ae82c10d129b1f0c29c5e82b76a86888</span><br><span class="line"><span class="comment"># 3、查看当前运行</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES</span><br><span class="line">07e8c16c1f84   nginx     <span class="string">"/docker-entrypoint.…"</span>   5 seconds ago   Up 2 seconds   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="comment"># 4、测试访问（主机可以通过浏览器访问）</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># curl localhost:3344</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、进入容器</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker exec -it nginx01 /bin/bash</span></span><br><span class="line"><span class="comment"># 6、寻找nginx</span></span><br><span class="line">root@07e8c16c1f84:/<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line"><span class="comment"># 7、nginx的路径</span></span><br><span class="line">root@07e8c16c1f84:/<span class="comment"># cd /usr/share/nginx</span></span><br><span class="line">root@07e8c16c1f84:/usr/share/nginx<span class="comment"># ls</span></span><br><span class="line">html</span><br><span class="line"><span class="comment"># 8、首页的位置</span></span><br><span class="line">root@07e8c16c1f84:/usr/share/nginx<span class="comment"># cd html</span></span><br><span class="line">root@07e8c16c1f84:/usr/share/nginx/html<span class="comment"># ls</span></span><br><span class="line">50x.html  index.html</span><br><span class="line"><span class="comment"># 9、进去查看</span></span><br><span class="line">root@07e8c16c1f84:/usr/share/nginx/html<span class="comment"># cat index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">07e8c16c1f84   nginx     <span class="string">"/docker-entrypoint.…"</span>   22 minutes ago   Up 22 minutes   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="comment"># 10、停止nginx</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker stop 07e8c16c1f84</span></span><br><span class="line">07e8c16c1f84</span><br></pre></td></tr></table></figure><blockquote><p><strong>centos7关闭防火墙</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="comment"># 执行后可以看到绿色字样标注的“active（running）”，说明防火墙是开启状态</span></span><br><span class="line"><span class="comment"># 关闭运行的防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld.service<span class="comment">#disavtive（dead）的字样，说明防火墙已经关闭</span></span><br><span class="line"><span class="comment"># 每次开机都要关闭防火墙 麻烦那就把防火墙禁用</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><blockquote><p><strong>重新打开刚刚关闭的端口</strong></p></blockquote><p>直接对端口进行删除操作之后，创建一个同名的端口会报错</p><p>Error response from daemon: driver failed programming external connectivity on endpoint</p><p><strong>错误展示</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost eternal]<span class="comment"># docker ps -l</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">07e8c16c1f84   nginx     <span class="string">"/docker-entrypoint.…"</span>   38 minutes ago   Exited (0) 15 minutes ago             nginx01</span><br><span class="line">[root@localhost eternal]<span class="comment"># docker rm 07e8c16c1f84</span></span><br><span class="line">07e8c16c1f84</span><br><span class="line">[root@localhost eternal]<span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">90e868c7c07dc025f0bb4449d481397b415a5c1f87c4f0043dea0bb4f144ced8</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint nginx01</span><br></pre></td></tr></table></figure><p>Docker容器做端口映射报错，docker服务启动时定义的自定义链DOCKER被清除；重启即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重启docker服务</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># systemctl restart docker</span></span><br><span class="line"><span class="comment">#打开关闭的端口</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">docker: Error response from daemon: Conflict. The container name <span class="string">"/nginx01"</span> is already <span class="keyword">in</span> use by container <span class="string">"90e868c7c07dc025f0bb4449d481397b415a5c1f87c4f0043dea0bb4f144ced8"</span>. You have to remove (or rename) that container to be able to reuse that name.  </span><br><span class="line"><span class="comment">#您必须删除(或重命名)该容器才能重用该名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#顾名思义就是让我们删除掉该容器，重新创建一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前运行的容器</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="comment">#查看历史运行</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker ps -l</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS    PORTS     NAMES</span><br><span class="line">90e868c7c07d   nginx     <span class="string">"/docker-entrypoint.…"</span>   3 minutes ago   Created             nginx01</span><br><span class="line"><span class="comment">#删除所要打开的端口</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker rm 90e868c7c07d   </span></span><br><span class="line">90e868c7c07d</span><br><span class="line"><span class="comment">#重新打开</span></span><br><span class="line">[root@localhost eternal]<span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">b61e0caa7a821a97c7c9e0688efd72fa3bc09b899fb93d98072919ed0b7ebc8a</span><br></pre></td></tr></table></figure><ul><li>当关闭一个端口后，需要再次打开。</li><li>先重启docker服务</li><li>在遍历查询历史运行，找到之前关闭的那个端口</li><li>对端口进行删除操作</li><li>重新打开端口（重新创建一个）</li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><p><strong>使用docker安装 tomcat</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方文档解释</span></span><br><span class="line"><span class="comment"># -it ：交互模式</span></span><br><span class="line"><span class="comment"># --rm：容器启动成功并退出以后容器就自动移除，一般在测试情况下使用！</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="comment"># 1、下载tomcat镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="comment"># 2、启动</span></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="comment">#通过网页打开3355端口，出现404，表明里面没有找到页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、进入tomcat</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01 /bin/bash</span><br><span class="line"><span class="comment"># linux命令少了，没有webapps 阿里云镜像的原因，最精简化</span></span><br><span class="line"></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ls#查看当前目录</span></span><br><span class="line">BUILDING.txt NOTICERUNNING.txt  lib     temp   work</span><br><span class="line">CONTRIBUTING.md  README.mdbin     logs     webapps</span><br><span class="line">LICENSE RELEASE-NOTESconf     native-jni-lib  webapps.dist</span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps#进入webapps</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls#发现什么都没有</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># cd ..</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps.dist</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat/webapps.dist<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat/webapps.dist<span class="comment"># cd ..</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cp -r webapps.dist/* wbapps#将dist里面的内容复制到webapps</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@e73511afd63d:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls#重新查看</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"></span><br><span class="line"><span class="comment">#这时候，通过网页打开3355端口，就可以看到tomcat的欢迎页</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、思考：我们以后要部署项目，还需要进入容器中，是不是十分麻烦，要是有一种技术，可以将容器内和我们Linux进行映射挂载就好了？我们后面会将数据卷技术来进行挂载操作，也是一个核心内容，这里大家先听听名词就好，我们很快就会讲到！</span></span><br></pre></td></tr></table></figure><h3 id="es-kibana"><a href="#es-kibana" class="headerlink" title="es+kibana"></a><strong>es+kibana</strong></h3><blockquote><p><strong>使用docker 部署 es + kibana</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es 暴露的端口很多！</span></span><br><span class="line"><span class="comment"># es 的数据一般需要放置到安全目录！挂载</span></span><br><span class="line"><span class="comment"># --net somenetwork ? 网络配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动elasticsearch</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">"discovery.type=single-node"</span> elasticsearch:7.6.2</span><br><span class="line"><span class="comment"># 测试一下es是否成功启动</span></span><br><span class="line">curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"bbe65dfe0dbf"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"oDk8zmm9Tc2B1QH6wtkpLg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.6.2"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.4.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#查看所占用内存</span></span><br><span class="line">docker stats</span><br><span class="line"><span class="comment">#由于我配置的虚拟机内存8GB所以一切很流畅</span></span><br><span class="line">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT    MEM %     NET I/O         BLOCK I/O     PIDS</span><br><span class="line">bbe65dfe0dbf   elasticsearch   0.43%     1.263GiB / 7.62GiB   16.58%    1.18kB / 942B   0B / 1.67MB   46</span><br><span class="line"><span class="comment">#关闭es，修改内存限制</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMES</span><br><span class="line">bbe65dfe0dbf   elasticsearch:7.6.2   <span class="string">"/usr/local/bin/dock…"</span>   5 minutes ago   Up 5 minutes   0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp, :::9300-&gt;9300/tcp   elasticsearch</span><br><span class="line">[root@192 eternal]<span class="comment"># docker stop bbe65dfe0dbf</span></span><br><span class="line">bbe65dfe0dbf</span><br><span class="line"></span><br><span class="line"><span class="comment">#elasticsearch十分占用内存,需要修改配置文件 -e 限制其启动的内存</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=<span class="string">"-Xms64m -Xmx 512m"</span>  elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210728215452469.png" alt="image-20210728215452469"></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>portainer</li></ul><ul><li>Rancher(CI/CD再用)</li></ul><p><strong>什么是portainer?</strong></p><p>Docker图形化界面管理工具! 提供一个后台面板供我们操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure><p><strong>查看linux端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line"><span class="comment">#找到ens33的ip地址，直接在window浏览器输入ip+端口号即可打开网页</span></span><br></pre></td></tr></table></figure><p>访问测试: 外网: 8088 <a href="http://外网ip:8088/" target="_blank" rel="noopener">http://外网ip:8088/</a></p><p><strong>界面展示</strong></p><p>第一次注册用户后，选择连接方式</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729092936856.png" alt="image-20210729092936856"></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729093804324.png" alt="image-20210729093804324"></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729093718131.png" alt="image-20210729093718131"></p><h1 id="5-Docker镜像"><a href="#5-Docker镜像" class="headerlink" title="5.Docker镜像"></a>5.Docker镜像</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像就是一个轻量级的,可执行的独立软件包,用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码,运行时,库,环境变量和配置文件。</p><p>所有的应用,直接打包docker镜像,就可以直接跑起来!</p><p><strong>如何得到镜像:</strong></p><ul><li>从远程仓库下载</li><li>朋友拷贝给你</li><li>自己制作一个镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p><strong>UnionFs(联合文件系统查询)</strong></p></blockquote><p>我们下载的时候看到的一层一层就是这个</p><p><strong>UnionFs(联合文件系统):</strong> Union文件系统(UnionFS)是一种分层,轻量级并且高性能的文件系统,它支持对文件系统的修改作为一次提交来一层层的叠加,同时可以将不同目录挂载到同一个虚拟文件系统下,Union文件系统是Docker镜像的基础,镜像可以通过分层来进行继承,基于基础镜像(没有父镜像),可以制作各种具体的应用镜像</p><p><strong>特性:</strong> 一次同时加载多个文件系统,但从外面看起来,只能看到一个文件系统,联合加载会把各层文件系统叠加起来,这样最终的文件系统会包含所有底层的文件和目录结构</p><blockquote><p><strong>Docker镜像加载原理</strong></p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成,这种层级的文件系统UnionFS</p><p><strong>bootfs(boot file system)</strong>主要包含bootlloader和kernel,bootfs主要是引导加载kernel,Linux刚启动时会加载bootfs文件系统,在docker镜像的最底层是bootfs,这一层与我们典型的Linux/Unix系统是一样的,包含boot加载器和内核,当boot加载完成之后整个内核就在内存中了,此时内存的使用权已由bootfa转交给内核,此时系统也会卸载bootfs</p><p>rootfs(root file system),在bootfs之上,包含的就是典型Linux系统中的/dev, /proc,/bin, /etc等标准目录和文件,rootfs就是各种不同的操作系统发行版,比如Ubuntu, CentOS等等</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729094559761.png" alt="image-20210729094559761"></p><p>平时我们安装进虚拟机的CentOS都是好几个G,为什么Docker这里才200M?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat                9.0       46cfbf1293b1   5 days ago      668MB</span><br><span class="line">tomcat                latest    46cfbf1293b1   5 days ago      668MB</span><br><span class="line">nginx                 latest    08b152afcfae   6 days ago      133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   4 months ago    79.1MB</span><br><span class="line">centos                latest    300e315adb2f   7 months ago    209MB</span><br><span class="line">elasticsearch         7.6.2     f29a1ee41030   16 months ago   791MB</span><br></pre></td></tr></table></figure><p>对于一个精简的OS,rootfs可以很小,只需要包含基本的命令,工具和程序库就可以了,因为底层直接用Host的kernel,自己只需要提供rootFS就可以了。由此可见对于不同的linux发行版,bootfs基本是一致的,rootfs会有差别,因此不同的发行版可以共用bootfs</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><blockquote><p><strong>分层镜像</strong></p></blockquote><p>我们可以去下载一个镜像,注意观察下载的日志输出,可以看到是一层一层的在下载!</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729101847597.png" alt="image-20210729101847597"></p><p>思考: 为什么Docker镜像要采用这种分层的结构呢?</p><p>最大好处,我觉得莫过于资源共享了!比如有多个镜像都从相同的Base镜像构建而来,那么宿主机</p><p>只需在磁盘上保留一份base镜像,同时内存中也只需要加载一份base镜像,这样就可以为所有的容器服务了,而且镜像的每一层都可以被共享</p><p>查看镜像分层的方式可以通过<code>docker image inspect</code> 命令!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker pull redis</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">33847f680f63: Already exists </span><br><span class="line">26a746039521: Pull complete </span><br><span class="line">18d87da94363: Pull complete </span><br><span class="line">5e118a708802: Pull complete </span><br><span class="line">ecf0dbe7c357: Pull complete </span><br><span class="line">46f280ba52da: Pull complete </span><br><span class="line">Digest: sha256:cd0c68c5479f2db4b9e2c5fbfdb7a8acb77625322dd5b474578515422d3ddb59</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br><span class="line">[root@192 eternal]<span class="comment"># docker image inspect redis</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"RootFS"</span>: &#123;</span><br><span class="line">            <span class="string">"Type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">            <span class="string">"Layers"</span>: [</span><br><span class="line">                <span class="string">"sha256:814bff7343242acfd20a2c841e041dd57c50f0cf844d4abd2329f78b992197f4"</span>,</span><br><span class="line">                <span class="string">"sha256:dd1ebb1f5319785e34838c7332a71e5255bda9ccf61d2a0bf3bff3d2c3f4cdb4"</span>,</span><br><span class="line">                <span class="string">"sha256:11f99184504048b93dc2bdabf1999d6bc7d9d9ded54d15a5f09e36d8c571c32d"</span>,</span><br><span class="line">                <span class="string">"sha256:e461360755916af80821289b1cbc503692cf63e4e93f09b35784d9f7a819f7f2"</span>,</span><br><span class="line">                <span class="string">"sha256:45f6df6342536d948b07e9df6ad231bf17a73e5861a84fc3c9ee8a59f73d0f9f"</span>,</span><br><span class="line">                <span class="string">"sha256:262de04acb7e0165281132c876c0636c358963aa3e0b99e7fbeb8aba08c06935"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>理解:</p><p>所有的镜像都起始于一个基础镜像层,当进行修改或增加新的内容时,就会在当前镜像层之上,创建一个新的镜像层,</p><p>举一个简单的例子,假如基于Ubuntu Linux 16.64创建一个新的镜像,这就是新镜像的第一层,如果在该镜像中添加python包,就会在该镜像之上创建第二个镜像层; 如果继续添加一个安全补丁,就会创建第三个镜像层</p><p>该镜像已经包含3个镜像层,如下图所示(这只是一个简单的例子)<br><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729102349446.png" alt="image-20210729102349446"></p><p>在添加额外的镜像层的同时,镜像始终保持是当前所有镜像的组合,理解这一点非常重要,下图举了一个简单的例子,每个镜像层包含3个文件,而镜像包含了两个镜像层的6个文件</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729102414546.png" alt="image-20210729102414546"></p><p>上图中的镜像层跟之前图中的略有区别,主要是便于展示文件</p><p>下图中展示了一个稍微复杂的三层镜像,在外部看来整个镜像只有6个文件,这是因为最上层的文件7是文件5的一个更新版本</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729102456662.png" alt="image-20210729102456662"></p><p>这种情况下,上层镜像层中的文件覆盖了底层镜像层中的文件,这样就使得文件的更新版本作为一个新镜像层添加到镜像当中</p><p>Docker通过存储引擎(新版本采用快照机制)的方式来实现镜像层堆栈,并保证多层镜像层对外展示为统一的文件系统</p><p>Lunux上可用的存储引擎有AUFS,Overlay2,Device Mapper,Btrfs以及ZFS,顾名思义,每种存储引擎都是基于Linux对应的文件系统或者块设备技术,并且每种存储引擎都有其独有的性能特点</p><p>Docker在Windows上仅支持windosfilter一种存储引擎,该引擎基于NTFS文件系统之上实现了分层和CoW[1]</p><p>下图展示了与系统显示相同的三层镜像,所有的镜像层堆叠合并,对外提供统一的视图层</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729102624657.png" alt="image-20210729102624657"></p><blockquote><p><strong>特点</strong></p></blockquote><p>Docker镜像都是只读的,当容器启动时,一个新的可写层被加载到镜像的顶部!</p><p>这一层就是我们通常所说的容器层,容器之下的都叫镜像层</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/20200619183036853.png" alt="img"></p><p>如何提交一个自己的镜像</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的镜像</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令和git原理类似</span></span><br><span class="line">docker commit -m=<span class="string">"提交的描述信息"</span> -a=<span class="string">"作者"</span> 容器ID 目标镜像名:[tag]</span><br></pre></td></tr></table></figure><p>测试tomcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、从Docker Hub 下载tomcat镜像到本地并运行 -it 交互终端 -p 端口映射</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"><span class="comment"># 注意：坑爹：docker启动官方tomcat镜像的容器，发现404是因为使用了加速器，而加速器里的tomcat的webapps下没有root等文件！</span></span><br><span class="line"><span class="comment"># 下载tomcat官方镜像，就是这个镜像（阿里云里的tomcat的webapps下没有任何文件）</span></span><br><span class="line"><span class="comment"># 进入tomcat查看cd到webapps下发现全部空的，反而有个webapps.dist里有对应文件，cp -r到webapps下！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、复制内容</span></span><br><span class="line"><span class="comment">#启动tomcat，并进入webapps目录</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker run -d -p 3355:8080 --name tomcat01 tomcat</span></span><br><span class="line">7b5dbb35aed317ea494c5875d8268f52ebfecc84e5e3862047b55a8c2379da91</span><br><span class="line">[root@192 eternal]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># cd ..</span></span><br><span class="line"><span class="comment">#使webapps里面有内容</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cp -r webapps.dist/* webapps</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、删除镜像产生的tomcat容器文档</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="comment">#可以看到docs存在</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># curl localhost:8080/docs/</span></span><br><span class="line"><span class="comment">#成功进入</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># rm -rf docs#删除docs</span></span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">ROOT  exampleshost-manager  manager</span><br><span class="line">root@7b5dbb35aed3:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># curl localhost:8080/docs/#再次访问就是404</span></span><br><span class="line">&lt;!doctype html&gt;&lt;html lang=<span class="string">"en"</span>&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 – Not Found&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、当前运行的tomcat实例就是一个没有docs的容器，我们使用它为模板commit一个没有docs的tomcat新镜像， tomcat02</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">7b5dbb35aed3   tomcat    <span class="string">"catalina.sh run"</span>   14 minutes ago   Up 14 minutes   0.0.0.0:3355-&gt;8080/tcp, :::3355-&gt;8080/tcp   tomcat01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：commit的时候，容器的名字不能有大写，否则报错：invalid reference format</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker commit -a="eternal" -m="no tomcat docs" 7b5dbb35aed3 tomcat02:2.1</span></span><br><span class="line">sha256:e06f510955ba2d0f47e571dcb19faec62a83130483de35a756286572efb03849</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看提交的镜像 tomcat02</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat02              2.1       e06f510955ba   6 seconds ago   670MB</span><br><span class="line">tomcat                9.0       46cfbf1293b1   5 days ago      668MB</span><br><span class="line">[root@192 eternal]<span class="comment"># </span></span><br><span class="line"><span class="comment"># 这样我们自己就创建了一个镜像，使用修改过的镜像</span></span><br></pre></td></tr></table></figure><p> 如果你想要保存你当前的状态，可以通过commit，来提交镜像，方便使用，类似于 VM 中的快照！</p><h1 id="6-容器数据卷"><a href="#6-容器数据卷" class="headerlink" title="6.容器数据卷"></a>6.容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念回顾</strong>：</p><p>将应用和运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对于数据的要求，是希望能够 持久化的！将应用和环境打包成一个镜像!</p><p><strong>问题</strong></p><ul><li><p>数据都在容器中,那么我们容器删除,数据就会丢失! <strong>需求: 数据可以持久化</strong></p></li><li><p>MYSQL, 容器删了,删库跑路! <strong>需求: mysql数据可以存储在本地!</strong></p></li></ul><p>所以我们希望容器之间有可能可以共享数据，Docker容器产生的数据，如果不通过docker commit 生成 新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了！这样是行 不通的！</p><p>为了能保存数据在Docker中我们就可以使用卷！让数据挂载到我们本地！这样数据就不会因为容器删除 而丢失了！容器之间可以有一个数据共享的技术! Docker 容器中产生的数据,同步到本地!</p><p>这就是卷技术! 目录的挂载,将容器内的目录挂载到Linux上面!</p><p><strong>作用：</strong></p><p>卷就是目录或者文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此 能够绕过 Union File System ， 提供一些用于持续存储或共享数据的特性：</p><p> 卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂 载的数据卷。</p><p><strong>特点：</strong></p><p>1、数据卷可在容器之间共享或重用数据 </p><p>2、卷中的更改可以直接生效 </p><p>3、数据卷中的更改不会包含在镜像的更新中 </p><p>4、数据卷的生命周期一直持续到没有容器使用它为止</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729205225518.png" alt="image-20210729205225518"></p><p><strong>总结一句话： 就是容器的持久化，以及容器间的继承和数据共享！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一: 直接使用命令来挂载 -v</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录: 容器内目录  -p 主机端口: 容器端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动起来我们可以使用 docker inspect 容器id</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># cd /home</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">eternal  springboot  www  </span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">[root@192 home]<span class="comment"># docker run -it -v /home/ceshi:/home centos /bin/bash</span></span><br><span class="line">[root@bc24b5930880 /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@bc24b5930880 /]<span class="comment"># cd /home</span></span><br><span class="line">[root@bc24b5930880 home]<span class="comment"># ls</span></span><br><span class="line">[root@bc24b5930880 home]<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否挂在成功</span></span><br><span class="line">[root@bc24b5930880 home]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">ceshi  eternal  springboot  www</span><br><span class="line">[root@192 home]<span class="comment"># docker ps -l</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS       </span><br><span class="line">bc24b5930880   centos    <span class="string">"/bin/bash"</span>   13 minutes ago   Exited (0) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看挂载信息</span></span><br><span class="line">[root@192 home]<span class="comment"># docker inspect bc24b5930880 </span></span><br><span class="line"> <span class="string">"Mounts"</span>: [<span class="comment"># 挂载 -v 卷</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="string">"Source"</span>: <span class="string">"/home/ceshi"</span>,<span class="comment"># 主机内地址</span></span><br><span class="line">                <span class="string">"Destination"</span>: <span class="string">"/home"</span>,<span class="comment"># docker容器内的地址</span></span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><p><strong>测试容器和宿主机之间数据共享：可以发现，在容器中，创建的会在宿主机中看到</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729205106638.png" alt="image-20210729205106638"></p><p>同步的过程，双向绑定，里面发生改变，外部也会发生改变</p><p><strong>测试容器停止退出后，主机修改数据是否会同步</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729205912699.png" alt="image-20210729205912699"></p><ul><li>停止容器</li><li>宿主机上修改文件</li><li>启动容器</li><li>查看文件（已被修改）</li></ul><p><strong>好处：</strong>我们以后修改只需要在本地修改即可，容器内会自动同步</p><h2 id="实战-安装Mysql"><a href="#实战-安装Mysql" class="headerlink" title="实战: 安装Mysql"></a>实战: 安装Mysql</h2><p>思考: mysql的数据持久化的问题, data目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除文件夹，删除容器</span></span><br><span class="line">[root@192 home]<span class="comment"># rm -rf ceshi</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">eternal  springboot  www</span><br><span class="line">[root@192 home]<span class="comment"># docker ps -l</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         </span><br><span class="line">8646e18386c8   centos    <span class="string">"/bin/bash"</span>   19 minutes ago   </span><br><span class="line">[root@192 home]<span class="comment"># docker rm 8646e18386c8</span></span><br><span class="line">8646e18386c8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取mysql镜像</span></span><br><span class="line">[root@192 home]<span class="comment"># docker pull mysql:8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器,需要做数据挂载! # 安装启动mysql,需要配置密码,这是官方的</span></span><br><span class="line"><span class="comment"># 官方测试: docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=密码 -d mysql:tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启mysql</span></span><br><span class="line">-d  后台运行</span><br><span class="line">-p  端口暴露（将3306端口映射为3310）</span><br><span class="line">-v  数据挂载</span><br><span class="line">-e  环境配置</span><br><span class="line">--name 容器名</span><br><span class="line"></span><br><span class="line">[root@192 home]<span class="comment"># docker run  -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:8.0</span></span><br><span class="line">88e95814f3c099498ee747a88c8343a4152e3e9200c16e93515bf96ee6569e9f</span><br></pre></td></tr></table></figure><h3 id="测试链接"><a href="#测试链接" class="headerlink" title="测试链接"></a><strong>测试链接</strong></h3><p>window下打开navcate创建新的连接，我们的端口是3310</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729212554797.png" alt="image-20210729212554797"></p><p>连接成功</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729212617525.png" alt="image-20210729212617525"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a><strong>创建数据库</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210729213059778.png" alt="image-20210729213059778"></p><p>Linux查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从主机中进行查看</span></span><br><span class="line">[root@192 home]<span class="comment"># cd /home</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">eternal  mysql  springboot  www</span><br><span class="line">[root@192 home]<span class="comment"># cd mysql</span></span><br><span class="line">[root@192 mysql]<span class="comment"># ls</span></span><br><span class="line">conf  data</span><br><span class="line">[root@192 mysql]<span class="comment"># cd data</span></span><br><span class="line"><span class="comment">#查看数据库</span></span><br><span class="line">[root@192 data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf       client-cert.pem    ib_logfile0   performance_schema  undo_001</span><br><span class="line">binlog.000001  client-key.pem     ib_logfile1   private_key.pem     undo_002</span><br><span class="line">binlog.000002  <span class="comment">#ib_16384_0.dblwr  ibtmp1        public_key.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#发现多了一个数据库 vmlinux</span></span><br><span class="line">[root@192 data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf       client-cert.pem    ib_logfile0   performance_schema  undo_001</span><br><span class="line">binlog.000001  client-key.pem     ib_logfile1   private_key.pem     undo_002</span><br><span class="line">binlog.000002  <span class="comment">#ib_16384_0.dblwr  ibtmp1        public_key.pem      vmlinux</span></span><br></pre></td></tr></table></figure><h3 id="mysql容器删除"><a href="#mysql容器删除" class="headerlink" title="mysql容器删除"></a><strong>mysql容器删除</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker rm -f 88e95814f3c0 </span></span><br><span class="line">88e95814f3c0</span><br><span class="line"><span class="comment"># 发现数据库连接不上</span></span><br><span class="line"><span class="comment"># 进入主机目录，发现数据仍存在</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">eternal  mysql  springboot  www</span><br><span class="line">[root@192 home]<span class="comment"># cd mysql</span></span><br><span class="line">[root@192 mysql]<span class="comment"># ls</span></span><br><span class="line">conf  data</span><br><span class="line">[root@192 mysql]<span class="comment"># cd data</span></span><br><span class="line">[root@192 data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf       ca.pem             ib_buffer_pool  <span class="comment">#innodb_temp        public_key.pem   undo_002</span></span><br><span class="line">binlog.000001  client-cert.pem    ibdata1         mysql               server-cert.pem  vmlinux</span><br><span class="line">binlog.000002  client-key.pem     ib_logfile0     mysql.ibd           server-key.pem</span><br><span class="line">binlog.index   <span class="comment">#ib_16384_0.dblwr  ib_logfile1     performance_schema  sys</span></span><br><span class="line">ca-key.pem     <span class="comment">#ib_16384_1.dblwr  ibtmp1          private_key.pem     undo_001</span></span><br></pre></td></tr></table></figure><p><strong>我们挂载到本地的数据卷依旧没有丢失,这就实现了容器数据持久化功能</strong></p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><p><strong>匿名挂载</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-v 容器内路径!</span><br><span class="line">docker -run -P -name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@192 eternal]<span class="comment"># docker run -d -P --name nginx01 -v /etc/nginx nginx</span></span><br><span class="line">d5193df71df3d0d44df820c7c32518bb7b40b59cae71dbf80230400dacb73740</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的卷的情况</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     0d1fb64140bf04c25a894ccbae1c5b107bcdf2412e6d05143dbd89ded9738971</span><br><span class="line"><span class="built_in">local</span>     5efd0830872be316307c99067b8a246d733749850143a7dfc33c9ce8dec250bc</span><br><span class="line"><span class="built_in">local</span>     282269a3df525ed1056db51ab7042953057c96001180d44e746b2827f659e9a5</span><br><span class="line"><span class="built_in">local</span>     cb48bd0e6536c970fd23a2d7b47687e86b8a0a091a968502df7efb7b6c593a38</span><br><span class="line"><span class="comment">#这里发现,这种就是匿名挂载, 我们在 -v只写了容器内的路径,没有写容器外的路径</span></span><br></pre></td></tr></table></figure><p><strong>具名挂载</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 -v 卷名:容器内路径</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span></span><br><span class="line">4aed18489886ddeb5be37bb73784caf8d10191220dac8dc850991eba8a106b7d</span><br><span class="line"><span class="comment">#查看挂载，juming-nginx</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     juming-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下这个卷</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker volume inspect juming-nginx</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"CreatedAt"</span>: <span class="string">"2021-07-30T08:56:12+08:00"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Labels"</span>: null,</span><br><span class="line">        <span class="string">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/juming-nginx/_data"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"juming-nginx"</span>,</span><br><span class="line">        <span class="string">"Options"</span>: null,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该卷的配置文件</span></span><br><span class="line">[root@192 eternal]<span class="comment"># cd /var/lib/docker</span></span><br><span class="line">[root@192 docker]<span class="comment"># ls</span></span><br><span class="line">buildkit    image    overlay2  runtimes  tmp    volumes</span><br><span class="line">containers  network  plugins   swarm     trust</span><br><span class="line">[root@192 docker]<span class="comment"># cd volumes</span></span><br><span class="line">[root@192 volumes]<span class="comment"># ls</span></span><br><span class="line">0d1fb64140bf04c25a894ccbae1c5b107bcdf2412e6d05143dbd89ded9738971</span><br><span class="line">282269a3df525ed1056db51ab7042953057c96001180d44e746b2827f659e9a5</span><br><span class="line">5efd0830872be316307c99067b8a246d733749850143a7dfc33c9ce8dec250bc</span><br><span class="line">backingFsBlockDev</span><br><span class="line">cb48bd0e6536c970fd23a2d7b47687e86b8a0a091a968502df7efb7b6c593a38</span><br><span class="line">juming-nginx</span><br><span class="line">metadata.db</span><br><span class="line"><span class="comment">#进入juming-nginx卷内</span></span><br><span class="line">[root@192 volumes]<span class="comment"># cd juming-nginx</span></span><br><span class="line">[root@192 juming-nginx]<span class="comment"># ls</span></span><br><span class="line">_data</span><br><span class="line">[root@192 juming-nginx]<span class="comment"># cd _data</span></span><br><span class="line">[root@192 _data]<span class="comment"># ls</span></span><br><span class="line">conf.d          mime.types  nginx.conf   uwsgi_params</span><br><span class="line">fastcgi_params  modules     scgi_params</span><br><span class="line">[root@192 _data]<span class="comment"># cat nginx.conf</span></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷,没有指定目录的情况下都是在/var/lib/docker/volumes/卷名/_data</p><p>我们通过具名挂载可以方便的找到一个卷,大多数情况在使用的’具名挂载’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何确定是具名挂载还是匿名挂载,还是指定路径挂载</span></span><br><span class="line">-v 容器内路径 <span class="comment">#匿名挂载</span></span><br><span class="line">-v 卷名:容器内路径 <span class="comment">#具名挂载</span></span><br><span class="line">-v 宿主机路径 : 容器内路径 <span class="comment">#指定路径挂载</span></span><br></pre></td></tr></table></figure><p><strong>扩展:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过 -v  容器内路径: ro rw 改变读写权限</span></span><br><span class="line">ro <span class="built_in">read</span> only</span><br><span class="line"><span class="built_in">read</span> and write</span><br><span class="line"></span><br><span class="line"><span class="comment">#一旦设置了容器权限,容器对挂载出来的内容就有限定了!</span></span><br><span class="line">docker -run -P -name nginx01 -v /etc/nginx:ro nginx</span><br><span class="line">docker -run -P -name nginx01 -v /etc/nginx:rw nginx</span><br><span class="line">ro : 只要看到ro就说明这个路径只能通过宿主机来改变,容器内部无法操作</span><br></pre></td></tr></table></figure><h1 id="7-Dockerfile"><a href="#7-Dockerfile" class="headerlink" title="7.Dockerfile"></a>7.Dockerfile</h1><p>大家想想，Nginx，tomcat，mysql 这些镜像都是哪里来的？官方能写，我们不能写吗？ </p><p>我们要研究自己如何做一个镜像，而且我们写的微服务项目以及springboot打包上云部署，Docker就是 最方便的。</p><p> 微服务打包成镜像，任何装了Docker的地方，都可以下载使用，极其的方便。</p><p> 流程：开发应用=&gt;DockerFile=&gt;打包为镜像=&gt;上传到仓库（私有仓库，公有仓库）=&gt; 下载镜像 =&gt; 启动 运行。 </p><p>还可以方便移植！</p><h2 id="初始DockerFile"><a href="#初始DockerFile" class="headerlink" title="初始DockerFile"></a>初始DockerFile</h2><p>Dockerfile就是用来构建Dockerfile镜像的文件! 命令脚本!</p><p>构建步骤：</p><ul><li>1、编写DockerFile文件</li><li>2、docker build 构建镜像 </li><li>3、docker run dockerfile文件我们刚才已经编写过了一次，这里我们继续使用 centos 来看！</li></ul><blockquote><p>方式二：构建Dockerfile镜像的文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个dockerfile文件,名字可以随机 建议 dockerfile1</span></span><br><span class="line"><span class="comment"># 文件中的内容</span></span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">"volume01"</span>,<span class="string">"volume02"</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">"---end---"</span></span><br><span class="line">CMD /bin/<span class="built_in">hash</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">[root@192 docker-test-volume]<span class="comment"># docker build -f /home/docker-test-volume/dockerfile1 -t zhuxiaopeng/centos:1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 300e315adb2f</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">"volume01"</span>,<span class="string">"volume02"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> af4e9c6e304b</span><br><span class="line">Removing intermediate container af4e9c6e304b</span><br><span class="line"> ---&gt; 397719247d47</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">"---end---"</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> df328b5b0425</span><br><span class="line">Removing intermediate container df328b5b0425</span><br><span class="line"> ---&gt; 56b3af086372</span><br><span class="line">Step 4/4 : CMD /bin/<span class="built_in">hash</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> effe5e4a78c1</span><br><span class="line">Removing intermediate container effe5e4a78c1</span><br><span class="line"> ---&gt; 90dbaef5253a</span><br><span class="line">Successfully built 90dbaef5253a</span><br><span class="line">Successfully tagged zhuxiaopeng/centos:1.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看镜像文件（发现刚刚创建的 zhuxiaopeng/centos ）</span></span><br><span class="line">[root@192 docker-test-volume]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">zhuxiaopeng/centos    1.0       90dbaef5253a   About a minute ago   209MB</span><br><span class="line">tomcat02              2.1       e06f510955ba   23 hours ago         670MB</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入自己写的镜像文件</span></span><br><span class="line">[root@192 docker-test-volume]<span class="comment"># docker run -it 90dbaef5253a /bin/bash</span></span><br><span class="line"></span><br><span class="line">[root@5ccdbc015f9f /]<span class="comment"># ls -l</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root 360 Jul 30 01:50 dev</span><br><span class="line">drwxr-xr-x   1 root root  66 Jul 30 01:50 etc</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root   6 Dec  4  2020 lost+found</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 290 root root   0 Jul 30 01:50 proc</span><br><span class="line">dr-xr-x---   2 root root 162 Dec  4  2020 root</span><br><span class="line">drwxr-xr-x  11 root root 163 Dec  4  2020 run</span><br><span class="line">lrwxrwxrwx   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root   0 Jul 30 01:50 sys</span><br><span class="line">drwxrwxrwt   7 root root 145 Dec  4  2020 tmp</span><br><span class="line">drwxr-xr-x  12 root root 144 Dec  4  2020 usr</span><br><span class="line">drwxr-xr-x  20 root root 262 Dec  4  2020 var</span><br><span class="line">drwxr-xr-x   2 root root   6 Jul 30 01:50 volume01</span><br><span class="line">drwxr-xr-x   2 root root   6 Jul 30 01:50 volume02</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个目录就是我们生成镜像的时候自动挂载的，数据卷目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在该卷内生成一个文件，通过外部进行查看是否同步</span></span><br><span class="line">[root@5ccdbc015f9f /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@5ccdbc015f9f volume01]<span class="comment"># touch container.txt</span></span><br><span class="line">[root@5ccdbc015f9f volume01]<span class="comment"># ls</span></span><br><span class="line">container.txt</span><br></pre></td></tr></table></figure><p>这个卷和外部一定有一个同步的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看一下挂载路径</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker inspect 5ccdbc015f9f</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730100010759.png" alt="image-20210730100010759"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># cd /var/lib/docker/volumes/9bfcf16d10087bbe08dc573d135a2e75cad232b9816813bbf00bb2258cdb115f/_data</span></span><br><span class="line">[root@192 _data]<span class="comment"># ls</span></span><br><span class="line">container.txt</span><br></pre></td></tr></table></figure><p>测试一下刚才的文件是否同步出去了</p><p>这种方式我们未来使用的十分多,因为我们通常会构建自己的镜像!</p><p>假设构建镜像时没有挂载卷,要手动镜像挂载 -v 卷名: 容器内路径</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a><strong>数据卷容器</strong></h2><p>两个Mysql同步数据!</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730184222649.png" alt="image-20210730184222649"></p><p><strong>容器1</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建一个容器</span></span><br><span class="line">docker run -it --name docker01 90dbaef5253a /bin/bash</span><br><span class="line"><span class="comment">#进入docker01容器</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker exec -it docker01 /bin/bash</span></span><br><span class="line">[root@7ae0bf32a9e6 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02</span><br><span class="line"><span class="comment">#进入到volume01内创建一个文件夹docker01</span></span><br><span class="line">[root@7ae0bf32a9e6 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@7ae0bf32a9e6 volume01]<span class="comment"># ls</span></span><br><span class="line">[root@7ae0bf32a9e6 volume01]<span class="comment"># mkdir docker01</span></span><br><span class="line">[root@7ae0bf32a9e6 volume01]<span class="comment"># ls</span></span><br><span class="line">docker01</span><br></pre></td></tr></table></figure><p><strong>容器2（<code>--volumes-from</code>）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建一个容器docker02并与docker01进行挂载</span></span><br><span class="line">docker run -it --name docker02 --volumes-from docker01 90dbaef5253a /bin/bash</span><br><span class="line"><span class="comment">#进入docker02容器</span></span><br><span class="line">root@192 home]<span class="comment"># docker exec -it docker02 /bin/bash</span></span><br><span class="line">[root@d0e42082c423 /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var   volume02</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr  volume01</span><br><span class="line"><span class="comment">#进入volume01内进行查看</span></span><br><span class="line">[root@d0e42082c423 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@d0e42082c423 volume01]<span class="comment"># ls</span></span><br><span class="line">docker01</span><br></pre></td></tr></table></figure><p><strong>容器3（<code>--volumes-from</code>）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#再新建一个容器docker03与docker01进行挂载</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker run -it --name docker03 --volumes-from docker01 90dbaef5253a /bin/bash</span></span><br><span class="line">[root@1a04b5e427d3 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@1a04b5e427d3 volume01]<span class="comment"># ls</span></span><br><span class="line">docker01</span><br><span class="line"></span><br><span class="line"><span class="comment">#在docker03容器里创建一个文件夹，从容器1里面进行查看</span></span><br><span class="line">[root@1a04b5e427d3 volume01]<span class="comment"># mkdir docker03</span></span><br><span class="line"><span class="comment">#去容器docker01内进行查看</span></span><br><span class="line">[root@d0e42082c423 volume01]<span class="comment"># docker exec -it docker01 /bin/bash</span></span><br><span class="line">bash: docker: <span class="built_in">command</span> not found</span><br><span class="line">[root@d0e42082c423 volume01]<span class="comment"># read escape sequence</span></span><br><span class="line">[root@192 home]<span class="comment"># docker exec -it docker01 /bin/bash</span></span><br><span class="line">[root@7ae0bf32a9e6 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@7ae0bf32a9e6 volume01]<span class="comment"># ls</span></span><br><span class="line">docker01  docker03</span><br><span class="line"></span><br><span class="line"><span class="comment">#发现文件成功同步过来</span></span><br></pre></td></tr></table></figure><p><strong>删除一个容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除docker01</span></span><br><span class="line">[root@192 home]<span class="comment"># docker rm -f docker01</span></span><br><span class="line">docker01</span><br><span class="line"></span><br><span class="line"><span class="comment">#在docker03下查看</span></span><br><span class="line">[root@1a04b5e427d3 volume01]<span class="comment"># ls</span></span><br><span class="line">docker01  docker03</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker01文件夹依旧存在</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730204107880.png" alt="image-20210730204107880"></p><p><strong>结论:</strong></p><p>容器之间配置信息的传递,数据卷容器的生命周期一直持续到没有人使用为止</p><p>但是一旦你持久化到了本地,这个时候,本地的数据是不会删除的</p><p><strong>多个mysql实现数据共享</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库1</span></span><br><span class="line">docker run  -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:8.0</span><br><span class="line"><span class="comment">#数据库2（将1挂载到2上）</span></span><br><span class="line">docker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD=root --name mysql02 --volumes-from mysql01 mysql:8.0</span><br><span class="line"><span class="comment">#两个数据库之间可以实现数据同步</span></span><br></pre></td></tr></table></figure><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>DockerFile是用来构建docker镜像的文件!命令参数脚本!</p><p>构建步骤:</p><ol><li>编写一个dockerfile脚本</li><li>docker build 构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push发布镜像(Docker hub , 阿里云镜像仓库! )</li></ol><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730205523610.png" alt="image-20210730205523610"></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730205549711.png" alt="image-20210730205549711"></p><p>很多官方镜像都是基础包, 很多功能没有,我们通常会自己搭建自己的镜像!</p><p>官方可以制作镜像,那么我们也可以!</p><h2 id="Dockerfile构建过程"><a href="#Dockerfile构建过程" class="headerlink" title="Dockerfile构建过程"></a>Dockerfile构建过程</h2><p>指令:</p><ol><li>每个保留关键字(指令)都是必须要大写</li><li>执行从上到下顺序执行</li><li>‘#’ 表示注释</li><li>每一个指令都会创建提交一个新的镜像层,并提交 !</li></ol><p>流程： </p><p>1、docker从基础镜像运行一个容器 </p><p>2、执行一条指令并对容器做出修改 </p><p>3、执行类似 docker commit 的操作提交一个新的镜像层 </p><p>4、Docker再基于刚提交的镜像运行一个新容器 </p><p>5、执行dockerfile中的下一条指令直到所有指令都执行完成！</p><p>说明： </p><p>从应用软件的角度来看，DockerFile，docker镜像与docker容器分别代表软件的三个不同阶段。</p><ul><li>DockerFile 是软件的原材料 （代码） </li><li>Docker 镜像则是软件的交付品 （.apk） </li><li>Docker 容器则是软件的运行状态 （客户下载安装执行） </li></ul><p>DockerFile 面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730210304730.png" alt="image-20210730210304730"></p><ul><li><p><strong>DockerFile：</strong>需要定义一个DockerFile，DockerFile定义了进程需要的一切东西。DockerFile涉及的内容 包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进 程和内核进程（当引用进行需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace的权 限控制）等等。 </p></li><li><p><strong>Docker镜像：</strong>在DockerFile 定义了一个文件之后，Docker build 时会产生一个Docker镜像，当运行 Docker 镜像时，会真正开始提供服务； </p></li><li><strong>Docker容器：</strong>容器是直接提供服务的。</li></ul><h2 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h2><p>关键字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM <span class="comment"># 基础镜像，当前新镜像是基于哪个镜像的</span></span><br><span class="line">MAINTAINER <span class="comment"># 镜像维护者的姓名混合邮箱地址</span></span><br><span class="line">RUN <span class="comment"># 容器构建时需要运行的命令</span></span><br><span class="line">EXPOSE <span class="comment"># 当前容器对外保留出的端口</span></span><br><span class="line">WORKDIR <span class="comment"># 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span></span><br><span class="line">ENV <span class="comment"># 用来在构建镜像过程中设置环境变量</span></span><br><span class="line">ADD <span class="comment"># 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span></span><br><span class="line">COPY <span class="comment"># 类似ADD，拷贝文件和目录到镜像中！</span></span><br><span class="line">VOLUME <span class="comment"># 容器数据卷，用于数据保存和持久化工作</span></span><br><span class="line">CMD <span class="comment"># 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最</span></span><br><span class="line">后一个生效！</span><br><span class="line">ENTRYPOINT <span class="comment"># 指定一个容器启动时要运行的命令！和CMD一样</span></span><br><span class="line">ONBUILD <span class="comment"># 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730210754975.png" alt="image-20210730210754975"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM <span class="comment"># 基础镜像, 一切从这里开始构建</span></span><br><span class="line">MANTAINER <span class="comment"># 镜像是谁写的, 姓名+邮箱</span></span><br><span class="line">RUN <span class="comment">#镜像构建的时候需要运行的命令</span></span><br><span class="line">ADD <span class="comment"># 步骤, tomcat镜像,压缩包! 添加内容</span></span><br><span class="line">WORKDIR <span class="comment"># 镜像的工作目录</span></span><br><span class="line">VOLUME <span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOSE <span class="comment"># 暴露端口配置</span></span><br><span class="line">RUN <span class="comment">#运行</span></span><br><span class="line">CMD <span class="comment"># 指定这个容器启动的时候要运行的命令,只有最后一个会生效,可被替代</span></span><br><span class="line">ENTRYPOINT <span class="comment"># 指定这个容器启动的时候要运行的命令,可以追加命令</span></span><br><span class="line">ONBUILD <span class="comment"># 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令,触发指令</span></span><br><span class="line">COPY<span class="comment">#类似ADD,将我们文件拷贝到镜像中</span></span><br><span class="line">ENV <span class="comment"># 构建的时候设置环境变量!</span></span><br></pre></td></tr></table></figure><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub 中99%镜像都是从centos基础镜像过来的,然后配置需要的软件</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210730214113564.png" alt="image-20210730214113564"></p><h3 id="DIY-centos"><a href="#DIY-centos" class="headerlink" title="DIY centos"></a>DIY centos</h3><blockquote><p>创建一个自己的centos</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编写DockerFile文件</span></span><br><span class="line">[root@192 eternal]<span class="comment"># cd /home</span></span><br><span class="line">[root@192 home]<span class="comment"># ls</span></span><br><span class="line">docker-test-volume  eternal  mysql  springboot  www</span><br><span class="line">[root@192 home]<span class="comment"># mkdir dockerFile</span></span><br><span class="line">[root@192 home]<span class="comment"># cd dockerFile</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># ls</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># vim mydockerfile</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># cat mydockerfile</span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER zxp-1728456478@qq.com</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">"----end----"</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行dockerfile文件</span></span><br><span class="line"><span class="comment"># 命令 docker build -f dockerfile文件路径 -t</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker build -f mydockerfile -t mycentos:0.1 .</span></span><br><span class="line">Successfully built abc6c8eefcc4</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试运行</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -it mycentos:0.1</span></span><br><span class="line">[root@ee05a8ea74dc <span class="built_in">local</span>]<span class="comment"># pwd#进入工作目录（我们自己编写的）</span></span><br><span class="line">/usr/<span class="built_in">local</span></span><br><span class="line">[root@ee05a8ea74dc <span class="built_in">local</span>]<span class="comment"># ifconfig#命令可以使用了（官方下载的centos里面不可以使用）</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h3 id="进程创建过程"><a href="#进程创建过程" class="headerlink" title="进程创建过程"></a>进程创建过程</h3><p><strong>可以列出本地进程的历史</strong>（我们平时拿到一个镜像,可以研究一下它是怎么做的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看mycentos构建的过程</span></span><br><span class="line">[root@ee05a8ea74dc <span class="built_in">local</span>]<span class="comment"># [root@192 dockerFile]# docker history mycentos:0.1</span></span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">abc6c8eefcc4   5 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        </span></span><br><span class="line">5d18f0c78c0d   5 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span></span><br><span class="line">a0aec60dea3e   5 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span></span><br><span class="line">da506ef06e4b   5 minutes ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 80                    0B        </span></span><br><span class="line">dd1886860ac4   5 minutes ago   /bin/sh -c yum -y install net-tools             27.8MB    </span><br><span class="line">e43edcfea773   6 minutes ago   /bin/sh -c yum -y install vim                   65.2MB    </span><br><span class="line">259b32ba10ee   6 minutes ago   /bin/sh -c <span class="comment">#(nop) WORKDIR /usr/local            0B        </span></span><br><span class="line">809bc8b60181   6 minutes ago   /bin/sh -c <span class="comment">#(nop)  ENV MYPATH=/usr/local        0B        </span></span><br><span class="line">b8b304c7e510   6 minutes ago   /bin/sh -c <span class="comment">#(nop)  MAINTAINER zxp-1728456478…   0B        </span></span><br><span class="line">300e315adb2f   7 months ago    /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/bash"]            0B        </span></span><br><span class="line">&lt;missing&gt;      7 months ago    /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B        </span></span><br><span class="line">&lt;missing&gt;      7 months ago    /bin/sh -c <span class="comment">#(nop) ADD file:bd7a2aed6ede423b7…   209MB     </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看mysql构建的过程</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker history mysql:8.0</span></span><br><span class="line">IMAGE          CREATED      CREATED BY                                      SIZE      COMMENT</span><br><span class="line">c60d96bd2b77   8 days ago   /bin/sh -c <span class="comment">#(nop)  CMD ["mysqld"]               0B        </span></span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 3306 33060            0B        </span></span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="comment">#(nop)  ENTRYPOINT ["docker-entry…   0B        </span></span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c ln -s usr/<span class="built_in">local</span>/bin/docker-entryp…   34B       </span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="comment">#(nop) COPY file:345a22fe55d3e678…   14.5kB    </span></span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="comment">#(nop) COPY dir:2e040acc386ebd23b…   1.12kB    </span></span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="comment">#(nop)  VOLUME [/var/lib/mysql]      0B        </span></span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c &#123;   <span class="built_in">echo</span> mysql-community-server m…   378MB     </span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="built_in">echo</span> <span class="string">'deb http://repo.mysql.com/a…   55B       </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c #(nop)  ENV MYSQL_VERSION=8.0.26-…   0B        </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c #(nop)  ENV MYSQL_MAJOR=8.0          0B        </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c set -ex;  key='</span>A4A9406876FCBD3C45…   1.84kB    </span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c apt-get update &amp;&amp; apt-get install…   52.2MB    </span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c mkdir /docker-entrypoint-initdb.d    0B        </span><br><span class="line">&lt;missing&gt;      8 days ago   /bin/sh -c <span class="built_in">set</span> -eux;  savedAptMark=<span class="string">"<span class="variable">$(apt-ma…   4.17MB    </span></span></span><br><span class="line"><span class="string"><span class="variable">&lt;missing&gt;      8 days ago   /bin/sh -c #(nop)</span>  ENV GOSU_VERSION=1.12        0B        </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c apt-get update &amp;&amp; apt-get install…   9.34MB    </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c groupadd -r mysql &amp;&amp; useradd -r -…   329kB     </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c #(nop)  CMD ["</span>bash<span class="string">"]                 0B        </span></span><br><span class="line"><span class="string">&lt;missing&gt;      8 days ago   /bin/sh -c #(nop) ADD file:45f5dfa135c848a34…   69.3MB    </span></span><br><span class="line"><span class="string">[root@192 dockerFile]#</span></span><br></pre></td></tr></table></figure><h3 id="CMD-和ENTRYPOINT"><a href="#CMD-和ENTRYPOINT" class="headerlink" title="CMD 和ENTRYPOINT"></a>CMD 和ENTRYPOINT</h3><blockquote><p>CMD 和ENTRYPOINT 的区别</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="comment"># 指定这个容器启动的时候要运行的命令,只有最后一个会生效,可被替代</span></span><br><span class="line">ENTRYPOINT <span class="comment"># 指定这个容器启动的时候要运行的命令,可以追加命令</span></span><br></pre></td></tr></table></figure><p>测试cmd命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># cat dockerfile-cmd-test</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD [<span class="string">"ls"</span>,<span class="string">"-a"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># vim dockerfile-cmd-test</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker build -f dockerfile-cmd-test -t cdmtest .</span></span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"> ---&gt; 300e315adb2f</span><br><span class="line">Step 2/2 : CMD [<span class="string">"ls"</span>,<span class="string">"-a"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 96180005c50b</span><br><span class="line">Removing intermediate container 96180005c50b</span><br><span class="line"> ---&gt; 43dafe2ff8d4</span><br><span class="line">Successfully built 43dafe2ff8d4</span><br><span class="line">Successfully tagged cdmtest:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># run 运行</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run 43dafe2ff8d4</span></span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行ls命令正常</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run 43dafe2ff8d4 ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行 -l 命令失败</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run 43dafe2ff8d4 -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: <span class="built_in">exec</span>: <span class="string">"-l"</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span>: unknown.</span><br><span class="line"></span><br><span class="line"><span class="comment">#追加命令   追加一个命令 -l  </span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run 43dafe2ff8d4 ls -l</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root 340 Jul 31 01:21 dev</span><br><span class="line">drwxr-xr-x   1 root root  66 Jul 31 01:21 etc</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root   6 Dec  4  2020 lost+found</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 285 root root   0 Jul 31 01:21 proc</span><br><span class="line">dr-xr-x---   2 root root 162 Dec  4  2020 root</span><br><span class="line">drwxr-xr-x  11 root root 163 Dec  4  2020 run</span><br><span class="line">lrwxrwxrwx   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root   0 Jul 30 01:51 sys</span><br><span class="line">drwxrwxrwt   7 root root 145 Dec  4  2020 tmp</span><br><span class="line">drwxr-xr-x  12 root root 144 Dec  4  2020 usr</span><br><span class="line">drwxr-xr-x  20 root root 262 Dec  4  2020 var</span><br><span class="line">[root@192 dockerFile]<span class="comment"># </span></span><br><span class="line"><span class="comment"># cmd的情况下 替换了CMD["ls","-a"]命令,-不是命令追加</span></span><br><span class="line"></span><br><span class="line">ENTRYPOINT是往命令之后追加</span><br></pre></td></tr></table></figure><p>测试ENTRYPOINT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># vim dockerfile-entrypoint-test </span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [<span class="string">"ls"</span>,<span class="string">"-a"</span>]</span><br><span class="line"></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker build -f dockerfile-entrypoint-test -t entrypoint-test .</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接运行 -l命令</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run df3e6903aebf -l</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x   1 root root   6 Jul 31 01:30 .</span><br><span class="line">drwxr-xr-x   1 root root   6 Jul 31 01:30 ..</span><br><span class="line">-rwxr-xr-x   1 root root   0 Jul 31 01:30 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root 340 Jul 31 01:30 dev</span><br><span class="line">drwxr-xr-x   1 root root  66 Jul 31 01:30 etc</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root   6 Dec  4  2020 lost+found</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 284 root root   0 Jul 31 01:30 proc</span><br><span class="line">dr-xr-x---   2 root root 162 Dec  4  2020 root</span><br><span class="line">drwxr-xr-x  11 root root 163 Dec  4  2020 run</span><br><span class="line">lrwxrwxrwx   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root   0 Jul 30 01:51 sys</span><br><span class="line">drwxrwxrwt   7 root root 145 Dec  4  2020 tmp</span><br><span class="line">drwxr-xr-x  12 root root 144 Dec  4  2020 usr</span><br><span class="line">drwxr-xr-x  20 root root 262 Dec  4  2020 var</span><br><span class="line"></span><br><span class="line">这个是直接追加的，不是替换</span><br></pre></td></tr></table></figure><h3 id="Tomcat镜像"><a href="#Tomcat镜像" class="headerlink" title="Tomcat镜像"></a>Tomcat镜像</h3><ul><li>准备镜像文件. tomcat压缩包, jdk压缩包!</li><li>去官网下载，复制到指定目录下</li><li>编写Dockerfile文件, 官方命名 Dockerfile, build会自动寻找这个文件,就不需要 -f 指定了!</li></ul><blockquote><p>编写Dockerfile文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># vim dockerfile-tomcat-test</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER zxp&lt;1728456478@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/<span class="built_in">local</span>/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u301-linux-x64.tar.gz /usr/<span class="built_in">local</span></span><br><span class="line">ADD apache-tomcat-8.0.50.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_301</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.50</span><br><span class="line">ENV CATALINA_BASH /usr/<span class="built_in">local</span>/apache-tomcat-9.0.50</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.50/bin/startup.sh &amp;&amp; tail -F /url/<span class="built_in">local</span>/apache-tomcat-9.0.50/bin/logs/cataline.out</span><br><span class="line"></span><br><span class="line"><span class="comment">#所需要的jdk和tomcat放在了dockerFile目录下（可放在除根目录以外的文件夹）</span></span><br></pre></td></tr></table></figure><p>出现的问题：</p><p>采用 ADD 将主机的文件拷贝到要构建的docker镜像的时候，报错：</p><p><code>file not found in build context or excluded by .dockerignore</code></p><p><strong>原因</strong><br>dockerfile 不能获取 父目录</p><p><strong>方案：</strong></p><ul><li>将dockerfile放到父目录</li><li>将文件copy到当前目录</li></ul><blockquote><p>构建镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># docker build -f dockerfile-tomcat-test -t diytomcat .</span></span><br><span class="line">Sending build context to Docker daemon    157MB</span><br><span class="line">Step 1/15 : FROM centos</span><br><span class="line"> ---&gt; 300e315adb2f</span><br><span class="line">Step 2/15 : MAINTAINER zxp&lt;1728456478@qq.com&gt;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; cd9f84267fa5</span><br><span class="line">Step 3/15 : COPY readme.txt /usr/<span class="built_in">local</span>/readme.txt</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 259e2e8766c1</span><br><span class="line">Step 4/15 : ADD jdk-8u301-linux-x64.tar.gz /usr/<span class="built_in">local</span></span><br><span class="line"> ---&gt; 18d8353bea3a</span><br><span class="line">Step 5/15 : ADD apache-tomcat-9.0.50.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"> ---&gt; 93660fe5065f</span><br><span class="line">Step 6/15 : RUN yum -y install vim</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 349ca61292c5</span><br><span class="line">CentOS Linux 8 - AppStream                      2.5 MB/s | 8.3 MB     00:03    </span><br><span class="line">CentOS Linux 8 - BaseOS                         2.8 MB/s | 4.5 MB     00:01    </span><br><span class="line">CentOS Linux 8 - Extras                          16 kB/s | 9.8 kB     00:00    </span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim-enhanced        x86_64      2:8.0.1763-15.el8         appstream      1.4 M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k</span><br><span class="line"> vim-common          x86_64      2:8.0.1763-15.el8         appstream      6.3 M</span><br><span class="line"> vim-filesystem      noarch      2:8.0.1763-15.el8         appstream       48 k</span><br><span class="line"> <span class="built_in">which</span>               x86_64      2.21-12.el8               baseos          49 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  5 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 7.8 M</span><br><span class="line">Installed size: 30 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/5): gpm-libs-1.20.7-17.el8.x86_64.rpm        346 kB/s |  39 kB     00:00    </span><br><span class="line">(2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 573 kB/s |  48 kB     00:00    </span><br><span class="line">(3/5): <span class="built_in">which</span>-2.21-12.el8.x86_64.rpm             130 kB/s |  49 kB     00:00    </span><br><span class="line">(4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  1.3 MB/s | 1.4 MB     00:01    </span><br><span class="line">(5/5): vim-common-8.0.1763-15.el8.x86_64.rpm    5.0 MB/s | 6.3 MB     00:01    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           3.3 MB/s | 7.8 MB     00:02     </span><br><span class="line">warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">CentOS Linux 8 - AppStream                      1.6 MB/s | 1.6 kB     00:00    </span><br><span class="line">Importing GPG key 0x8483C65D:</span><br><span class="line"> Userid     : <span class="string">"CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;"</span></span><br><span class="line"> Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : <span class="built_in">which</span>-2.21-12.el8.x86_64                               1/5 </span><br><span class="line">  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5 </span><br><span class="line">  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5 </span><br><span class="line">  Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4/5 </span><br><span class="line">  Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4/5 </span><br><span class="line">  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5 </span><br><span class="line">  Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1/5 </span><br><span class="line">  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5 </span><br><span class="line">  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5 </span><br><span class="line">  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5 </span><br><span class="line">  Verifying        : <span class="built_in">which</span>-2.21-12.el8.x86_64                               5/5 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    </span><br><span class="line">  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span><br><span class="line">  <span class="built_in">which</span>-2.21-12.el8.x86_64             </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 349ca61292c5</span><br><span class="line"> ---&gt; 11151a33bf3d</span><br><span class="line">Step 7/15 : ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d483e3ffe1b4</span><br><span class="line">Removing intermediate container d483e3ffe1b4</span><br><span class="line"> ---&gt; 6788abe51c15</span><br><span class="line">Step 8/15 : WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 918669437fa1</span><br><span class="line">Removing intermediate container 918669437fa1</span><br><span class="line"> ---&gt; 0f8405234184</span><br><span class="line">Step 9/15 : ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_301</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 302e45a16a54</span><br><span class="line">Removing intermediate container 302e45a16a54</span><br><span class="line"> ---&gt; 756d0aef6c72</span><br><span class="line">Step 10/15 : ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 253b5c414fc2</span><br><span class="line">Removing intermediate container 253b5c414fc2</span><br><span class="line"> ---&gt; cb54e5e6d926</span><br><span class="line">Step 11/15 : ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.50</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> f6e969f01dd5</span><br><span class="line">Removing intermediate container f6e969f01dd5</span><br><span class="line"> ---&gt; 924c802ef19c</span><br><span class="line">Step 12/15 : ENV CATALINA_BASH /usr/<span class="built_in">local</span>/apache-tomcat-9.0.50</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c145ba688632</span><br><span class="line">Removing intermediate container c145ba688632</span><br><span class="line"> ---&gt; 8e41fc1ad24f</span><br><span class="line">Step 13/15 : ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 60273206b7e2</span><br><span class="line">Removing intermediate container 60273206b7e2</span><br><span class="line"> ---&gt; 8ffff2b8dd86</span><br><span class="line">Step 14/15 : EXPOSE 8080</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 13a397feb304</span><br><span class="line">Removing intermediate container 13a397feb304</span><br><span class="line"> ---&gt; c777225473f2</span><br><span class="line">Step 15/15 : CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.50/bin/startup.sh &amp;&amp; tail -F /url/<span class="built_in">local</span>/apache-tomcat-9.0.50/bin/logs/cataline.out</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> e7ab98389a44</span><br><span class="line">Removing intermediate container e7ab98389a44</span><br><span class="line"> ---&gt; 12a14f98db54</span><br><span class="line">Successfully built 12a14f98db54</span><br><span class="line">Successfully tagged diytomcat:latest</span><br></pre></td></tr></table></figure><blockquote><p>运行镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">diytomcat             latest    12a14f98db54   3 hours ago     652MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#将webapps里面的test挂载到根目录下的tomcat中的test</span></span><br><span class="line"><span class="comment">#将日志挂在懂啊根目录下的tomcat中的tomcatlogs</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -p 3344:8080 --name zxpTomcat -v /home/tomcat/test:/url/local/apache-tomcat-9.0.50/webapps/test -v /home/tomcat/tomcatlogs/:/url/local/apache-tomcat-9.0.50/logs diytomcat</span></span><br><span class="line">49ee702e46f19a5b2ab859d734e43fcda5c3347bd1f0619ac465e7212b9a032e</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入容器内</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it zxpTomcat /bin/bash</span></span><br><span class="line">[root@49ee702e46f1 <span class="built_in">local</span>]<span class="comment"># ls -l</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 1 root  root   42 Jul 31 02:58 apache-tomcat-9.0.50</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 bin</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 etc</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 games</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 include</span><br><span class="line">drwxr-xr-x 8 10143 10143 273 Jun  9 13:58 jdk1.8.0_301</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 lib</span><br><span class="line">drwxr-xr-x 3 root  root   17 Dec  4  2020 lib64</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 libexec</span><br><span class="line">-rw-r--r-- 1 root  root    0 Jul 31 02:47 readme.txt</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 sbin</span><br><span class="line">drwxr-xr-x 5 root  root   49 Dec  4  2020 share</span><br><span class="line">drwxr-xr-x 2 root  root    6 Nov  3  2020 src</span><br><span class="line"></span><br><span class="line"><span class="comment">#去挂载地址查看</span></span><br><span class="line">[root@192 tomcat]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">test</span>  tomcatlogs</span><br><span class="line"></span><br><span class="line"><span class="comment">#内外网都可以进行访问</span></span><br><span class="line">[root@192 tomcat]<span class="comment"># curl localhost:3344</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731141835957.png" alt="image-20210731141835957"></p><blockquote><p>发布项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接从主机上进行发布（所挂载的文件夹）</span></span><br><span class="line">root@192 tomcat]<span class="comment"># cd test</span></span><br><span class="line">[root@192 <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">[root@192 <span class="built_in">test</span>]<span class="comment"># vim hello.jsp#（核心，项目文件）</span></span><br><span class="line">[root@192 <span class="built_in">test</span>]<span class="comment"># mkdir WEB-INF</span></span><br><span class="line">root@192 <span class="built_in">test</span>]<span class="comment"># cd WEB-INF</span></span><br><span class="line">[root@192 WEB-INF]<span class="comment"># vim web.xml</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jsp内容</span></span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Docker镜像Tomcat容器项目发布&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(<span class="string">"这是一个jsp文件"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731160147889.png" alt="image-20210731160147889"></p><blockquote><p>查看日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@192 tomcat]<span class="comment"># cd tomcatlogs</span></span><br><span class="line">[root@192 tomcatlogs]<span class="comment"># ls</span></span><br><span class="line">catalina.2021-07-31.log      localhost.2021-07-31.log</span><br><span class="line">catalina.out                 localhost_access_log.2021-07-31.txt</span><br><span class="line">host-manager.2021-07-31.log  manager.2021-07-31.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入日志文件查看</span></span><br><span class="line">31-Jul-2021 06:51:48.889 SEVERE [main] org.apache.catalina.core.StandardContext.startInternal Context [/<span class="built_in">test</span>] startup failed due to previous errors</span><br><span class="line">31-Jul-2021 06:51:48.897 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/<span class="built_in">local</span>/apache-tomcat-9.0.50/webapps/<span class="built_in">test</span>] has finished <span class="keyword">in</span> [39] ms</span><br><span class="line">31-Jul-2021 06:51:48.901 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class="string">"http-nio-8080"</span>]</span><br><span class="line">31-Jul-2021 06:51:48.917 INFO [main] org.apache.catalina.startup.Catalina.start Server startup <span class="keyword">in</span> [961] milliseconds</span><br><span class="line">31-Jul-2021 06:56:08.980 INFO [Catalina-utility-1] org.apache.catalina.startup.HostConfig.reload Reloading context [/<span class="built_in">test</span>]</span><br><span class="line">31-Jul-2021 06:56:18.998 INFO [Catalina-utility-1] org.apache.catalina.startup.HostConfig.reload Reloading context [/<span class="built_in">test</span>]</span><br><span class="line">31-Jul-2021 06:56:18.998 INFO [Catalina-utility-1] org.apache.catalina.core.StandardContext.reload Reloading Context with name [/<span class="built_in">test</span>] has started</span><br><span class="line">31-Jul-2021 06:56:19.014 INFO [Catalina-utility-1] org.apache.catalina.core.StandardContext.reload Reloading Context with name [/<span class="built_in">test</span>] is completed</span><br><span class="line">????jsp??</span><br><span class="line">~</span><br></pre></td></tr></table></figure><h3 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h3><h4 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h4><blockquote><p>提交到DcokerHub</p></blockquote><ol><li>地址hub.docker.com 注册自己的账号!</li><li>确定这个账号可以登录</li><li>在服务器上提交自己的镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看如何登陆docker</span></span><br><span class="line">[root@192 tomcat]<span class="comment"># docker login --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log <span class="keyword">in</span> to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></table></figure><p>4.登陆完成即可提交镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 tomcat]<span class="comment"># docker login -u eternal0918</span></span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>5.发布镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像文件</span></span><br><span class="line">[root@192 tomcat]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">diytomcat             latest    12a14f98db54   5 hours ago     652MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择diytomcat这个镜像，并设置其 名称/版本号</span></span><br><span class="line">[root@192 tomcat]<span class="comment"># docker tag diytomcat eternal0918/tomcat:1.0 </span></span><br><span class="line">[root@192 tomcat]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">eternal0918/tomcat        1.0       12a14f98db54   5 hours ago     652MB</span><br><span class="line">diytomcat             latest    12a14f98db54   5 hours ago     652MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">[root@192 tomcat]<span class="comment"># docker push eternal0918/tomcat:1.0</span></span><br><span class="line">The push refers to repository [docker.io/eternal0918/tomcat]</span><br><span class="line">bf32a4702799: Preparing </span><br><span class="line">b81cc63219ca: Preparing </span><br><span class="line">9ef18089fa80: Preparing </span><br><span class="line">28023573d05f: Preparing </span><br><span class="line">2653d992f4ef: Preparing </span><br><span class="line"></span><br><span class="line"><span class="comment">#一定要是dockerhub的用户名，而不是自己随机起的名字，否则会拒绝请求</span></span><br><span class="line">denied: requested access to the resource is denied</span><br><span class="line"></span><br><span class="line"><span class="comment"># diytomcat 可以用id 后面的就是自己设置的版本号和作者名</span></span><br><span class="line">docker tag diytomcat eternal0918/tomcat:1.0  为容器添加一个版本</span><br><span class="line">docker push eternal0918/tomcat:1.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731200252678.png" alt="image-20210731200252678"></p><h4 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h4><blockquote><p>提交到阿里云镜像仓库</p></blockquote><p>1.登录阿里云</p><p>2.找到容器镜像服务</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731183716503.png" alt="image-20210731183716503"></p><p>3.创建命名空间</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731184059240.png" alt="image-20210731184059240"></p><p>4.创建仓库（本地仓库）</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731184153633.png" alt="image-20210731184153633"></p><p>5.操作指南</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731184334990.png" alt="image-20210731184334990"></p><p>6.发布镜像</p><ol><li>登录阿里云Docker Registry<br><code>$ sudo docker login --username=eternal秋凉 registry.cn-hangzhou.aliyuncs.com</code><br>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</li></ol><p>您可以在访问凭证页面修改凭证密码。</p><ol><li>从Registry中拉取镜像<br><code>$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/eternal-zxp/eternalt-test:[镜像版本号]</code></li><li>将镜像推送到Registry<br><code>$ sudo docker login --username=eternal秋凉 registry.cn-hangzhou.aliyuncs.com</code><br><code>$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/eternal-zxp/eternalt-test:[镜像版本号]</code><br><code>$ sudo docker push registry.cn-hangzhou.aliyuncs.com/eternal-zxp/eternalt-test:[镜像版本号]</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># docker tag c4f190dbcf08 registry.cn-hangzhou.aliyuncs.com/eternal-zxp/eternalt-test:1.0</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker push registry.cn-hangzhou.aliyuncs.com/eternal-zxp/eternalt-test:1.0</span></span><br><span class="line">The push refers to repository [registry.cn-hangzhou.aliyuncs.com/eternal-zxp/eternalt-test]</span><br><span class="line">52754f6530b2: Pushed </span><br><span class="line">992b7b2e692a: Pushed </span><br><span class="line">be12cc774b61: Pushed </span><br><span class="line">7e883d3334b9: Pushed </span><br><span class="line">2653d992f4ef: Pushed </span><br><span class="line">1.0: digest: sha256:70ee5bb534495276b541fa2993206bf8981b4ece54f203a70d845213a6803fed size: 1373</span><br></pre></td></tr></table></figure><p>7.查看镜像</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731193340847.png" alt="image-20210731193340847"></p><h1 id="8-Docker网络"><a href="#8-Docker网络" class="headerlink" title="8.Docker网络"></a>8.Docker网络</h1><h2 id="理解Docker"><a href="#理解Docker" class="headerlink" title="理解Docker"></a>理解Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询网络ip</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># ip addr</span></span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:7d:22:76 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.158.136/24 brd 192.168.158.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1329sec preferred_lft 1329sec</span><br><span class="line">    inet6 fe80::3784:30b0:4035:a581/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:c5:f3:53 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:c5:f3:53 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:5e:62:1a:da brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:5eff:fe62:1ada/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment">#除了自带的几个，没有多余的网卡</span></span><br></pre></td></tr></table></figure><p><strong>lo：</strong>本机回环地址</p><p><strong>ens33：</strong>虚拟机地址（云服务器地址）</p><p><strong>docker0：</strong>docker地址</p><blockquote><p>三个网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 问题：docker时如何处理容器网络访问的？</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -P --name tomcat01 tomcat:9.0.50</span></span><br><span class="line"><span class="comment">#查看容器内的网络地址 ip addr</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat01 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">62: eth0@if63: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux ping 通容器</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># ping 172.17.0.2</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=2.24 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.148 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.049 ms</span><br><span class="line">--- 172.17.0.2 ping statistics ---</span><br><span class="line">14 packets transmitted, 14 received, 0% packet loss, time 13013ms</span><br><span class="line">rtt min/avg/max/mdev = 0.040/0.220/2.243/0.562 ms</span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p>我们每启动一个docker容器,docker就会给docker容器分配一个ip,我们只要安装了docker,就会有一个网卡docker0,桥接模式,使用的技术是veth-pair技术!</p><p><strong>再测试一次</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:7d:22:76 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.158.136/24 brd 192.168.158.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1749sec preferred_lft 1749sec</span><br><span class="line">    inet6 fe80::3784:30b0:4035:a581/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:c5:f3:53 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:c5:f3:53 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:5e:62:1a:da brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:5eff:fe62:1ada/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">63: veth2de3706@if62: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 4e:a1:51:fe:c8:49 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::4ca1:51ff:fefe:c849/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment">#多了一个网卡 63</span></span><br></pre></td></tr></table></figure><p><strong>再开启一个容器，并测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个容器</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -P --name tomcat02 tomcat:9.0.50</span></span><br><span class="line">de8cfaa5d40c5f3a347a23c765f82e613e6b0899d359c1a350e80a2dd15693e6</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次进行测试</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:7d:22:76 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.158.136/24 brd 192.168.158.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1450sec preferred_lft 1450sec</span><br><span class="line">    inet6 fe80::3784:30b0:4035:a581/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:c5:f3:53 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:c5:f3:53 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:5e:62:1a:da brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:5eff:fe62:1ada/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">63: veth2de3706@if62: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 4e:a1:51:fe:c8:49 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::4ca1:51ff:fefe:c849/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">65: vethccc5d6e@if64: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 1e:a8:78:7f:53:98 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::1ca8:78ff:fe7f:5398/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment">#发现又多了一个 65</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat02 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">64: eth0@if65: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><blockquote><p>现象</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 观察现象：</span></span><br><span class="line"><span class="comment"># tomcat --- linux主机 veth2de3706@if62  ---- 容器内 eth0@if63</span></span><br><span class="line"><span class="comment"># tomcat --- linux主机 vethccc5d6e@if64  ---- 容器内 eth0@if65</span></span><br><span class="line"><span class="comment"># 只要启动一个容器，就有一对网卡</span></span><br></pre></td></tr></table></figure><blockquote><p>结论</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># veth-pair 就是一对的虚拟设备接口，它都是成对出现的。一端连着协议栈，一端彼此相连着。</span></span><br><span class="line"><span class="comment"># 正因为有这个特性，它常常充当着一个桥梁，连接着各种虚拟网络设备!</span></span><br><span class="line"><span class="comment"># “Bridge、OVS 之间的连接”，“Docker 容器之间的连接” 等等，以此构建出非常复杂的虚拟网络结构，比如 OpenStack Neutron。</span></span><br></pre></td></tr></table></figure><p>两个容器之间进行ping测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器 tomcat02 ping tomcat01 的地址</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat02 ping 172.17.0.2</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.459 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.053 ms</span><br><span class="line">--- 172.17.0.2 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 6ms</span><br><span class="line">rtt min/avg/max/mdev = 0.051/0.136/0.459/0.161 ms</span><br><span class="line"></span><br><span class="line"><span class="comment">#成功 ping 通</span></span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731211638224.png" alt="image-20210731211638224"></p><p><strong>结论：</strong>tomcat1和tomcat2共用一个路由器，通过路由器进行桥接，并非是二者直连（相当于一个路由器）</p><p>他们使用的一个，就是docker0。任何一个容器启动 默认都是docker0网络。 docker默认会给容器分配一个可用ip</p><p>Docker 使用的是Linux的桥接,宿主机中是一个Docker容器的网桥,docker0</p><blockquote><p>小结</p></blockquote><p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据 Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网 关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接 通信。</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731212402980.png" alt="image-20210731212402980"></p><p>Docker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并 让他们彼此联通（这样一对接口叫veth pair）； </p><p>Docker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中 进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容 器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。</p><p><strong>Docker中所有的网络接口都是虚拟的,虚拟的转发效率高</strong></p><p><strong>只要容器删除,对应网桥的一对就没了</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731214512111.png" alt="image-20210731214512111"></p><h2 id="—link"><a href="#—link" class="headerlink" title="—link"></a>—link</h2><blockquote><p>思考一个场景，我们编写一个微服务，数据库连接地址原来是使用ip的，如果ip变化就不行了，那我们 能不能使用服务名访问呢？ jdbc:mysql://mysql:3306，这样的话哪怕mysql重启，我们也不需要修改配置了！docker提供了 —link 的操作！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tomcat01 ping tomcat02发现失败，不可通过名字进行ping链接</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat01 ping tomcat02</span></span><br><span class="line">ping: tomcat02: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的容器tomcat03 通过 --link 与 tomcat02 进行绑定</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -P --name tomcat03 --link tomcat02 tomcat:9.0.50</span></span><br><span class="line">f11b38d4209e59e7a08b848266536f3b873523898e874fa3affd0b8c1a0b4097</span><br><span class="line"><span class="comment"># tomcat03 ping tomcat02 直接ping通</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.181 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.051 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=4 ttl=64 time=0.056 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat02 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.051/0.084/0.181/0.056 ms</span><br><span class="line"></span><br><span class="line"><span class="comment">#反向ping 却无法ping成功</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat02 ping tomcat03</span></span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure><blockquote><p>探究</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找到桥梁 bridge（docker0与三个容器之间的关系）</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f5d4f5ae9c46   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">c3bd29cd9dcb   host      host      <span class="built_in">local</span></span><br><span class="line">da53b1d644b0   none      null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network inspect f5d4f5ae9c46</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"f5d4f5ae9c46977108934854a7e41560a0181903d4a546193425b82b2bdd965d"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-07-31T10:40:28.611773097+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.17.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.17.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"5ec3db2989cd6f3dfb4590f843d483fd13bd6aa16f6c4194126f9edfd483aa06"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"ac763134d7f921d9a54df9ab5bad1537b12360061a96eb964b228290ec317e16"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"de8cfaa5d40c5f3a347a23c765f82e613e6b0899d359c1a350e80a2dd15693e6"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat02"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"189545c63552241c57a177b81cc5f66f7139c106c5a5adc095d5daea6dec1827"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"f11b38d4209e59e7a08b848266536f3b873523898e874fa3affd0b8c1a0b4097"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat03"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"511d210a2d58eace084a087f3efee93a9a44d037ed9adedfa4dc69decc06f852"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:11:00:04"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.17.0.4/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@192 dockerFile]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731214645372.png" alt="image-20210731214645372"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 tomcat03 的配置</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat03 cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.3tomcat02 de8cfaa5d40c</span><br><span class="line">172.17.0.4f11b38d4209e</span><br><span class="line"></span><br><span class="line"><span class="comment">#里面与tomcat02 写死绑定</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所以这里其实就是配置了一个 hosts 地址而已！</span></span><br><span class="line"><span class="comment"># 原因：--link的时候，直接把需要link的主机的域名和ip直接配置到了hosts文件中了。</span></span><br></pre></td></tr></table></figure><p>本地探究 – link 就是我们在host配置中增加了一个 172.17.0.3    tomcat02 de8cfaa5d40c</p><p>我们现在玩Docker已经不建议使用–link了!</p><p>自定义网络,不使用docker0!</p><p>docker0问题: 它不支持容器名连接访问!</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p>基本命令查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 dockerFile]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f5d4f5ae9c46   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">c3bd29cd9dcb   host      host      <span class="built_in">local</span></span><br><span class="line">da53b1d644b0   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p><strong>网络模式</strong></p><p>bridge : 桥接 docker 大桥</p><p>none: 不配置网络</p><p>host: 和宿主机共享网络</p><p>container: 容器内网络联通!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接启动的命令 --net brodge,默认docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker0的特点: 默认的,域名是不能访问的, --link可以打通连接（不建议使用）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义网络</span></span><br><span class="line">--driver bridge<span class="comment">#自定义模式为桥接</span></span><br><span class="line">--subnet 192.168.0.0/16<span class="comment">#子网</span></span><br><span class="line">--gateway 192.168.0.1 <span class="comment">#网关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义网络</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br><span class="line">16fb0a4680801ef7419ff408e4643e3bb9ba853a5da0343a25ab11c86eb4133c</span><br><span class="line"><span class="comment"># 查看网络</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f5d4f5ae9c46   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">c3bd29cd9dcb   host      host      <span class="built_in">local</span></span><br><span class="line">16fb0a468080   mynet     bridge    <span class="built_in">local</span></span><br><span class="line">da53b1d644b0   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>网络模式</th><th>说明</th><th>配置</th></tr></thead><tbody><tr><td>bridge模 式</td><td>—net=bridge</td><td>默认值，在Docker网桥docker0上为容器创建新的网络 栈</td></tr><tr><td>none模式</td><td>—net=none</td><td>不配置网络，用户可以稍后进入容器，自行配置</td></tr><tr><td>container 模式</td><td>— net=container:name/id</td><td>容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td></tr><tr><td>host模式</td><td>—net=host</td><td>容器和宿主机共享Network namespace</td></tr><tr><td>用户自定 义</td><td>—net=自定义网络</td><td>用户自己使用network相关命令定义网络，创建容器的 时候可以指定为自己定义的网络</td></tr></tbody></table></div> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看自己的网络</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"mynet"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"16fb0a4680801ef7419ff408e4643e3bb9ba853a5da0343a25ab11c86eb4133c"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-07-31T22:06:45.634735004+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 我们自己配置的网络</span></span><br><span class="line"><span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line"><span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span></span><br></pre></td></tr></table></figure><p><strong>创建容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个容器1</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -P --name tomcat-net-01 --net mynet tomcat:9.0.50</span></span><br><span class="line">2eb99835a3e24a4e68dd8f9e15cdafe31187f5d3182b45cf0e7aaaab6a39f912</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个容器2</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -P --name tomcat-net-02 --net mynet tomcat:9.0.50</span></span><br><span class="line">a65a2b150415e4659c7e30ed8613aad601582c37db637fe1ead6f902fac14bfd</span><br><span class="line"></span><br><span class="line"><span class="comment">#再一次进入进行查看，发现多了两个配置</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"mynet"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"16fb0a4680801ef7419ff408e4643e3bb9ba853a5da0343a25ab11c86eb4133c"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-07-31T22:06:45.634735004+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"2eb99835a3e24a4e68dd8f9e15cdafe31187f5d3182b45cf0e7aaaab6a39f912"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat-net-01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"71c4e68884b0fe55917e106aaba06117e084d4a3050568c5b439b21e3b05bdbf"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"a65a2b150415e4659c7e30ed8613aad601582c37db637fe1ead6f902fac14bfd"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat-net-02"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"ce66554ae7e88377409f7e6bab18d99dac181367e362a56b2b30bcc921f189c8"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210731222009571.png" alt="image-20210731222009571"></p><p><strong>测试ping连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发现 ping 成功了，直接通过名称即可实现</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat-net-01 ping tomcat-net-02</span></span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.162 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.055 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=4 ttl=64 time=0.051 ms</span><br><span class="line">--- tomcat-net-02 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 5ms</span><br><span class="line">rtt min/avg/max/mdev = 0.051/0.085/0.162/0.045 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现，我们自定义的网络docker都已经帮我们维护好了对应的关系</span></span><br><span class="line"><span class="comment"># 所以我们平时都可以这样使用网络，不使用--link效果一样，所有东西实时维护好，直接域名 ping通</span></span><br></pre></td></tr></table></figure><p>自定义网络docker已经帮我们维护好了对应的关系，推荐平时这样使用网络</p><p>优点：</p><ul><li>redis：不同的集群使用不同的网络，保证集群是安全和健康的</li><li>mysql：不同的集群使用不同的网络，保证集群时安全和健康的</li></ul><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><blockquote><p>两个网络之间是无法直接连通的：tomcat02 ping tomcat-net01 连接失败</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210801084528978.png" alt="image-20210801084528978"></p><p>docker0和自定义网络肯定不通，我们使用自定义网络的好处就是网络隔离： 大家公司项目部署的业务都非常多，假设我们有一个商城，我们会有订单业务（操作不同数据），会有 订单业务购物车业务（操作不同缓存）。如果在一个网络下，有的程序猿的恶意代码就不能防止了，所 以我们就在部署的时候网络隔离，创建两个桥接网卡，比如订单业务（里面的数据库，redis，mq，全 部业务 都在order-net网络下）其他业务在其他网络。 </p><p>那关键的问题来了，如何让 tomcat-net-01 访问 tomcat02？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试打通 tomcat02 到 tomcat-net-01</span></span><br><span class="line"><span class="comment"># 连通之后就是将 tomcat02 放到了mynet网络下</span></span><br><span class="line"><span class="comment"># 一个容器两个ip   阿里云: 公网ip 私网ip</span></span><br></pre></td></tr></table></figure><p><strong>帮助</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看下network帮助，发现一个命令 connect</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network --help</span></span><br><span class="line">Commands:</span><br><span class="line">connect Connect a container to a network <span class="comment"># 连接一个容器到一个网络</span></span><br><span class="line">create Create a network</span><br><span class="line">disconnect Disconnect a container from a network</span><br><span class="line">inspect Display detailed information on one or more networks</span><br><span class="line">ls List networks</span><br><span class="line">prune Remove all unused networks</span><br><span class="line">rm Remove one or more networks</span><br></pre></td></tr></table></figure><p><strong>操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再创建一个容器（单独于mynet网络）</span></span><br><span class="line"><span class="comment"># docker network connect [OPTIONS] NETWORK CONTAINER</span></span><br><span class="line"></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker run -d -P --name tomcat02 tomcat:9.0.50</span></span><br><span class="line">b8d0b236f9ff4c382e3de6fab9784792897c0621eb2ed9cd2028de93cc2d2911</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二者网络打通</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network connect mynet tomcat02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进去查看一下mynet的配置</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"mynet"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"16fb0a4680801ef7419ff408e4643e3bb9ba853a5da0343a25ab11c86eb4133c"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-07-31T22:06:45.634735004+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"192.168.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"2eb99835a3e24a4e68dd8f9e15cdafe31187f5d3182b45cf0e7aaaab6a39f912"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat-net-01"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"71c4e68884b0fe55917e106aaba06117e084d4a3050568c5b439b21e3b05bdbf"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"a65a2b150415e4659c7e30ed8613aad601582c37db637fe1ead6f902fac14bfd"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat-net-02"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"ce66554ae7e88377409f7e6bab18d99dac181367e362a56b2b30bcc921f189c8"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"b8d0b236f9ff4c382e3de6fab9784792897c0621eb2ed9cd2028de93cc2d2911"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"tomcat02"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"97f144269f2728f3318aedde38332a1fe549eea58b1904a8d38798844856aa9f"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:c0:a8:00:04"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"192.168.0.4/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">#可以看到。下面多了一个容器，添加进去 tomcat02</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tomcat-net-01 ping tomcat02</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat-net-01 ping tomcat02</span></span><br><span class="line">PING tomcat02 (192.168.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.4): icmp_seq=1 ttl=64 time=0.085 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.4): icmp_seq=2 ttl=64 time=0.055 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.4): icmp_seq=3 ttl=64 time=0.050 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.4): icmp_seq=4 ttl=64 time=0.051 ms</span><br><span class="line">--- tomcat02 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 4ms</span><br><span class="line">rtt min/avg/max/mdev = 0.050/0.060/0.085/0.015 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># tomcat02 ping tomcat-net-01</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker exec -it tomcat02 ping tomcat-net-01</span></span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.161 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.051 ms</span><br><span class="line">--- tomcat-net-01 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 5ms</span><br><span class="line">rtt min/avg/max/mdev = 0.051/0.093/0.161/0.048 ms</span><br><span class="line"></span><br><span class="line"><span class="comment">#两者之间可以互相ping命令</span></span><br></pre></td></tr></table></figure><h1 id="9-实战"><a href="#9-实战" class="headerlink" title="9.实战"></a>9.实战</h1><h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><p>分片 + 高可用 + 负载均衡</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210801085335516.png" alt="image-20210801085335516"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个网卡</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network create redis --subnet 172.38.0.0/16</span></span><br><span class="line">142157bc75cc5941cb3d44d8ac0878132884975c355f0bdc8e1555ea650aa3e7</span><br><span class="line">[root@192 dockerFile]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">......</span><br><span class="line">142157bc75cc   redis     bridge    <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过脚本创建6个redis配置</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir -p /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1<span class="variable">$&#123;port&#125;</span></span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建的6个节点</span></span><br><span class="line">[root@192 dockerFile]<span class="comment"># cd /mydata</span></span><br><span class="line">[root@192 mydata]<span class="comment"># ls</span></span><br><span class="line">redis</span><br><span class="line">[root@192 mydata]<span class="comment"># cd redis</span></span><br><span class="line">[root@192 redis]<span class="comment"># ls</span></span><br><span class="line">node-1  node-2  node-3  node-4  node-5  node-6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过脚本运行六个redis</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);\</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">docker run -p 637<span class="variable">$&#123;port&#125;</span>:6379 -p 1637<span class="variable">$&#123;port&#125;</span>:16379 --name redis-<span class="variable">$&#123;port&#125;</span> \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/data:/data \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1<span class="variable">$&#123;port&#125;</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载redis，并开启6个服务</span></span><br><span class="line">Unable to find image <span class="string">'redis:5.0.9-alpine3.11'</span> locally</span><br><span class="line">5.0.9-alpine3.11: Pulling from library/redis</span><br><span class="line">cbdbe7a5bc2a: Pull complete </span><br><span class="line">dc0373118a0d: Pull complete </span><br><span class="line">cfd369fe6256: Pull complete </span><br><span class="line">3e45770272d9: Pull complete </span><br><span class="line">558de8ea3153: Pull complete </span><br><span class="line">a2c652551612: Pull complete </span><br><span class="line">Digest: sha256:83a3af36d5e57f2901b4783c313720e5fa3ecf0424ba86ad9775e06a9a5e35d0</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:5.0.9-alpine3.11</span><br><span class="line">6cc61a64f5e0f840b103117cafbb32bceb128795c6a4e5670720901bb6d466eb</span><br><span class="line">d5fd711d29114df4f7cdaa0bfd8264b869f8d45f42507c4731aed2d5da756e0b</span><br><span class="line">c4fb14ae595714f8512726e57a1a836be9194f497fee048048ab50a315f1ad65</span><br><span class="line">cbb2e3c66827b6d8b17e6ebbe98320b6a0bf8ae5a2f15750f13c1c37dfe0cec4</span><br><span class="line">c8e494d04e589891e7428adca5cee4d8c09e5e29654bc6b6fdacfdcfc8a2aedc</span><br><span class="line">b46d3282e0631418369a18eaeb27d5088bf872bda20d5c2db7c9214c73e65a89</span><br></pre></td></tr></table></figure><p><strong>查看开启的服务</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210801104329851.png" alt="image-20210801104329851"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止redis并删除容器</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);\</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">docker stop redis-<span class="variable">$&#123;port&#125;</span>; \</span><br><span class="line">docker rm redis-<span class="variable">$&#123;port&#125;</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入一个redis， /bin/bash 发现进不去</span></span><br><span class="line">[root@192 conf]<span class="comment"># docker exec -it redis-1 /bin/bash</span></span><br><span class="line">OCI runtime <span class="built_in">exec</span> failed: <span class="built_in">exec</span> failed: container_linux.go:380: starting container process caused: <span class="built_in">exec</span>: <span class="string">"/bin/bash"</span>: <span class="built_in">stat</span> /bin/bash: no such file or directory: unknown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入一个redis， /bin/sh正常进入</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">[root@192 conf]<span class="comment"># docker exec -it redis-1 /bin/sh</span></span><br><span class="line">/data <span class="comment"># redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.</span></span><br><span class="line">15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: 53e909311971cd81cdcfb956fdb0d27e0989bd7d 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 47476b2a95d0a18094711b2e68ad7e42d51b8e8d 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: c032db751bc4b691ea4c09760db3183b80334b80 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 9cb7ed9bb4c334dc62633d6cddcd8814634ecdec 172.38.0.14:6379</span><br><span class="line">   replicates c032db751bc4b691ea4c09760db3183b80334b80</span><br><span class="line">S: 00fc04ad5ed598ce9a1b3c6ba12419920c245da4 172.38.0.15:6379</span><br><span class="line">   replicates 53e909311971cd81cdcfb956fdb0d27e0989bd7d</span><br><span class="line">S: d2a4bb22edca1c5ebb2eb02bfec300b06d6c7fc3 172.38.0.16:6379</span><br><span class="line">   replicates 47476b2a95d0a18094711b2e68ad7e42d51b8e8d</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">'yes'</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line">.....</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span><br><span class="line">M: 53e909311971cd81cdcfb956fdb0d27e0989bd7d 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 47476b2a95d0a18094711b2e68ad7e42d51b8e8d 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 9cb7ed9bb4c334dc62633d6cddcd8814634ecdec 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c032db751bc4b691ea4c09760db3183b80334b80</span><br><span class="line">S: 00fc04ad5ed598ce9a1b3c6ba12419920c245da4 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 53e909311971cd81cdcfb956fdb0d27e0989bd7d</span><br><span class="line">S: d2a4bb22edca1c5ebb2eb02bfec300b06d6c7fc3 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 47476b2a95d0a18094711b2e68ad7e42d51b8e8d</span><br><span class="line">M: c032db751bc4b691ea4c09760db3183b80334b80 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p><strong>进入集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入集群</span></span><br><span class="line">/data <span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:184</span><br><span class="line">cluster_stats_messages_pong_sent:186</span><br><span class="line">cluster_stats_messages_sent:370</span><br><span class="line">cluster_stats_messages_ping_received:181</span><br><span class="line">cluster_stats_messages_pong_received:184</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:370</span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">47476b2a95d0a18094711b2e68ad7e42d51b8e8d 172.38.0.12:6379@16379 master - 0 1627787793259 2 connected 5461-10922</span><br><span class="line">9cb7ed9bb4c334dc62633d6cddcd8814634ecdec 172.38.0.14:6379@16379 slave c032db751bc4b691ea4c09760db3183b80334b80 0 1627787792248 4 connected</span><br><span class="line">53e909311971cd81cdcfb956fdb0d27e0989bd7d 172.38.0.11:6379@16379 myself,master - 0 1627787790000 1 connected 0-5460</span><br><span class="line">00fc04ad5ed598ce9a1b3c6ba12419920c245da4 172.38.0.15:6379@16379 slave 53e909311971cd81cdcfb956fdb0d27e0989bd7d 0 1627787792000 5 connected</span><br><span class="line">d2a4bb22edca1c5ebb2eb02bfec300b06d6c7fc3 172.38.0.16:6379@16379 slave 47476b2a95d0a18094711b2e68ad7e42d51b8e8d 0 1627787792000 6 connected</span><br><span class="line">c032db751bc4b691ea4c09760db3183b80334b80 172.38.0.13:6379@16379 master - 0 1627787793000 3 connected 10923-16383</span><br><span class="line"><span class="comment"># 设一个值进去</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span><br><span class="line">OK</span><br><span class="line">172.38.0.13:6379&gt; get a</span><br><span class="line"><span class="string">"b"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭redis-3容器，关闭一个服务 </span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker stop redis-3</span></span><br><span class="line">redis-3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次进行查看发现在14查询到了</span></span><br><span class="line">/data <span class="comment"># redis-cli -c</span></span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.14:6379</span><br><span class="line"><span class="string">"b"</span></span><br></pre></td></tr></table></figure><p><strong>集群搭建成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line">8.0.14:6379&gt; cluster nodes</span><br><span class="line">9cb7ed9bb4c334dc62633d6cddcd8814634ecdec 172.38.0.14:6379@16379 myself,master - 0 1627788309000 7 connected 10923-16383</span><br><span class="line">53e909311971cd81cdcfb956fdb0d27e0989bd7d 172.38.0.11:6379@16379 master - 0 1627788309000 1 connected 0-5460</span><br><span class="line">c032db751bc4b691ea4c09760db3183b80334b80 172.38.0.13:6379@16379 master,fail - 1627788017568 1627788016000 3 connected</span><br><span class="line">d2a4bb22edca1c5ebb2eb02bfec300b06d6c7fc3 172.38.0.16:6379@16379 slave 47476b2a95d0a18094711b2e68ad7e42d51b8e8d 0 1627788309284 6 connected</span><br><span class="line">00fc04ad5ed598ce9a1b3c6ba12419920c245da4 172.38.0.15:6379@16379 slave 53e909311971cd81cdcfb956fdb0d27e0989bd7d 0 1627788309789 5 connected</span><br><span class="line">47476b2a95d0a18094711b2e68ad7e42d51b8e8d 172.38.0.12:6379@16379 master - 0 1627788310092 2 connected 5461-10922</span><br><span class="line">172.38.0.14:6379&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">#  c032db751bc4b691ea4c09760db3183b80334b80 172.38.0.13:6379@16379 master,fail - 1627788017568 1627788016000 3 connected   故障转移</span></span><br><span class="line"><span class="comment">#  9cb7ed9bb4c334dc62633d6cddcd8814634ecdec 172.38.0.14:6379@16379 myself,master - 0 1627788309000 7 connected 10923-16383转移到 14</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot微服务打包Docker镜像"><a href="#SpringBoot微服务打包Docker镜像" class="headerlink" title="SpringBoot微服务打包Docker镜像"></a>SpringBoot微服务打包Docker镜像</h2><ol><li>构建springBoot项目</li><li>打包应用</li><li>编写dockerfile</li><li>构建镜像</li><li>发布运行</li></ol><blockquote><p>构建项目</p></blockquote><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210801135436745.png" alt="image-20210801135436745"></p><blockquote><p>打包应用</p></blockquote><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210801135515715.png" alt="image-20210801135515715"></p><blockquote><p>编写Dockerfile（名字为这个，之后运行就不必指定Dockerfile文件了，自动运行当前文件夹下的Dockerfile，最好是唯一的一个Dockerfile文件）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"--server.port=8080"</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210801135535959.png" alt="image-20210801135535959"></p><blockquote><p>构建镜像</p></blockquote><p>将jar包和Dockerfile一起上传到linux中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@192 idea]<span class="comment"># cp /home/eternal/Documents/demo-0.0.1-SNAPSHOT.jar /home/idea</span></span><br><span class="line">[root@192 idea]<span class="comment"># ls</span></span><br><span class="line">demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">[root@192 idea]<span class="comment"># cp /home/eternal/Documents/Dockerfile /home/idea</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行Dockerfile文件</span></span><br><span class="line">[root@192 idea]<span class="comment"># docker build -t demo .</span></span><br><span class="line">Sending build context to Docker daemon  17.34MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> java:8</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"> ---&gt; 4e315ff5fafe</span><br><span class="line">Step 3/5 : CMD [<span class="string">"--server.port=8080"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 0f026855b5b7</span><br><span class="line">Removing intermediate container 0f026855b5b7</span><br><span class="line"> ---&gt; d2bc2013ea6e</span><br><span class="line">Step 4/5 : EXPOSE 8080</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> a628214474c1</span><br><span class="line">Removing intermediate container a628214474c1</span><br><span class="line"> ---&gt; 97470c00f558</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> f111095e5a49</span><br><span class="line">Removing intermediate container f111095e5a49</span><br><span class="line"> ---&gt; eb0f1f2d5c40</span><br><span class="line">Successfully built eb0f1f2d5c40</span><br><span class="line">Successfully tagged demo:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看构建好的镜像</span></span><br><span class="line">[root@192 idea]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG                IMAGE ID       CREATED         SIZE</span><br><span class="line">demo         latest             eb0f1f2d5c40   2 minutes ago   661MB</span><br><span class="line">tomcat       9.0.50             46cfbf1293b1   8 days ago      668MB</span><br><span class="line">redis        5.0.9-alpine3.11   3661c84ee9d0   15 months ago   29.8MB</span><br><span class="line">java         8                  d23bdf5b1b1b   4 years ago     643MB</span><br></pre></td></tr></table></figure><blockquote><p>发布运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布镜像 指定端口</span></span><br><span class="line">docker run -d --privileged=<span class="literal">true</span> --restart=always -p 80:8080 --name eternal-springboot-hello demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机端口</span></span><br><span class="line">[root@192 idea]<span class="comment"># docker run -d -P --name eternal-springboot-hello demo</span></span><br><span class="line">ea3c99f97963d47d4aeefa523a7a907b45bbecd5d9527ea28f2d1fba32e2427c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看发布的随机端口 49153</span></span><br><span class="line">[root@192 idea]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                                         NAMES</span><br><span class="line">ea3c99f97963   demo      <span class="string">"java -jar /app.jar …"</span>   About a minute ago   Up About a minute   0.0.0.0:49153-&gt;8080/tcp, :::49153-&gt;8080/tcp   eternal-springboot-hello</span><br></pre></td></tr></table></figure><p>windows下进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210801141120103.png" alt="image-20210801141120103"></p><p>发送请求</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210801141143085.png" alt="image-20210801141143085"></p><h1 id="10-DockerCompose"><a href="#10-DockerCompose" class="headerlink" title="10.DockerCompose"></a>10.DockerCompose</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>Docker </p><p>DockerFile build run 手动操作，单个容器！ </p><p>微服务。100个微服务！依赖关系。 </p><p>Docker Compose 来轻松高效的管理容器。定义运行多个容器。</p><blockquote><p>官方介绍</p></blockquote><p>Compose是一个用于定义和运行多容器Docker应用程序的工具。 使用Compose，您可以使用一个YAML文件来配置应用程序的服务。 然后，通过一个命令，您可以创建并启动配置中的所有服务。  </p><p>Compose适用于所有环境:生产、登台、开发、测试以及CI工作流。 </p><p>使用Compose基本上有三个步骤:  </p><ol><li>用<code>Dockerfile</code>定义你的应用程序环境，这样它就可以在任何地方运行。  </li><li>在<code>docker-compose.yml</code>中定义组成应用程序的服务。 以便它们可以在一个独立的环境中一起运行。  <ul><li>services 什么是服务</li><li>docker-compose.yml 这个文件怎么写！</li></ul></li><li>运行<code>docker compose up</code>, docker compose命令会启动并运行整个应用程序。你也可以使用docker-compose二进制文件运行<code>docker-compose up</code>。<ul><li>启动项目</li></ul></li></ol><p>作用：批量容器编排</p><blockquote><p>理解</p></blockquote><p>Compose 是Docker官方的开源项目。需要安装！ </p><p>Dockerfile 让程序在任何地方运行。 web服务。 redis、mysql、nginx … 多个容器。 </p><p>run Compose</p><p>A <code>docker-compose.yml</code> looks like this:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.9"</span>  <span class="comment"># optional since v1.27.0</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>docker-compose up 100 个服务。</p><p>Compose ：重要的概念。 </p><ul><li>服务services， 容器。应用。（web、redis、mysql….） </li><li>项目project。 一组关联的容器。 博客。web、mysql。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网下载地址</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载较快</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>2.授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>3.查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><blockquote><p>官网步骤</p></blockquote><h3 id="Step1：设置"><a href="#Step1：设置" class="headerlink" title="Step1：设置"></a>Step1：设置</h3><p><strong>1.为项目创建一个目录:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir composetest</span><br><span class="line"><span class="built_in">cd</span> composetest</span><br></pre></td></tr></table></figure><p><strong>2.在你的项目目录中创建一个名为app.py的文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hit_count</span><span class="params">()</span>:</span></span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">'hits'</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br></pre></td></tr></table></figure><p>在这个例子中，redis是应用程序网络上redis容器的主机名。 我们使用Redis的默认端口6379。</p><p><strong>3.在你的项目目录中创建另一个名为requirements.txt的文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure><h3 id="Step-2-创建一个Dockerfile文件"><a href="#Step-2-创建一个Dockerfile文件" class="headerlink" title="Step 2: 创建一个Dockerfile文件"></a>Step 2: 创建一个Dockerfile文件</h3><p>在这个步骤中，你写一个Dockerfile来构建一个Docker映像。 该映像包含Python应用程序所需的所有依赖项，包括Python本身。</p><p>在项目目录中，创建一个名为Dockerfile的文件  ：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py</span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache gcc musl-dev linux-headers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"flask"</span>, <span class="string">"run"</span>]</span></span><br></pre></td></tr></table></figure><p>这告诉Docker:</p><ul><li>从Python 3.7映像开始构建映像。</li><li>将工作目录设置为/code。</li><li>设置flask命令使用的环境变量。</li><li>安装gcc和其他依赖项</li><li>复制requirements.txt并安装Python依赖项。</li><li>向映像添加元数据，以说明容器正在监听端口5000</li><li>为容器设置运行flask的默认命令。</li></ul><h3 id="Step-3-在Compose文件中定义服务"><a href="#Step-3-在Compose文件中定义服务" class="headerlink" title="Step 3:在Compose文件中定义服务"></a>Step 3:在Compose文件中定义服务</h3><p>创建一个名为docker-compose.yml的文件在项目目录中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5000:5000"</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure><p>这个Compose文件定义了两个服务:web和redis</p><p><strong>Web service</strong></p><p>web服务使用从当前目录中的Dockerfile构建的映像。 然后它将容器和主机绑定到公开的端口5000,这个示例服务使用Flask web服务器的默认端口5000.</p><p><strong>Redis service</strong></p><p>redis服务使用从Docker Hub注册表拉出的公共redis镜像.</p><h3 id="Step-4-使用Compose构建并运行应用程序"><a href="#Step-4-使用Compose构建并运行应用程序" class="headerlink" title="Step 4:使用Compose构建并运行应用程序"></a>Step 4:使用Compose构建并运行应用程序</h3><p><strong>1.从您的项目目录，通过运行docker-compose up启动您的应用程序:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">[root@192 composetest]<span class="comment"># docker-compose up </span></span><br><span class="line">Building web</span><br><span class="line">Step 1/10 : FROM python:3.7-alpine</span><br><span class="line">3.7-alpine: Pulling from library/python</span><br><span class="line">5843afab3874: Pull complete</span><br><span class="line">1174600ee52d: Pull complete</span><br><span class="line">437edbe431b9: Pull complete</span><br><span class="line">1416265535ec: Pull complete</span><br><span class="line">2ef7f525363f: Pull complete</span><br><span class="line">Digest: sha256:0357dd472fd9e5717caeee37c335e23f118e81a368662e815423a778bb26e45d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> python:3.7-alpine</span><br><span class="line"> ---&gt; dc24f57a9e79</span><br><span class="line">Step 2/10 : WORKDIR /code</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 511de5bb7f16</span><br><span class="line">Removing intermediate container 511de5bb7f16</span><br><span class="line"> ---&gt; b460f6990ffb</span><br><span class="line">Step 3/10 : ENV FLASK_APP=app.py</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d7a243444613</span><br><span class="line">Removing intermediate container d7a243444613</span><br><span class="line"> ---&gt; 81182dbed6ab</span><br><span class="line">Step 4/10 : ENV FLASK_RUN_HOST=0.0.0.0</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 4247dd6cab4f</span><br><span class="line">Removing intermediate container 4247dd6cab4f</span><br><span class="line"> ---&gt; b7c8a4364c2e</span><br><span class="line">Step 5/10 : RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d717409c59a5</span><br><span class="line">fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/13) Installing libgcc (10.3.1_git20210424-r2)</span><br><span class="line">(2/13) Installing libstdc++ (10.3.1_git20210424-r2)</span><br><span class="line">(3/13) Installing binutils (2.35.2-r2)</span><br><span class="line">(4/13) Installing libgomp (10.3.1_git20210424-r2)</span><br><span class="line">(5/13) Installing libatomic (10.3.1_git20210424-r2)</span><br><span class="line">(6/13) Installing libgphobos (10.3.1_git20210424-r2)</span><br><span class="line">(7/13) Installing gmp (6.2.1-r0)</span><br><span class="line">(8/13) Installing isl22 (0.22-r0)</span><br><span class="line">(9/13) Installing mpfr4 (4.1.0-r0)</span><br><span class="line">(10/13) Installing mpc1 (1.2.1-r0)</span><br><span class="line">(11/13) Installing gcc (10.3.1_git20210424-r2)</span><br><span class="line">(12/13) Installing linux-headers (5.10.41-r0)</span><br><span class="line">(13/13) Installing musl-dev (1.2.2-r3)</span><br><span class="line">Executing busybox-1.33.1-r2.trigger</span><br><span class="line">OK: 140 MiB <span class="keyword">in</span> 48 packages</span><br><span class="line">Removing intermediate container d717409c59a5</span><br><span class="line"> ---&gt; 468eaf2fbf1a</span><br><span class="line">Step 6/10 : COPY requirements.txt requirements.txt</span><br><span class="line"> ---&gt; af34409b2eed</span><br><span class="line">Step 7/10 : RUN pip install -r requirements.txt</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 505c6f2cd293</span><br><span class="line">Collecting flask</span><br><span class="line">  Downloading Flask-2.0.1-py3-none-any.whl (94 kB)</span><br><span class="line">Collecting redis</span><br><span class="line">  Downloading redis-3.5.3-py2.py3-none-any.whl (72 kB)</span><br><span class="line">Collecting Werkzeug&gt;=2.0</span><br><span class="line">  Downloading Werkzeug-2.0.1-py3-none-any.whl (288 kB)</span><br><span class="line">Collecting click&gt;=7.1.2</span><br><span class="line">  Downloading click-8.0.1-py3-none-any.whl (97 kB)</span><br><span class="line">Collecting Jinja2&gt;=3.0</span><br><span class="line">  Downloading Jinja2-3.0.1-py3-none-any.whl (133 kB)</span><br><span class="line">Collecting itsdangerous&gt;=2.0</span><br><span class="line">  Downloading itsdangerous-2.0.1-py3-none-any.whl (18 kB)</span><br><span class="line">Collecting importlib-metadata</span><br><span class="line">  Downloading importlib_metadata-4.6.3-py3-none-any.whl (17 kB)</span><br><span class="line">Collecting MarkupSafe&gt;=2.0</span><br><span class="line">  Downloading MarkupSafe-2.0.1.tar.gz (18 kB)</span><br><span class="line">Collecting typing-extensions&gt;=3.6.4</span><br><span class="line">  Downloading typing_extensions-3.10.0.0-py3-none-any.whl (26 kB)</span><br><span class="line">Collecting zipp&gt;=0.5</span><br><span class="line">  Downloading zipp-3.5.0-py3-none-any.whl (5.7 kB)</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: MarkupSafe</span><br><span class="line">  Building wheel <span class="keyword">for</span> MarkupSafe (setup.py): started</span><br><span class="line">  Building wheel <span class="keyword">for</span> MarkupSafe (setup.py): finished with status <span class="string">'done'</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> MarkupSafe: filename=MarkupSafe-2.0.1-cp37-cp37m-linux_x86_64.whl size=14614 sha256=38b0cb4d087af4d7bd978f636652f6edb6b64b8d434683ec6d1e2067016af412</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /root/.cache/pip/wheels/1a/18/04/e3b5bd888f000c2716bccc94a565239f9defc47ef93d9e7bea</span><br><span class="line">Successfully built MarkupSafe</span><br><span class="line">Installing collected packages: zipp, typing-extensions, MarkupSafe, importlib-metadata, Werkzeug, Jinja2, itsdangerous, click, redis, flask</span><br><span class="line">Successfully installed Jinja2-3.0.1 MarkupSafe-2.0.1 Werkzeug-2.0.1 click-8.0.1 flask-2.0.1 importlib-metadata-4.6.3 itsdangerous-2.0.1 redis-3.5.3 typing-extensions-3.10.0.0 zipp-3.5.0</span><br><span class="line">WARNING: Running pip as the <span class="string">'root'</span> user can result <span class="keyword">in</span> broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv</span><br><span class="line">WARNING: You are using pip version 21.2.1; however, version 21.2.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'/usr/local/bin/python -m pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br><span class="line">Removing intermediate container 505c6f2cd293</span><br><span class="line"> ---&gt; 85cdffa0ae04</span><br><span class="line">Step 8/10 : EXPOSE 5000</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c003d36bc149</span><br><span class="line">Removing intermediate container c003d36bc149</span><br><span class="line"> ---&gt; c84787e55520</span><br><span class="line">Step 9/10 : COPY . .</span><br><span class="line"> ---&gt; a92b59fa4169</span><br><span class="line">Step 10/10 : CMD [<span class="string">"flask"</span>, <span class="string">"run"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> fd46230dc075</span><br><span class="line">Removing intermediate container fd46230dc075</span><br><span class="line"> ---&gt; 64a309d2e06b</span><br><span class="line"></span><br><span class="line">Successfully built 64a309d2e06b</span><br><span class="line">Successfully tagged composetest_web:latest</span><br><span class="line">WARNING: Image <span class="keyword">for</span> service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.</span><br><span class="line">Pulling redis (redis:alpine)...</span><br><span class="line">alpine: Pulling from library/redis</span><br><span class="line">5843afab3874: Already exists</span><br><span class="line">9db2305878ef: Pull complete</span><br><span class="line">3558750a1d54: Pull complete</span><br><span class="line">425b6ad3558b: Pull complete</span><br><span class="line">638bf2557b6e: Pull complete</span><br><span class="line">c3553f307e8f: Pull complete</span><br><span class="line">Digest: sha256:3ff6fbaa2896f825bbb93f0cf82716b6cdcd700ee066de4f9178c2028fe56c52</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:alpine</span><br><span class="line">Creating composetest_web_1   ... <span class="keyword">done</span></span><br><span class="line">Creating composetest_redis_1 ... <span class="keyword">done</span></span><br><span class="line">Attaching to composetest_redis_1, composetest_web_1</span><br><span class="line">redis_1  | 1:C 02 Aug 2021 12:02:06.449 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">redis_1  | 1:C 02 Aug 2021 12:02:06.449 <span class="comment"># Redis version=6.2.5, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">redis_1  | 1:C 02 Aug 2021 12:02:06.449 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">redis_1  | 1:M 02 Aug 2021 12:02:06.450 * monotonic clock: POSIX clock_gettime</span><br><span class="line">redis_1  | 1:M 02 Aug 2021 12:02:06.451 * Running mode=standalone, port=6379.</span><br><span class="line">redis_1  | 1:M 02 Aug 2021 12:02:06.451 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">redis_1  | 1:M 02 Aug 2021 12:02:06.451 <span class="comment"># Server initialized</span></span><br><span class="line">redis_1  | 1:M 02 Aug 2021 12:02:06.451 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></span><br><span class="line">redis_1  | 1:M 02 Aug 2021 12:02:06.451 * Ready to accept connections</span><br><span class="line">web_1    |  * Serving Flask app <span class="string">'app.py'</span> (lazy loading)</span><br><span class="line">web_1    |  * Environment: production</span><br><span class="line">web_1    |    WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">web_1    |    Use a production WSGI server instead.</span><br><span class="line">web_1    |  * Debug mode: off</span><br><span class="line">web_1    |  * Running on all addresses.</span><br><span class="line">web_1    |    WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">web_1    |  * Running on http://172.18.0.2:5000/ (Press CTRL+C to quit)</span><br><span class="line">web_1    | 172.18.0.1 - - [02/Aug/2021 12:04:01] <span class="string">"GET / HTTP/1.1"</span> 200 -</span><br><span class="line">web_1    | 172.18.0.1 - - [02/Aug/2021 12:04:01] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</span><br></pre></td></tr></table></figure><p>Compose生成一个Redis镜像，为你的代码构建一个镜像，然后启动你定义的服务。 在本例中，代码在构建时静态地复制到映像中。</p><p><strong>2.在浏览器中输入<a href="http://localhost:5000/以查看应用程序的运行情况" target="_blank" rel="noopener">http://localhost:5000/以查看应用程序的运行情况</a></strong></p><p>如果你在Linux、Mac或Windows上使用Docker，那么web应用程序现在应该在Docker守护主机的5000端口上监听。 将浏览器指向<a href="http://localhost:5000以找到Hello">http://localhost:5000以找到Hello</a> World消息。 如果这还不能解决，你也可以试试<a href="http://127.0.0.1:5000。">http://127.0.0.1:5000。</a></p><p> 如果你在Mac或Windows上使用Docker Machine，使用Docker - Machine ip MACHINE_VM来获取Docker主机的ip地址。 然后，在浏览器中打开<a href="http://MACHINE_VM_IP:5000。">http://MACHINE_VM_IP:5000。</a></p><p> 你应该在浏览器中看到一条消息:</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210802200654370.png" alt="image-20210802200654370"></p><p><strong>3.刷新页面</strong></p><p>这个数字应该增加。  </p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210802200543213.png" alt="image-20210802200543213"></p><p><strong>4.切换到另一个终端窗口，并键入docker image ls以列出本地映像。</strong>  </p><p>此时列出图像应该返回redis和web。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前运行容器</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">55f0a13fad54   redis:alpine      <span class="string">"docker-entrypoint.s…"</span>   10 minutes ago   Up 10 minutes   6379/tcp                                    composetest_redis_1</span><br><span class="line">5e57452f7f0e   composetest_web   <span class="string">"flask run"</span>              10 minutes ago   Up 10 minutes   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   composetest_web_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像文件查看</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG          IMAGE ID       CREATED          SIZE</span><br><span class="line">composetest_web   latest       64a309d2e06b   29 minutes ago   184MB</span><br><span class="line">python            3.7-alpine   dc24f57a9e79   6 days ago       41.9MB</span><br><span class="line">redis             alpine       eb705d309426   10 days ago      32.3MB</span><br></pre></td></tr></table></figure><p>您可以使用docker inspect 检查镜像</p><p>停止应用程序，要么在第二个终端的项目目录下运行<code>docker-compose down</code>，要么在启动应用程序的原始终端上按CTRL+C。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^CGracefully stopping... (press Ctrl+C again to force)</span><br><span class="line">Stopping composetest_redis_1 ... <span class="keyword">done</span></span><br><span class="line">Stopping composetest_web_1   ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker service ls</span></span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use <span class="string">"docker swarm init"</span> or <span class="string">"docker swarm join"</span> to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure><p>默认的服务名 文件名<em>服务名 </em> num    <code>composetest_web_1</code>和<code>composetest_redis_1</code></p><p>多个服务器。集群。A B _num 副本数量 </p><p>服务redis服务 =&gt; 4个副本。 </p><p>集群状态。服务都不可能只有一个运行实例。 弹性、10 HA 高并发。</p><p>kubectl service 负载均衡。</p><p><strong>5.网络规则</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 eternal]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME                  DRIVER    SCOPE</span><br><span class="line">b81aff79717b   bridge                bridge    <span class="built_in">local</span></span><br><span class="line">9c8ba9bfc2ef   composetest_default   bridge    <span class="built_in">local</span></span><br><span class="line">ef30316d2f16   host                  host      <span class="built_in">local</span></span><br><span class="line">54415741bbbb   none                  null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>10个服务 =&gt; 项目 （项目中的内容都在同个网络下。域名访问）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect composetest_default</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210802204536182.png" alt="image-20210802204536182"></p><p>发现<code>composetest_web_1</code>和<code>composetest_redis_1</code>两个服务都在同一网络中</p><p>如果在同一个网络下，我们可以直接通过域名访问。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>docker-compose 以前都是单个 docker run 启动容器。 </p><p>docker-compose。 通过 docker-compose 编写 yaml配置文件、可以通过 compose 一键启动所有服 务，停止。！</p><p><strong>Docker小结：</strong> </p><ul><li>1、Docker 镜像。 run =&gt; 容器 </li><li>2、DockerFile 构建镜像（服务打包） </li><li>3、docker-compose 启动项目（编排、多个微服务/环境） </li><li>4、Docker 网络</li></ul><h2 id="yaml规则"><a href="#yaml规则" class="headerlink" title="yaml规则"></a>yaml规则</h2><p>docker-compose.yaml 核心。</p><p>常用命令：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3层！</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">''</span> <span class="comment"># 版本</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 服务</span></span><br><span class="line"><span class="string">服务1:</span> <span class="string">web</span></span><br><span class="line"><span class="comment"># 服务配置</span></span><br><span class="line"><span class="string">images</span></span><br><span class="line"><span class="string">build</span></span><br><span class="line"><span class="string">network</span></span><br><span class="line"><span class="string">.....</span></span><br><span class="line"><span class="string">服务2:</span> <span class="string">redis</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string">服务3:</span> <span class="string">redis</span></span><br><span class="line"><span class="comment"># 其他配置 网络/卷、全局规则</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a><strong>博客</strong></h3><p>下载程序、安装数据库、配置…..  </p><p>compose 应用。=&gt; 一键启动！ </p><ul><li>1、下载项目（docker-compose.yaml） </li><li>2、如果需要文件。Dcokerfile </li><li>3、文件准备齐全（直接一键启动项目！）</li></ul><p>去官网查看</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210802211517463.png" alt="image-20210802211517463"></p><p>前台启动</p><p>docker -d </p><p>docker-compose up -d</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210802215253767.png" alt="image-20210802215253767"></p><h3 id="Demo上线"><a href="#Demo上线" class="headerlink" title="Demo上线"></a>Demo上线</h3><p>1.写一个小demo</p><p>2.编写Dockerfile，构建镜像</p><p>3.编写docker-compose.yml文件，编排项目</p><p>4.发布到服务器</p><p><strong>Dockerfile文件</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server.port=8111"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p><strong>docker-compose.yml文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">eternal:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eternal</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8111:8111"</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"library/redis:alpine"</span></span><br></pre></td></tr></table></figure><p><strong>发布到linux中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过命令进行重构启动（项目重新部署打包）</span></span><br><span class="line">[root@192 eternal]<span class="comment"># docker-compose up --build</span></span><br><span class="line">Building eternal</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"> ---&gt; 948e956cd6ad</span><br><span class="line">Step 3/5 : CMD [<span class="string">"--server.port=8111"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8fa5c24dfa81</span><br><span class="line">Removing intermediate container 8fa5c24dfa81</span><br><span class="line"> ---&gt; b5b542c8c3f3</span><br><span class="line">Step 4/5 : EXPOSE 8111</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> a958f2a181fd</span><br><span class="line">Removing intermediate container a958f2a181fd</span><br><span class="line"> ---&gt; e84098b8047f</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 2e83b321cc84</span><br><span class="line">Removing intermediate container 2e83b321cc84</span><br><span class="line"> ---&gt; 1eeb5e2dd12b</span><br><span class="line"></span><br><span class="line">Successfully built 1eeb5e2dd12b</span><br><span class="line">Successfully tagged eternal:latest</span><br></pre></td></tr></table></figure><h1 id="11-Docker-Swarm"><a href="#11-Docker-Swarm" class="headerlink" title="11.Docker Swarm"></a>11.Docker Swarm</h1><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>1.阿里云购买四个服务器</p><p>2.通过Xshell连接四个服务器（这里是四个一摸一样的虚拟机）</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210803212011465.png" alt="image-20210803212011465"></p><p>3.统一安装相同的环境</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>Docker Engine 1.12引入了集群模式，可以让你创建一个或多个Docker引擎的集群，称为集群。 集群由一个或多个节点组成:在集群模式下运行Docker Engine 1.12或更高版本的物理或虚拟机。</p><p> 有两种类型的节点:管理节点和工人节点。</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210803210146413.png" alt="image-20210803210146413"></p><p><strong>查看网络</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><strong>查看swarm帮助</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker swarm --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  ca          Display and rotate the root CA</span><br><span class="line">  init        Initialize a swarm</span><br><span class="line">  join        Join a swarm as a node and/or manager</span><br><span class="line">  join-token  Manage join tokens</span><br><span class="line">  leave       Leave the swarm</span><br><span class="line">  unlock      Unlock swarm</span><br><span class="line">  unlock-key  Manage the unlock key</span><br><span class="line">  update      Update the swarm</span><br></pre></td></tr></table></figure><p><strong>docker swarm 删除节点 (解散集群)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在Swarm manager 机器上查看节点ID</span><br><span class="line"><span class="comment"># docker node ls</span></span><br><span class="line"></span><br><span class="line">排空节点上的集群容器 </span><br><span class="line"><span class="comment"># docker node update --availability drain xej6qh39mrj9v3u8v1seuk07c</span></span><br><span class="line"></span><br><span class="line">主动离开集群，让节点处于down状态，才能删除（在节点机上执行）</span><br><span class="line"><span class="comment"># docker swarm leave</span></span><br><span class="line"></span><br><span class="line">删除指定节点 （Swarm manager机器上操作）</span><br><span class="line"><span class="comment"># docker node rm xej6qh39mrj9v3u8v1seuk07c</span></span><br><span class="line"></span><br><span class="line">管理节点，解散集群</span><br><span class="line">docker swarm leave --force</span><br></pre></td></tr></table></figure><p>设置 1 号服务器为manager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置管理者 docker swarm init --advertise-addr ip地址</span></span><br><span class="line"></span><br><span class="line">[root@192 ~]<span class="comment"># docker swarm init --advertise-addr 192.168.158.137</span></span><br><span class="line">Swarm initialized: current node (bsidch07oqm8ykuivarc2o0ul) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-1xevwy1s63g50kwj64o4jo0fc0n315zo07ah2sx0nzco4g85ij-836eru2hvie5etwcduguloz2m 192.168.158.137:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure><p>初始化节点 <code>docker swarm init</code></p><p>docker swarm join 加入一个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取令牌</span></span><br><span class="line"><span class="comment"># 生成管理节点</span></span><br><span class="line">docker swarm join-token manager</span><br><span class="line"><span class="comment"># 生成工作节点</span></span><br><span class="line">docker swarm join-token worker</span><br></pre></td></tr></table></figure><p>设置 2 号服务器加入节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]<span class="comment">#  docker swarm join --token SWMTKN-1-1xevwy1s63g50kwj64o4jo0fc0n315zo07ah2sx0nzco4g85ij-836eru2hvie5etwcduguloz2m 192.168.158.137:2377</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210803214617320.png" alt="image-20210803214617320"></p><p>在 1 号服务器上查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210803214732382.png" alt="image-20210803214732382"></p><p>在 1 号服务器生成工作节点令牌</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker swarm join-token worker</span></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-1xevwy1s63g50kwj64o4jo0fc0n315zo07ah2sx0nzco4g85ij-836eru2hvie5etwcduguloz2m 192.168.158.137:2377</span><br></pre></td></tr></table></figure><p>将剩下两个服务器同样的方式加入到manager中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 1 号服务器中所加入的节点</span></span><br><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210803215435423.png" alt="image-20210803215435423"></p><p>后期：搭建100台服务器</p><ul><li>生成节点 init</li><li>加入（manager，worker）</li></ul><p>目标：双主双从</p><h2 id="Raft一致性协议"><a href="#Raft一致性协议" class="headerlink" title="Raft一致性协议"></a>Raft一致性协议</h2><p>双主双从：假设一个节点挂了，其他节点是否可以用！</p><p>Raft协议：保证大多数节点u才能活才可以用。只要&gt;1,集群至少大于3台</p><p>例：</p><p>将 1 号服务器关闭（宕机）      双主，另外一个主节点也不能使用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave</span><br></pre></td></tr></table></figure><p>在 2 号服务器中进行节点查看（报错）</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804112038670.png" alt="image-20210804112038670"></p><p>在 3、4 号服务器中进行节点查看（报错）</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804112315692.png" alt="image-20210804112315692"></p><p>错误信息：没有一个 swarm manager（管理节点）</p><p>再次将 1 号服务器开启</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804112530585.png" alt="image-20210804112530585"></p><p>发现，位置已被 2 号服务器替代，且 2 号服务器原本的已经宕机（换了身份）</p><p>将 3 号服务器离开节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804120255839.png" alt="image-20210804120255839"></p><p>将 3 号服务器设为manager节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在管理节点下生成一个管理令牌</span></span><br><span class="line">docker swarm join-token manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 3 号服务器执行</span></span><br><span class="line">docker swarm join --token SWMTKN-1-57r2d8yvj5fpb7ivkild5oeyx080zhrin5v8a3z257p9qgniv9-46qee76j01teyxb34bti4rd3a 192.168.158.138:2377</span><br></pre></td></tr></table></figure><p>在 3 号服务器 查看当前节点</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804120542618.png" alt="image-20210804120542618"></p><p>这个时候挂掉一个manager，其他的正常使用</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804120704865.png" alt="image-20210804120704865"></p><p>这个时候再挂掉一个manager，则无法正常使用</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804120852132.png" alt="image-20210804120852132"></p><p><strong>注意：</strong></p><ul><li>确保有三个及以上的manager，否则两个manager，其中一个挂掉，则整个集群就无法使用了</li><li>十分简单：集群，可用！ 3个主节点。 （两个及以上个主节点）大于1 台管理节点存活！ </li><li>Raft协议： 保证大多数节点存活，才可以使用，高可用</li></ul><h2 id="集群弹性创建服务"><a href="#集群弹性创建服务" class="headerlink" title="集群弹性创建服务"></a>集群弹性创建服务</h2><p>弹性、扩缩容！集群！ 以后告别 docker run！ </p><p>docker-compose up！ 启动一个项目。单机！ </p><p>集群： swarm<code>docker serivce</code>  </p><p>容器 =&gt; 服务！ </p><p>容器 =&gt; 服务！=&gt; 副本！ </p><p>redis 服务 =&gt; 10个副本！（同时开启10个redis容器） </p><p>体验：创建服务、动态扩展服务、动态更新服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker service </span></span><br><span class="line"></span><br><span class="line">Usage:  docker service COMMAND</span><br><span class="line">Manage services</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      创建一个新服务</span><br><span class="line">  inspect     显示一个或多个服务的详细信息</span><br><span class="line">  logs        获取服务或任务的日志</span><br><span class="line">  ls          服务列表</span><br><span class="line">  ps          列出一个或多个服务的任务</span><br><span class="line">  rm          删除一个或多个服务</span><br><span class="line">  rollback    恢复对服务配置的更改</span><br><span class="line">  scale       扩展一个或多个复制的服务</span><br><span class="line">  update      更新服务</span><br></pre></td></tr></table></figure><p>灰度发布：直接升级更新，无需停止活动再更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run 容器启动，不具备扩缩容器</span><br><span class="line">docker service 服务，具有扩缩容，滚动更新</span><br></pre></td></tr></table></figure><p>启动服务</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804131220199.png" alt="image-20210804131220199"></p><p>在 1 号服务器中执行开启服务命令，发现在 3 号服务器中开启（docker ps）随机分布在主节点（manager节点）</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804131603560.png" alt="image-20210804131603560"></p><p>查看服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME       MODE         REPLICAS   IMAGE          PORTS</span><br><span class="line">lm74rvezj8bc   my-nginx   replicated   1/1        nginx:latest   *:8888-&gt;80/tcp</span><br></pre></td></tr></table></figure><p>开启多个服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker service update --replicas 3 my-nginx</span></span><br><span class="line">my-nginx</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   </span><br><span class="line">2/3: running   </span><br><span class="line">3/3: running   </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p>再次查看服务开启，发现 1，3，4号服务器开启了服务（随机分布）</p><p>从137-140四个ip都可访问</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804132141212.png" alt="image-20210804132141212"></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210804132222025.png" alt="image-20210804132222025"></p><p>集群就是个整体，可随时动态扩所容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启10个服务</span></span><br><span class="line">[root@192 ~]<span class="comment"># docker service update --replicas 10 my-nginx</span></span><br><span class="line">my-nginx</span><br><span class="line">overall progress: 10 out of 10 tasks </span><br><span class="line">1/10: running   </span><br><span class="line">2/10: running   </span><br><span class="line">3/10: running   </span><br><span class="line">4/10: running   </span><br><span class="line">5/10: running   </span><br><span class="line">6/10: running   </span><br><span class="line">7/10: running   </span><br><span class="line">8/10: running   </span><br><span class="line">9/10: running   </span><br><span class="line">10/10: running   </span><br><span class="line">verify: Service converged </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四个机子上每个多跑了几个服务</span></span><br><span class="line">[root@192 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">1266d8f420d1   nginx:latest   <span class="string">"/docker-entrypoint.…"</span>   48 seconds ago   Up 38 seconds   80/tcp    my-nginx.4.e289j7yp21tkwlofuop6b6g9i</span><br><span class="line">baefd4cab9a2   nginx:latest   <span class="string">"/docker-entrypoint.…"</span>   48 seconds ago   Up 38 seconds   80/tcp    my-nginx.9.n7lequwe1dx29unbu2ni8f68d</span><br><span class="line">aff860e9ba12   nginx:latest   <span class="string">"/docker-entrypoint.…"</span>   48 seconds ago   Up 38 seconds   80/tcp    my-nginx.5.i0jeca3chwrh7wqav7zpz82q5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到1个服务</span></span><br><span class="line">[root@192 ~]<span class="comment"># docker service update --replicas 1 my-nginx</span></span><br><span class="line">my-nginx</span><br><span class="line">overall progress: 1 out of 1 tasks </span><br><span class="line">1/1: running   </span><br><span class="line">verify: Service converged </span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他几个机子上的服务就停掉了，只会在一个机子中开启一个服务</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启5个服务</span></span><br><span class="line">[root@192 ~]<span class="comment"># docker service scale my-nginx=5</span></span><br><span class="line">my-nginx scaled to 5</span><br><span class="line">overall progress: 5 out of 5 tasks </span><br><span class="line">1/5: running   </span><br><span class="line">2/5: running   </span><br><span class="line">3/5: running   </span><br><span class="line">4/5: running   </span><br><span class="line">5/5: running   </span><br><span class="line">verify: Service converged </span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除服务</span></span><br><span class="line">[root@192 ~]<span class="comment"># docker service rm my-nginx</span></span><br><span class="line">my-nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dcoker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象</title>
      <link href="/2021/07/19/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/07/19/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-面向对象"><a href="#Java-面向对象" class="headerlink" title="Java 面向对象"></a>Java 面向对象</h1><h1 id="1-（POP）与（OOP）"><a href="#1-（POP）与（OOP）" class="headerlink" title="1.（POP）与（OOP）"></a>1.（POP）与（OOP）</h1><h2 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h2><ul><li><code>面向过程</code>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；</li><li><code>面向对象</code>是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</li></ul><blockquote><p>面向对象是以功能来划分问题，而不是步骤。</p></blockquote><h2 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTEwMTkyNDExOTI0" alt="这里写图片描述"></p><p><code>属性</code>用来描述具体某个对象的特征。比如小志身高180M，体重70KG，这里身高、体重都是属性。</p><p><code>面向对象的思想</code>就是把一切都看成对象，而对象一般都由属性+方法组成！</p><p><code>属性</code>属于对象静态的一面，用来形容对象的一些特性，<code>方法</code>属于对象动态的一面，咱们举一个例子，小明会跑，会说话，跑、说话这些行为就是对象的方法！所以为动态的一面， 我们把属性和方法称为这个对象的成员！</p><p><code>类：</code>具有同种属性的对象称为类，是个抽象的概念。比如“人”就是一类，期中有一些人名，比如小明、小红、小玲等等这些都是对象，类就相当于一个模具，他定义了它所包含的全体对象的公共特征和功能，<strong>对象就是类的一个实例化</strong>，小明就是人的一个实例化！我们在做程序的时候，经常要将一个变量实例化，就是这个原理！我们一般在做程序的时候一般都不用类名的，比如我们在叫小明的时候，不会喊“人，你干嘛呢！”而是说的是“小明，你在干嘛呢！”</p><h2 id="两者的优缺点"><a href="#两者的优缺点" class="headerlink" title="两者的优缺点"></a>两者的优缺点</h2><p><strong>面向过程</strong></p><blockquote><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux/Unix等一般采用面向过程开发，性能是最重要的因素。<br>缺点：没有面向对象易维护、易复用、易扩展</p></blockquote><p><strong>面向对象</strong></p><blockquote><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护<br>缺点：性能比面向过程低</p></blockquote><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2.类和对象"></a>2.类和对象</h1><p>面向对象的两个要素：类、对象</p><p><strong>类：</strong>对一类事物的描述，是抽象的，概念上的定义</p><p><strong>对象：</strong>是实际存在的该类事物的每个个体，又称为实例（instance）</p><blockquote><p>例：</p><ul><li>类：”人”泛指人；</li><li>对象：比尔盖茨，是一个实实在在的人，单独的个体</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象并实例化</span></span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名对象，只能调用一次，开发不用</span></span><br><span class="line"><span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通常把匿名对象用在方法里面</span></span><br><span class="line">stu.creatStudent(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"男"</span>))</span><br></pre></td></tr></table></figure><p><strong>代码块</strong></p><p>代码块的作用：用来初始化类、对象</p><p>代码块如果有修饰的话，只能用static修饰</p><p>分类：</p><p>静态代码块 </p><ul><li>内部可以有输出语句</li><li>随着类的加载而执行，只执行一次</li><li>作用：初始化类的信息</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法不能调用非静态的结构</li></ul><p>非静态代码块</p><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行，每次创建对象都会加载一次</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法、或非静态的属性、非静态的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-属性和方法"><a href="#3-属性和方法" class="headerlink" title="3.属性和方法"></a>3.属性和方法</h1><p>属性：对应类中的成员变量</p><p>方法：对应类中的成员方法（函数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Person类的对象</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用类中的属性</span></span><br><span class="line">        p1.name = <span class="string">"Tom"</span>;</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用类对象中的功能方法</span></span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人可以吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人可以睡觉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人可以说话，使用的语言是："</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法形参的传递机制：值传递</p><p>形参：定义方法时，声明的小括号内的参数</p><p>实参：方法调用时，实际传递给形参的数据</p><p>值传递机制：</p><ul><li>如果参数是基本数据类型，此时实参赋给形参的是实参真是存储的数据值</li><li>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TransferTest test = <span class="keyword">new</span> TransferTest();</span><br><span class="line">        test.first();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Value v = <span class="keyword">new</span> Value();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v, i);<span class="comment">//该方法执行完毕后，刚刚在堆内存中开辟val对象就会被销毁，此时v的地址又变回了原本的地址</span></span><br><span class="line">        System.out.println(v.i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        Value val = <span class="keyword">new</span> Value();</span><br><span class="line">        <span class="comment">//这里是将val的地址值赋给v，令v指向val中的内容，而原本v里面的内容还存在堆内存中</span></span><br><span class="line">        v = val;</span><br><span class="line">        <span class="comment">//看似输出的是v的值，其实输出的是val的i</span></span><br><span class="line">        System.out.println(v.i + <span class="string">"\t"</span> + i);</span><br><span class="line">        <span class="comment">//second方法执行完毕后，那么在该方法开辟的变量，和对象在栈内存和堆内存中都将被销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span><span class="number">0</span><span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="4-对象创建和使用：内存解析"><a href="#4-对象创建和使用：内存解析" class="headerlink" title="4.对象创建和使用：内存解析"></a>4.对象创建和使用：内存解析</h1><p><code>堆（Heap）：</code>此内存区域的唯一目的就是<strong>存放对象实例</strong>，几乎所有的对象实例都在这里分配内存。这一点在java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p><code>栈（Stack）：</code>指的是虚拟机栈。虚拟机栈用来存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型，它不等同于对象本身，是对象在堆内存的首地址)。方法执行完，自动释放。</p><p><code>方法区（Method Area）：</code>用来存储已被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。</p><p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name=<span class="string">"张三"</span>;</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p2.name);</span><br><span class="line">Person p3 = p1;</span><br><span class="line">p3.name=<span class="string">"李四"</span></span><br><span class="line">p3.age=<span class="number">10</span>;</span><br><span class="line">System.out.println(p1.name+p1.age);</span><br><span class="line"></span><br><span class="line">李四 <span class="number">10</span></span><br></pre></td></tr></table></figure><p>内存分析：</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210714104832618.png" alt="image-20210714104832618"></p><p>步骤：</p><ul><li>创建对象p1，在栈内存中开辟空p1;实例化对象p1，在堆内存中开辟空间首地址为 0x12ab</li><li>将首地址赋给栈内存中的p1，p1的地址直接指向堆内存中首地址为0x12ab的空间</li><li>对对象p1中的name属性进行赋值，修改堆内存中首地址为0x12ab 中的name属性值，将未初始化的值替换为”张三”</li><li>创建对象p2,在栈内存中开辟新的空间p1;实例化对象p2,在堆内存中开辟空间首地址为 0x7788</li><li>创建对象p3，在栈内存中开辟新的空间p3;未实例化对象，也就无需再对堆内存开辟新的空间</li><li>直接将p1的地址赋给p3，此时p3也指向堆内存首地址未0x12ab的空间；</li><li>修改p3.name和p3.age也就相当于是修改 0x12ab里面的属性值</li><li>此时未经过p1.name进行修改属性值</li><li>那么调用p1.name或者p3.name进行打印输出，那么两个值都是一致的；</li></ul><blockquote><p>内存解析说明：</p><ul><li>引用类型的变量，只可能存储两类值：null 或 地址值（含变量的类型）</li></ul></blockquote><p>示例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//教师类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">int</span> state = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建教师对象数组，并实例化</span></span><br><span class="line">Student[] stus = <span class="keyword">new</span> Student[<span class="number">5</span>]</span><br><span class="line"><span class="comment">//对数组下标为0的进行实例化教师对象</span></span><br><span class="line">stus[<span class="number">0</span>] = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(stus[<span class="number">0</span>].state); <span class="comment">// 1</span></span><br><span class="line">System.out.println(stus[<span class="number">1</span>].state); <span class="comment">//空指针异常</span></span><br></pre></td></tr></table></figure><p>内存分析：</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210714175054049.png" alt="image-20210714175054049"></p><p>步骤：</p><ul><li>创建一个对象，栈内存中开辟一个空间 stus对象；</li><li>实例化对象，堆内存中开辟一个空间存放数组，并设首地址为 0x7788；</li><li>将堆内存中地址 0x7788 赋给栈内存中的stus，这样栈内存 stus 对象指向堆内存中地址为 0x7788 的空间</li><li>数组下标为0的实例化一个student对象，开辟一个空间存放对象属性，地址为 0x1122</li><li>地址 0x1122 赋值给下标为0的数组，并使之指向内存地址为 0x1122 的空间</li></ul><h1 id="5-属性（成员变量）和局部变量"><a href="#5-属性（成员变量）和局部变量" class="headerlink" title="5.属性（成员变量）和局部变量"></a>5.属性（成员变量）和局部变量</h1><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/672c4611095904c6cc441ae37140610b.png" alt="img"></p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>类变量从该类的准备阶段起开始存在，直到系统完全销毁这个类，类变量的作用域与这个类的生存范围相同；</p><p>而实例变量则从该类的实例被创建起开始存在，直到系统完全销毁这个实例，实例变量的作用域与对应实例的生存范围相同。</p><p>正是基于这个原因，可以把类变量和实例变量统称为成员变量。其中类变量可以理解为类成员变量，它作为类本身的一个成员，与类本身共存亡；实例变量则可以理解为实例成员变量，它作为实例的一个成员与实例共存亡。</p><p>只要类存在，类就可以访问类变量         类.类变量</p><p>只要实例存在，实例就可以访问实例变量        实例.实例变量</p><p>当然实例也可以访问类变量。但是需要注意的是因为实例不拥有类变量，所以通过实例来访问类变量进行操作，实际上是对类变量进行操作 ，当有其他实例来访问类变量时，访问的类变量是被对象访问操作过的类变量。</p><p>成员变量无需显示初始化，只要为一个类定义了类变量或实例变量，系统就会在这个类的准备阶段或创建该类的实例时进行默认初始化。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量根据定义形式的不同，又可以分为如下三种：</p><p>形参：在定义方法签名时定义的变量，形参的作用域在整个方法中都有效</p><p>方法局部变量：在方法体内定义的局部变量，它的作用域是从定义该变量的地方生效，到该方法结束时失效</p><p>代码块局部变量：这个局部变量的作用域从定义该变量的地方生效，到该代码结束时失效。</p><p>一个变量只在一对{}中起作用。。</p><p>java允许局部变量和成员变量同名，如果方法中局部变量和成员变量同名，局部变量就会覆盖成员变量，如果需要在这个方法中引用被覆盖成员变量，则可使用this（对于实例变量）或类名（对于类变量）作为调用者来限定访问成员变量。</p><h2 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210714112202981.png" alt="image-20210714112202981"></p><h2 id="类的属性赋值"><a href="#类的属性赋值" class="headerlink" title="类的属性赋值"></a>类的属性赋值</h2><p>默认初始化</p><p>显示初始化、代码块中初始化</p><p>构造器中初始化</p><p>通过“对象.属性”或“对象.方法”的方式赋值</p><h1 id="6-重写与重载"><a href="#6-重写与重载" class="headerlink" title="6.重写与重载"></a>6.重写与重载</h1><h2 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h2><ul><li>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong></li><li>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。</li><li>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。</li></ul><p><strong>例如：</strong>父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"狗可以吠叫"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Animal a = <span class="keyword">new</span> Animal(); <span class="comment">// Animal 对象</span></span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line"> </span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">      <span class="comment">//b.bark();   这里会报错，因为父类没有bark方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法的重写规则</strong></p><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h2 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h2><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p>最常用的地方就是构造器的重载。</p><p><strong>重载规则:</strong></p><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test2"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest3"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest4"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Overloading o = <span class="keyword">new</span> Overloading();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">"test3"</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">"test4"</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h2><div class="table-container"><table><thead><tr><th style="text-align:left">区别点</th><th style="text-align:left">重载方法</th><th style="text-align:left">重写方法</th></tr></thead><tbody><tr><td style="text-align:left">参数列表</td><td style="text-align:left">必须修改</td><td style="text-align:left">一定不能修改</td></tr><tr><td style="text-align:left">返回类型</td><td style="text-align:left">可以修改</td><td style="text-align:left">一定不能修改</td></tr><tr><td style="text-align:left">异常</td><td style="text-align:left">可以修改</td><td style="text-align:left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td style="text-align:left">访问</td><td style="text-align:left">可以修改</td><td style="text-align:left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table></div><p><strong>总结</strong></p><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><ul><li>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul><p><strong>二者不同之处：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/20171102-1.png" alt="img"></p><h1 id="7-封装与隐藏"><a href="#7-封装与隐藏" class="headerlink" title="7.封装与隐藏"></a>7.封装与隐藏</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p><ul><li>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</li><li>要访问该类的代码和数据，必须通过严格的接口控制。</li><li>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。</li><li>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</li></ul></blockquote><p><strong>封装的优点</strong></p><ul><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncapTest</span></span>&#123;</span><br><span class="line">    <span class="comment">// 修改属性的可见性来限制对属性的访问（一般限制为private）</span></span><br><span class="line">    <span class="comment">//将 name 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>采用 <strong>this</strong> 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p></blockquote><ul><li>public方法是外部类访问该类成员变量的入口。</li><li>通常情况下，这些方法被称为getter和setter方法。</li><li>因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。</li></ul><h2 id="四种权限修饰符"><a href="#四种权限修饰符" class="headerlink" title="四种权限修饰符"></a>四种权限修饰符</h2><p>从小到大排序： <code>private , (什么都不写)缺省 , protected , public</code>  置于类的成员定义前， 用来限定对象对该类成员的访问权限。</p><blockquote><p>对于class的权限修饰只可以用public和default(缺省)。  public类可以在任意地方被访问。 default类只可以被同一个包内部的类访问。</p></blockquote><div class="table-container"><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>yes</td><td></td><td></td><td></td></tr><tr><td>(缺省)</td><td>yes</td><td>yes</td><td></td><td></td></tr><tr><td>protected</td><td>yes</td><td>yes</td><td>yes</td><td></td></tr><tr><td>public</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210715104637600.png" alt="image-20210715104637600"></p><h1 id="8-构造器"><a href="#8-构造器" class="headerlink" title="8.构造器"></a>8.构造器</h1><p>构造器通常也叫构造方法、构造函数，构造器在每个项目中几乎无处不在。当你new一个对象时，就会调用构造器。</p><blockquote><p>构造器格式如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符，比如<span class="keyword">public</span>] 类名 (参数列表，可以没有参数)&#123;</span><br><span class="line">    <span class="comment">//这里不能有return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>默认构造器</strong>如果没有定义构造器，则会默认一个无参构造器，这就是为什么你定义了一个对象，比如 People，没有定义任何构造器却可以new这个对象,比如 new People() 。如果自定义了构造器，则会覆盖默认构造器。</p><p><strong>如何禁止对象被外部创建</strong>一些特殊需求，不希望定义的对象被外部创建（典型的就是单例了），那直接将构造器的修饰符改为 private 即可。这样就不能在外部通过new来创建这个对象了</p><p><strong>构造器重载</strong>与普通方法一样，构造器也支持重载。一个对象中是可以支持同时定义多个构造器，通过不同的参数列表来实现重载。经常看到代码中new一个对象时，有时传入参数，有时又可以不用传。比如：<code>new People()跟new People(&quot;张三&quot;)</code>，这里就是重载了。</p><p><strong>构造器的继承</strong>子类构造器会默认调用父类无参构造器，如果父类没有无参构造器，则必须在子类构造器的第一行通过<code>super关键字</code>指定调用父类的哪个构造器，<strong>具体看下文例子</strong>。<code>final类</code>是不允许被继承的，编译器会报错。很好理解，由于<code>final修饰符</code>指的是不允许被修改，而继承中，子类是可以修改父类的，这里就产生冲突了，所以final类是不允许被继承的。</p><p><strong>构造器、静态代码块、构造代码块的执行顺序</strong></p><ul><li>无继承的情况下的执行顺序</li><li><strong>静态代码块</strong>：只在程序启动后执行一次，优先级最高</li><li><strong>构造代码块</strong>：任何一个构造器被调用的时候，都会先执行构造代码块，优先级低于静态代码块</li><li><strong>构造器</strong>：优先级低于构造代码块</li><li><strong>总结一下优先级：静态代码块 &gt; 构造代码块 &gt; 构造器</strong></li><li>有继承的情况下的执行顺序：</li><li><strong>父类静态代码块</strong>：只在程序启动后执行一次，优先级最高</li><li><strong>子类静态代码块</strong>：只在程序启动后执行一次，优先级低于父类静态代码块</li><li><strong>父类构造代码块</strong>：父类任何一个构造器被调用的时候，都会执行一次，优先级低于子类静态代码块</li><li><strong>父类构造器</strong>：优先级低于父类构造代码</li><li><strong>子类构造代码块</strong>：子类任何一个构造器被调用的时候，都会执行一次，优先级低于父类构造器</li><li><strong>子类构造器</strong>：优先级低于子类构造代码块</li><li><strong>总结一下优先级：父类静态代码块 &gt; 子类静态代码块 &gt; 父类构造代码块 &gt; 父类构造器 &gt; 子类构造代码块 &gt; 子类构造器</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-关键字"><a href="#9-关键字" class="headerlink" title="9.关键字"></a>9.关键字</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static可以用来修饰：属性、方法、代码块、内部类</p><p>修饰属性：静态变量（类变量）</p><ul><li>根据是否使用static修饰属性，可分为：<code>静态属性</code> and <code>非静态属性（实例变量）</code></li><li><strong>实例变量：</strong>创建一个类的多个对象，则每个对象都独立拥有一套类中的非静态属性。当修改其中一个对象的非静态属性时，不会导致其他对象中同样的属性值发生改变</li><li><strong>静态变量：</strong>创建一个类的多个对象，多个对象共用一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，数值会发生改变</li></ul><p>修饰属性的其他说明：</p><ul><li>静态变量随着类的加载而加载</li><li>静态变量的加载要早于对象的创建</li><li>由于类只会加载一次，则静态变量在内存中也会存在一份，存在方法区的静态域中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.name = <span class="string">"张三"</span>;</span><br><span class="line">        p1.nation = <span class="string">"CHINA"</span>;</span><br><span class="line">        </span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.name = <span class="string">"李四"</span>；</span><br><span class="line">        p2.nation = <span class="string">"CHIN"</span>;</span><br><span class="line">        System.out.println(p1.nation);  </span><br><span class="line">        <span class="comment">//静态变量的话可以直接通过 类.属性 进行调用</span></span><br><span class="line">        Person.nation = <span class="string">"中国"</span>；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">static</span> String nation;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：CHIN</span><br></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210718084625293.png" alt="image-20210718084625293"></p><p>静态变量直接存放在方法区。</p><p><strong>static修饰方法：</strong></p><ul><li>静态方法中，只能调用静态的方法或者属性</li><li>非静态方法中，即可调用非静态的方法或属性，也可以调用静态的方法或属性</li></ul><p><strong>使用情景：</strong></p><blockquote><p><strong>如何确定一个属性是否要声明为static？</strong></p></blockquote><ul><li>属性是可以被多个对象所共享的，不会随着对象的不同而不同的</li></ul><blockquote><p><strong>如何确定一个方法是否要声明为static？</strong></p></blockquote><ul><li>操作静态属性的方法，通常设置为static</li><li>工具类中的方法，习惯上声明static。比如：Math、Arrays</li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>修饰结构：类、方法、变量</p><p>修饰类：此类不能被其他类继承</p><p>修饰方法：此方法不能被重写</p><p>修饰变量：将变量变成常量</p><p>修饰属性：可考虑赋值的位置：显示初始化、代码块中初始化、构造器中初始化</p><p>修饰局部变量：当使用finnal修饰形参时，表示形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p><p>static final 用来修饰属性：全局常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;  <span class="comment">//报错，重新给x赋值了，经过final修饰后，这样做是不合法的。</span></span><br><span class="line">        <span class="comment">//return x + 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this关键字的使用：</p><ul><li>this可以用来修饰：属性、方法、构造器</li><li>this修饰属性和方法：this理解为当前对象</li></ul><p><strong>this关键字的作用有两个：</strong></p><ol><li>当成员变量与局部变量同名时，用来区分成员变量和局部变量；</li><li>在构造函数中调用构造函数。</li></ol><p>区分成员和局部变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo d=<span class="keyword">new</span> Demo(<span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Demo(String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this.name 表示emo里面创建的String name; 这个变量 </span></span><br><span class="line"><span class="comment">//不加this关键字，打印出的结果是null；如果我们用this.name打印出的结果是张三</span></span><br></pre></td></tr></table></figure><p>当创建新对象的时候，构造函数会被自动调用，我们传的参数是“张三”，在构造函数Demo()里会定义一个名称为name的变量来接收这个数据“张三”，然后进行赋值的动作。</p><p>如果写成name=name;就相当于我们把“张三”这个值又赋给了它自己，这个栈里的变量对自己进行重写，这是毫无意义的，所以我们怎么才能把它赋值给堆里的变量name（也就是成员变量name）呢？这就要用到关键字this了。</p><p>其实每个函数里面其实都有一个默认的this引用，当对象调用函数的时候，将对象的地址赋给this关键字，此时this关键字可以指向对象，通过this就可以访问成员变量了（就是对象的属性）</p><p>构造函数中调用构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line">    </span><br><span class="line">    Person()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Person(String name,<span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="comment">//this()调用无参构造 Person()</span></span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="comment">//this(age)调用有参构造 Person(int age),构造器内部只能声明一个this去调用构造方法</span></span><br><span class="line">       <span class="comment">// this(age);</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">     Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"旺财"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>在子类中使用super调用超（父）类的构造方法时，super语句必须放在子类的构造方法中，并作为子类构造方法的第一条语句。</p><p>1、调用父类被子类重写的方法；</p><p>2、调用父类被子类重定义的成员变量；</p><p>3、调用父类的构造方法；</p><ul><li>在子类的构造方法中，如果没有显式使用super关键字调用超（父）类的某个构造方法，系统会默认在子类中执行super（）语句，即自动调用无参构造方法。</li><li>如果此时超（父）类没有提供无参的构造方法，编译器就会报错。<strong>因此用super调用超类构造方法时要保证超类中定义了相对应的构造方法。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>(name,age); <span class="comment">//调用父类中有参构造器</span></span><br><span class="line"><span class="keyword">super</span>.checkValue();<span class="comment">//调用父类方法</span></span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>在类构造器中super(形参)和this(形参)都是放在方法体的首位，而只能存在一个</p><h1 id="10-继承"><a href="#10-继承" class="headerlink" title="10.继承"></a>10.继承</h1><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><p><strong>继承类型</strong></p><p>需要注意的是 Java 不支持多继承，但支持多重继承。</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/java-extends-2020-12-08.png" alt="img"></p><p><strong>继承的特性</strong></p><ul><li>子类拥有父类非 private 的属性、方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><p><strong>继承关键字</strong></p><p>继承可以使用 <code>extends</code>和<code>implements</code>这两个关键字来实现继承，而且所有的类都是继承于<code>java.lang.Object</code>，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类。</p><p><strong>extends关键字</strong></p><p>类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, String myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>  <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>implements关键字</strong></p><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>super 与 this 关键字</strong></p><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p><p>this关键字：指向自己的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"animal : eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"dog : eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="comment">//super.eat();  // super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    a.eat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animal : eat</span><br><span class="line">dog : eat</span><br><span class="line">animal : eat</span><br></pre></td></tr></table></figure><p><strong>final关键字</strong></p><p>final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写：</p><ul><li><p>声明类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;<span class="comment">//类体&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>声明方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123;<span class="comment">//方法体&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注</strong>:实例变量也可以被定义为 final，被定义为 final 的变量不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final</p><p><strong>构造器</strong></p><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p><p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">"SuperClass()"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">"SuperClass(int n)"</span>);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">"SubClass"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">"SubClass(int n):"</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass2 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass2()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">"SubClass2"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">"SubClass2(int n):"</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"------SubClass 类继承------"</span>);</span><br><span class="line">    SubClass sc1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">100</span>); </span><br><span class="line">    System.out.println(<span class="string">"------SubClass2 类继承------"</span>);</span><br><span class="line">    SubClass2 sc3 = <span class="keyword">new</span> SubClass2();</span><br><span class="line">    SubClass2 sc4 = <span class="keyword">new</span> SubClass2(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------SubClass 类继承------</span><br><span class="line">SuperClass()</span><br><span class="line">SubClass</span><br><span class="line">SuperClass(<span class="keyword">int</span> n)</span><br><span class="line">SubClass(<span class="keyword">int</span> n):<span class="number">100</span></span><br><span class="line">------SubClass2 类继承------</span><br><span class="line">SuperClass(<span class="keyword">int</span> n)</span><br><span class="line">SubClass2</span><br><span class="line">SuperClass()</span><br><span class="line">SubClass2(<span class="keyword">int</span> n):<span class="number">200</span></span><br></pre></td></tr></table></figure><h1 id="11-多态性"><a href="#11-多态性" class="headerlink" title="11.多态性"></a>11.多态性</h1><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>多态性（向上转型）：</strong>多态是同一个行为具有多个不同表现形式或形态的能力。多态就是同一个接口，使用不同的实例而执行不同操作</p><p>多态性是对象多种表现形式的体现。</p><p><strong>多态的优点</strong></p><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ul><p><strong>多态存在的三个必要条件</strong></p><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象：<strong>Parent p = new Child();</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//创建Man对象</span></span><br><span class="line">        Man m1 = <span class="keyword">new</span> Man();</span><br><span class="line">        <span class="comment">//多态实现，</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Man();</span><br><span class="line">        <span class="comment">//当调用子父类同名参数当方法时</span></span><br><span class="line">        <span class="comment">//这里调用的是子类重写父类的方法，也就是Man里面的eat方法，而不是父类的-----虚拟方法调用</span></span><br><span class="line">        p2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译在左，执行在右</strong></p><p><code>Person p2 = new Man();</code>这里在编译的时候还是父类的对象，而在<code>p2.eat();</code>执行的时候是调用子类的方法，</p><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p><strong>为什么使用向下转型：</strong></p><blockquote><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。<code>使用向下转型才可以调用子类特有的属性和方法。</code></p></blockquote><p><strong>实现向下转型：</strong></p><blockquote><p>使用强制类型转换符：()</p></blockquote><p><strong>使用时的注意点：</strong></p><blockquote><p>使用强转时，可能出现ClassCastException异常；</p><p>为了避免向下转型出现该异常，通常会在转型之前，先进行instanceof判断，一旦返回为true，就向下转型，反之返回false</p></blockquote><p><strong>instanceof 操作符</strong></p><p><code>x instanceof A</code>:检验x是否为A类的对象，返回boolean值</p><p>要求x所属的类与A类必须是子类和父类的关系，否则编译错误</p><p>如果x属于A类的子类B， x instanceof A值为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">    <span class="comment">//处理Person类及其子类对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-设计模式"><a href="#12-设计模式" class="headerlink" title="12.设计模式"></a>12.设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置，产生其他依赖对象时，则可以通过在应用启动时直接产生一个单利对象，然后永久驻留内存的方式来解决</p></blockquote><h3 id="单例饿汉式"><a href="#单例饿汉式" class="headerlink" title="单例饿汉式"></a>单例饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先造好，用的时候直接用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部创建类的对象，声明的对象也为静态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User instance = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供公共的静态的方法，返回类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这样每一次实例化对象时，就会</span><br></pre></td></tr></table></figure><h3 id="单例懒汉式"><a href="#单例懒汉式" class="headerlink" title="单例懒汉式"></a>单例懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用一次造一次</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部创建类的对象，也声明为静态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//提供公共的静态方法，返回类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样每一次调getInstance()方法时，就会重新创建一个对象，两个对象地址不同,通过if判断来解决重复创建对象的问题</span></span><br></pre></td></tr></table></figure><h3 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h3><p>饿汉式：</p><p>​    坏处：对象加载时间过长</p><p>​    好处：饿汉式是线程安全的</p><p>懒汉式：</p><p>​    好处：延迟对象的创建</p><p>​    坏处：线程不安全</p><h1 id="13-抽象类与抽象方法"><a href="#13-抽象类与抽象方法" class="headerlink" title="13.抽象类与抽象方法"></a>13.抽象类与抽象方法</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p></blockquote><ul><li>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。</li><li>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。</li><li>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。</li><li>在 Java 中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDemo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">//不可对抽象类进行实例化，报错</span></span><br><span class="line">      Employee e = <span class="keyword">new</span> Employee(<span class="string">"George W."</span>, <span class="string">"Houston, TX"</span>, <span class="number">43</span>);</span><br><span class="line">      <span class="comment">//继承子类后的测试写法，编译正常</span></span><br><span class="line">      Salary s = <span class="keyword">new</span> Salary(<span class="string">"Mohd Mohtashim"</span>, <span class="string">"Ambehta, UP"</span>, <span class="number">3</span>, <span class="number">3600.00</span>);</span><br><span class="line">      Employee e = <span class="keyword">new</span> Salary(<span class="string">"John Adams"</span>, <span class="string">"Boston, MA"</span>, <span class="number">2</span>, <span class="number">2400.00</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"Call mailCheck using Salary reference --"</span>);</span><br><span class="line">      s.mailCheck();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"\n Call mailCheck using Employee reference--"</span>);</span><br><span class="line">      e.mailCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String address, <span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.address = address;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"Mailing a check to "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.address);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//get/set/toString等方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(String name, String address, <span class="keyword">int</span> number, <span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">       <span class="comment">//调用父类的Employee构造器</span></span><br><span class="line">       <span class="keyword">super</span>(name, address, number);</span><br><span class="line">       setSalary(salary);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//子类可正常使用</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Within mailCheck of Salary class "</span>);</span><br><span class="line">       System.out.println(<span class="string">"Mailing check to "</span> + getName()</span><br><span class="line">       + <span class="string">" with salary "</span> + salary);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类的对象不可以实例化</p><p>抽象类里面是有构造器的，其继承抽象类的子类可以使用抽象类的构造器</p><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><blockquote><p>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</p></blockquote><ul><li>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。</li><li>抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明抽象方法会造成以下两个结果：</p><ul><li>如果一个类包含抽象方法，那么该类必须是抽象类。</li><li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li></ul><p>继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</p><p>如果Salary类继承了Employee类，那么它必须实现computePay()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary; </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Computing salary pay for "</span> + getName());</span><br><span class="line">      <span class="keyword">return</span> salary/<span class="number">52</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类总结规定</strong></p><ul><li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li><li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li><li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li><li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li><li><strong>若子类重写了父类中的所有的抽象方法后，此子类方可实例化，若子类没有重写父类中的所有抽象方法，则此子类也是一个抽象类，需要用abstract修饰</strong></li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>abstract不能用来修饰：属性、构造器等结构</p><p>abstract不能用来修饰：私有方法、静态方法、final方法（子类继承后就无法使用父类方法）、final类</p><p>没有多态，抽象类就没有意义，抽象类无法实例化</p><h1 id="14-接口（interface）"><a href="#14-接口（interface）" class="headerlink" title="14.接口（interface）"></a>14.接口（interface）</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p></blockquote><ul><li>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</li><li>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</li><li>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</li><li>接口中不能定义构造器，不可以实例化 </li></ul><p><strong>接口与类相似点：</strong></p><ul><li>一个接口可以有多个方法。</li><li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在 .class 结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><p><strong>接口与类的区别：</strong></p><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ul><p><strong>接口特性</strong></p><ul><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ul><p><strong>抽象类和接口的区别</strong></p><ul><li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul><blockquote><ul><li><strong>注</strong>：JDK 1.8 以后，接口里可以有静态方法和方法体了。</li><li><strong>注</strong>：JDK 1.8 以后，接口允许包含具体实现的方法，该方法称为”默认方法”，默认方法使用 default 关键字修饰。更多内容可参考 <a href="https://www.runoob.com/java/java8-default-methods.html" target="_blank" rel="noopener">Java 8 默认方法</a>。</li><li><strong>注</strong>：JDK 1.9 以后，允许将方法定义为 private，使得某些复用的代码不会把方法暴露出去。更多内容可参考 <a href="https://www.runoob.com/java/java9-private-interface-methods.html" target="_blank" rel="noopener">Java 9 私有接口方法</a>。</li></ul></blockquote><h2 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[权限修饰符] interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NameOfInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">//任何类型 final, static 字段</span></span><br><span class="line">   <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口有以下特性：</strong></p><ul><li>接口是隐式抽象的，当声明一个接口的时候，不必使用<strong>abstract</strong>关键字。</li><li>接口中每一个方法也是隐式抽象的，声明时同样不需要<strong>abstract</strong>关键字。</li><li>接口中的方法都是公有的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a><strong>接口的实现</strong></h2><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</p><p>类使用implements关键字实现接口。在类声明中，Implements关键字放在class声明后面。</p><p>实现一个接口的语法，可以使用这个公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Mammal eats"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Mammal travels"</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> <span class="keyword">extends</span> <span class="title">BB</span> <span class="keyword">implements</span> <span class="title">CC</span>,<span class="title">DD</span>,<span class="title">EE</span></span>&#123;</span><br><span class="line">    <span class="comment">//实现所有的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重写接口中声明的方法时，需要注意以下规则：</strong></p><ul><li>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。</li><li>类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。</li><li>如果实现接口的类是抽象类，那么就没必要实现该接口的方法。</li></ul><p><strong>在实现接口的时候，也要注意一些规则：</strong></p><ul><li>一个类可以同时实现多个接口。</li><li>一个类只能继承一个类，但是能实现多个接口。</li><li>一个接口能继承另一个接口，这和类之间的继承比较相似。</li></ul><h2 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h2><p>一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名: Sports.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisitingTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Football.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfQuarter</span><span class="params">(<span class="keyword">int</span> quarter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Hockey.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfPeriod</span><span class="params">(<span class="keyword">int</span> period)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overtimePeriod</span><span class="params">(<span class="keyword">int</span> ot)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>Hockey接口自己声明了四个方法，从Sports接口继承了两个方法，这样，实现Hockey接口的类需要实现六个方法。</li><li>相似的，实现Football接口的类需要实现五个方法，其中两个来自于Sports接口。</li></ol></blockquote><h2 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h2><p>在Java中，类的多继承是不合法，但接口允许多继承。</p><p>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span>, <span class="title">Event</span></span></span><br></pre></td></tr></table></figure><h2 id="标记接口"><a href="#标记接口" class="headerlink" title="标记接口"></a>标记接口</h2><p>最常用的继承接口是没有包含任何方法的接口。</p><p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</p><p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p><p>例如：<code>java.awt.event</code>包中的 <code>MouseListener</code>接口继承的 <code>java.util.EventListener</code> 接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p><ul><li><p>建立一个公共的父接口：</p><p>正如<code>EventListener</code>接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了<code>EventListener</code>接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p></li><li><p>向一个类添加数据类型：</p><p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul><h2 id="接口匿名实现类"><a href="#接口匿名实现类" class="headerlink" title="接口匿名实现类"></a>接口匿名实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------</span><br><span class="line"><span class="number">1</span>.创建接口的非匿名实现类的非匿名对象</span><br><span class="line">AA aa = <span class="keyword">new</span> AA();</span><br><span class="line">mapper.checkAll(aa);</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="number">2</span>.创建接口的非匿名实现类的匿名对象</span><br><span class="line">mapper.checkAll(<span class="keyword">new</span> AA());</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="number">3</span>.创建接口的匿名实现类的非匿名对象</span><br><span class="line">AA aa = <span class="keyword">new</span> AA()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">mapper.checkAll(aa);</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="number">4</span>.创建接口的匿名实现类的匿名对象</span><br><span class="line">mapper.checkAll(<span class="keyword">new</span> AA()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">-------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java II </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础学习</title>
      <link href="/2021/07/19/Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/19/Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><h1 id="1-Java基础概述"><a href="#1-Java基础概述" class="headerlink" title="1.Java基础概述"></a>1.Java基础概述</h1><p><strong>1.简洁有效</strong></p><p>Java语言是一种相当简洁的“面向对象”的程序设计语言。Java语言克服了C++语言中的所有的难以理解和容易混淆的缺点，例如头文件、指针、结构、单元、运算符重载和虚拟基础类等。它更加严谨、简洁。</p><p><strong>2.可移植性</strong></p><p>Java语言最大的特点在于“一次编译，处处运行”，Java语言的执行基于java虚拟机的(JAVA Virtual Machine Jvm)运行，将源代码编译处字节码文件。在不同的操作系统上只需要与系统匹配的JVM就可以执行运行字节码文件，这样就降低了开发复杂度，提高了开发效率。</p><p><strong>3.面向对象</strong></p><p>面向对象是一种符合人类思维习惯的编程思想。现实生活中存在各种形态不同的事物，这些事物之间存在着各种各样的联系。在程序中使用对象来映射现实中的事物使用对象的关系来描述事物之间的联系，这种思想就是面向对象。而Java是一门面向对象的编程语言，并且有着更加良好的程序结构定义。</p><p><strong>4.垃圾回收</strong></p><p>垃圾指的是无用的内存回收，Java提供了垃圾回收机制( Garbage Collection,GC),利用GC机制 使得开发者在编写程序时只需考虑自身程序的合理性，而不用去关注GC问题，极大地简化了开发难度。</p><p><strong>5.引用传递</strong></p><p>Java避免使用复杂的指针，而使用更加简单的引用来代替指针。指针虽然是一种高效的内存处理模 式，但是其需要较强的逻辑分析能力。而Java在设计的时候充分地考虑到了这一点，所以开发者直接利 用引用就可以简化指针的处理。因此，引用也是在所有初学过程之中最为难以理解的部分</p><p><strong>6.适合分布式计算</strong></p><p>Java设计的初衷是为了更好地解决网络通信问题，所以Java语言非常适合于分布式计算程序的开发， 它不仅提供了简洁的 Socket开发支持、适合于公共网关接口( Common Gateway Interface,cGI)程序的 开发，还提供了对NIO、AO的支持，使得网络通信性能得到了强大的改善。</p><p><strong>7.健壮性</strong></p><p>java语言在进行编译时会进行严格的语法检查，可以是java的编译器是最“最严格”的编译器。在程序运行中可以通过合理的异常处理避免错误产生时的程序中断，从而保证java程序可以稳定运行。</p><p><strong>8. 多线程</strong></p><p>要理解线程，首先要理解并发的概念。并发是指在同一时间点，计算机可以同时执行多个任务。当前主流的操作系统，不管是Window系统，还是Linux系统，都是以多任务执行程序的。例如，我们可以在编写Java代码的同时听音乐、发送电子邮件等。在多任务系统中，每个独立执行的任务(应用程序)称为进程，多个任务可以并发执行。随着java语言不断的完成，java语言提供了JUC的多线程开发框架。降低开发者在使用多线程编程中的复杂程度。</p><p><strong>9. 安全性</strong></p><p>Java语言执行依赖于JVM解释字节码程序文件，而jvm拥有较高的安全性，同时随着java版本的不断更新，面对最新的安全隐患也可以及时更新处理。</p><p><strong>10.函数式编程</strong></p><p>Java语言中也对函数式编程有很好的支持(Lambda表达式)。利用函数式表达式编程可以更加简洁的实现程序代码的编写。</p><p><strong>JDK——&gt;JRE——&gt;JVM</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210711103226387.png" alt="image-20210711103226387"></p><h1 id="2-Java基本语法"><a href="#2-Java基本语法" class="headerlink" title="2.Java基本语法"></a>2.Java基本语法</h1><h2 id="2-1关键字"><a href="#2-1关键字" class="headerlink" title="2.1关键字"></a>2.1关键字</h2><p>关键字的定义和特点</p><p><strong>定义：</strong>被Java语言赋予了特殊含义，用作专门用途的字符串</p><p><strong>特点：</strong>关键字中所有字母都为小写</p><div class="table-container"><table><thead><tr><th style="text-align:left">数据类型</th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">interface</td><td style="text-align:left">enum</td><td style="text-align:left">byte</td><td style="text-align:left">short</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">long</td><td style="text-align:left">float</td><td style="text-align:left">double</td><td style="text-align:left">char</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">void</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>流程控制</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">if</td><td style="text-align:left">else</td><td style="text-align:left">switch</td><td style="text-align:left">case</td><td style="text-align:left">default</td></tr><tr><td style="text-align:left">while</td><td style="text-align:left">do</td><td style="text-align:left">for</td><td style="text-align:left">break</td><td style="text-align:left">continue</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>访问权限修饰符</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">protected</td><td style="text-align:left">public</td><td style="text-align:left"></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">定义类，函数，变量修饰符</th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">abstract</td><td style="text-align:left">final</td><td style="text-align:left">static</td><td style="text-align:left">synchronized</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>定义类与类之间的关系</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">extends</td><td style="text-align:left">implements</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>建立实例，引用实例，判断实例</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">new</td><td style="text-align:left">this</td><td style="text-align:left">super</td><td style="text-align:left">instanceof</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>异常处理</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">try</td><td style="text-align:left">catch</td><td style="text-align:left">finally</td><td style="text-align:left">throw</td><td style="text-align:left">throws</td></tr><tr><td style="text-align:left"><strong>包的关键字</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">import</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><strong>其他修饰符</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">native</td><td style="text-align:left">strictfp</td><td style="text-align:left">transient</td><td style="text-align:left">volatile</td><td style="text-align:left">assert</td></tr><tr><td style="text-align:left"><strong>定义数据类型值</strong></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">true</td><td style="text-align:left">false</td><td style="text-align:left">null</td><td style="text-align:left"></td></tr></tbody></table></div><h2 id="2-2保留字"><a href="#2-2保留字" class="headerlink" title="2.2保留字"></a>2.2保留字</h2><p>Java保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识需要避免使用<code>goto</code>、<code>const</code></p><h2 id="2-3标识符"><a href="#2-3标识符" class="headerlink" title="2.3标识符"></a>2.3标识符</h2><p>Java中，对于变量、常量、函数、语句块都有名字，统称为Java标识符。<br>◆对标识符的三点要求：<br>　●标识符由字母、数字、＿（下划线）、＄组成，不能以数字开头，不能用Java中的关键字<br>　●标识符采用有意义的简单命名<br>　●“＄”不要在代码中出现<br>◆驼峰命名法：</p><p>大驼峰：定义类、接口时使用<code>XxxYyyZzz</code><br>　 单词以大写字母开头，若有多个单词，每个单词首字母大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span></span></span><br></pre></td></tr></table></figure><p>小驼峰：定义变量、函数时使用  <code>xxxYyyZzz</code><br>　 若标识符只有一个单词，全小写；若标识符由多个单词组成，从第二个单词开始首字母大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mathScore = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>常量：所有单词全部大写，多个单词间以 _ 分隔<code>XXX_YYY_ZZZ</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER;</span><br></pre></td></tr></table></figure><h2 id="2-4变量"><a href="#2-4变量" class="headerlink" title="2.4变量"></a>2.4变量</h2><p><strong>变量的概念：</strong></p><ul><li>内存中的一个存储区域</li><li>该区域有自己的名称（变量名）和类型（数据类型）和值</li><li>Java中每个变量必须先声明，再赋值，然后才能使用</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>Java 中的变量有四个基本属性：变量名，数据类型，存储单元和变量值</li></ul><p><strong>变量名：</strong>合法的标识符</p><p><strong>变量的数据类型：</strong>可以是基本类型和引用类型（必须包含类型）</p><p><strong>存储单元：</strong>存储单元大小是由数据类型决定的，如：int 为4 个字节32 位</p><p><strong>变量值：</strong>在存储单元中放的就是变量值（如果是基本类型放的就是具体值，如果是引用类型放的是内存地址，如果null，表示不指向任何对象）</p><p>l 定义变量的格式：数据类型  变量名 = 初始化值</p><p>l 变量是通过使用变量名来访问这块区域的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;         <span class="comment">// 声明三个int型整数：a、 b、c</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>, e = <span class="number">4</span>, f = <span class="number">5</span>; <span class="comment">// 声明三个整数并赋予初值</span></span><br><span class="line"><span class="keyword">byte</span> z = <span class="number">22</span>;         <span class="comment">// 声明并初始化 z</span></span><br><span class="line">String s = <span class="string">"runoob"</span>;  <span class="comment">// 声明并初始化字符串 s</span></span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14159</span>; <span class="comment">// 声明了双精度浮点型变量 pi</span></span><br><span class="line"><span class="keyword">char</span> x = <span class="string">'x'</span>;        <span class="comment">// 声明变量 x 的值是字符 'x'。</span></span><br></pre></td></tr></table></figure><p><strong>Java语言支持的变量类型有：</strong></p><ul><li>类变量：独立于方法之外的变量，用 static 修饰。</li><li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li><li>局部变量：类的方法中的变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks=<span class="number">0</span>;    <span class="comment">// 类变量</span></span><br><span class="line">    String str=<span class="string">"hello world"</span>;  <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;  <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-局部变量"><a href="#Java-局部变量" class="headerlink" title="Java 局部变量"></a>Java 局部变量</h3><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li>访问修饰符不能用于局部变量；</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">"小狗的年龄是: "</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Test test = <span class="keyword">new</span> Test();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li><li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>访问修饰符可以修饰实例变量；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">   <span class="comment">// 这个实例变量对子类可见</span></span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="comment">// 私有变量，仅在该类可见</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="comment">//在构造器中对name赋值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> <span class="params">(String empName)</span></span>&#123;</span><br><span class="line">      name = empName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//设定salary的值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> empSal)</span></span>&#123;</span><br><span class="line">      salary = empSal;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 打印信息</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"名字 : "</span> + name );</span><br><span class="line">      System.out.println(<span class="string">"薪水 : "</span> + salary);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Employee empOne = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB"</span>);</span><br><span class="line">      empOne.setSalary(<span class="number">1000.0</span>);</span><br><span class="line">      empOne.printEmp();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul><li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li><li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li><li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="comment">//salary是静态的私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="comment">// DEPARTMENT是一个常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEPARTMENT = <span class="string">"开发人员"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    salary = <span class="number">10000</span>;</span><br><span class="line">        System.out.println(DEPARTMENT+<span class="string">"平均工资:"</span>+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5数据类型"><a href="#2-5数据类型" class="headerlink" title="2.5数据类型"></a>2.5数据类型</h2><p><strong>Java 基本数据类型</strong></p><p>变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。</p><p>内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/2020-10-27-code-mem.png" alt="img"></p><p>Java 的两大数据类型:</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><p>Java语言提供了八种基本类型。六种数字类型（<code>四个整数型</code>，<code>两个浮点型</code>），<code>一种字符类型</code>，还有<code>一种布尔型</code>。</p><p><strong>byte：</strong></p><ul><li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li><li>最小值是 <strong>-128（-2^7）</strong>；</li><li>最大值是 <strong>127（2^7-1）</strong>；</li><li>默认值是 <strong>0</strong>；</li><li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li><li>例子：byte a = 100，byte b = -50。</li></ul><p><strong>short：</strong></p><ul><li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li><li>最小值是 <strong>-32768（-2^15）</strong>；</li><li>最大值是 <strong>32767（2^15 - 1）</strong>；</li><li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li><li>默认值是 <strong>0</strong>；</li><li>例子：short s = 1000，short r = -20000。</li></ul><p><strong>int：</strong></p><ul><li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li><li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li><li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li><li>一般地整型变量默认为 int 类型；</li><li>默认值是 <strong>0</strong> ；</li><li>例子：int a = 100000, int b = -200000。</li></ul><p><strong>long：</strong></p><ul><li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li><li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li><li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li><li>这种类型主要使用在需要比较大整数的系统上；</li><li>默认值是 <strong>0L</strong>；</li><li>例子： long a = 100000L，Long b = -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li></ul><p><strong>float：</strong></p><ul><li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li><li>float 在储存大型浮点数组的时候可节省内存空间；</li><li>默认值是 <strong>0.0f</strong>；</li><li>浮点数不能用来表示精确的值，如货币；</li><li>例子：float f1 = 234.5f。</li></ul><p><strong>double：</strong></p><ul><li><p>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</p></li><li><p>浮点数的默认类型为 double 类型；</p></li><li><p>double类型同样不能表示精确的值，如货币；</p></li><li><p>默认值是 <strong>0.0d</strong>；</p></li><li><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double   d1  &#x3D; 7D ;</span><br><span class="line">double   d2  &#x3D; 7.; </span><br><span class="line">double   d3  &#x3D;  8.0; </span><br><span class="line">double   d4  &#x3D;  8.D; </span><br><span class="line">double   d5  &#x3D;  12.9867;</span><br></pre></td></tr></table></figure><p>7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</p></li></ul><p><strong>boolean：</strong></p><ul><li>boolean数据类型表示一位的信息；</li><li>只有两个取值：true 和 false；</li><li>这种类型只作为一种标志来记录 true/false 情况；</li><li>默认值是 <strong>false</strong>；</li><li>例子：boolean one = true。</li></ul><p><strong>char：</strong></p><ul><li>char 类型是一个单一的 16 位 Unicode 字符；</li><li>最小值是 <strong>\u0000</strong>（十进制等效值为 0）；</li><li>最大值是 <strong>\uffff</strong>（即为 65535）；</li><li>char 数据类型可以储存任何字符；</li><li>例子：char letter = ‘A’;。</li></ul><h3 id="Java各个类型的默认值"><a href="#Java各个类型的默认值" class="headerlink" title="Java各个类型的默认值"></a>Java各个类型的默认值</h3><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>数据类型</strong></th><th style="text-align:left"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:left">byte</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">0L</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">0.0f</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">0.0d</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">‘u0000’</td></tr><tr><td style="text-align:left">String (or any object)</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">false</td></tr></tbody></table></div><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul><li>在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li><li>对象、数组都是引用数据类型。</li><li><code>类 class</code>、<code>接口 interface</code>、<code>数组 []</code></li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li><li>例子：Site site = new Site(“Runoob”)。</li></ul><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><blockquote><p><code>byte,short,char</code>则三者之间运算会转化成<code>int类型</code>，如果转化成自身的类型<code>（byte,short,char）</code>，则需要进行强转操作</p></blockquote><p>转换从低级到高级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低  ------------------------------------&gt;  高</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>,<span class="keyword">short</span>,<span class="keyword">char</span>—&gt; <span class="keyword">int</span> —&gt; <span class="keyword">long</span>—&gt; <span class="keyword">float</span> —&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><p>数据类型转换必须满足如下规则：</p><ul><li><p>不能对boolean类型进行类型转换。</p></li><li><p>不能把对象类型转换成不相关类的对象。</p></li><li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p></li><li><p>转换过程中可能导致溢出或损失精度，例如：</p></li><li><p>```java<br>int i =128;<br>byte b = (byte)i;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</span><br><span class="line"></span><br><span class="line">- 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">  (int)23.7 &#x3D;&#x3D; 23;        </span><br><span class="line">  (int)-45.89f &#x3D;&#x3D; -45</span><br></pre></td></tr></table></figure></li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li><p>条件是转换的数据类型必须是兼容的。</p></li><li><p>格式：(type)value type是要强制类型转换后的数据类型 实例：</p></li><li><p>```java<br>public class QiangZhiZhuanHuan{</p><pre><code>public static void main(String[] args){    int i1 = 123;    byte b = (byte)i1;//强制类型转换为byte    System.out.println(&quot;int强制类型转换为byte后的值等于&quot;+b);}</code></pre><p>}</p><p>123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 隐含强制类型转换</span><br><span class="line"></span><br><span class="line">-  整数的默认类型是 int。</span><br><span class="line">-  小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。</span><br><span class="line"></span><br><span class="line">### 包装类(Wrapper)的使用</span><br><span class="line"></span><br><span class="line">- 针对八种基本数据类型定义相应的引用类型—包装类（封装类） </span><br><span class="line">- 有了类的特点，就可以调用类中的方法，Java才是真正的面向对象</span><br><span class="line"></span><br><span class="line">**包装类和基本数据类型的关系**</span><br><span class="line"></span><br><span class="line">![image-20210716191554780](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;eternal0918&#x2F;mdimages.github.io&#x2F;img&#x2F;image-20210716191554780.png)</span><br><span class="line"></span><br><span class="line">**包装类的基本操作**</span><br><span class="line"></span><br><span class="line">![img](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;eternal0918&#x2F;mdimages.github.io&#x2F;img&#x2F;1504650-20190511210543886-182915236.png)</span><br><span class="line"></span><br><span class="line">**基本数据类型和字符串的转换**</span><br><span class="line"></span><br><span class="line">1.Integer.toString() 基本数据类型转字符串</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">int t1 &#x3D; 2;</span><br><span class="line">String t2 &#x3D; Integer.toString(t1);</span><br></pre></td></tr></table></figure></li></ul><p>2.Integer.parseInt() 字符串转基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String t2 = <span class="string">"2"</span>;</span><br><span class="line"><span class="keyword">int</span> t3 = Integer.parseInt(t2);</span><br></pre></td></tr></table></figure><p>3.Integer.valueOf() 先将String对象转换成integer对象,Integer对象自动转换成int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String t2 = <span class="string">"2"</span>;</span><br><span class="line"><span class="keyword">int</span> t4 = Integer.valueOf(t2);</span><br></pre></td></tr></table></figure><p><strong>基本数据类型和包装类的转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.自动装箱</span><br><span class="line"><span class="keyword">int</span> t1 = <span class="number">2</span>;</span><br><span class="line">Integer t2 = t1;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.手动装箱</span><br><span class="line">Integer t3 = <span class="keyword">new</span> Integer(t1);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.自动拆箱</span><br><span class="line"><span class="keyword">int</span> t4 = t2;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.手动拆箱</span><br><span class="line"><span class="keyword">int</span> t5 = t2.intValue();</span><br></pre></td></tr></table></figure><p><strong>自动装箱  /  自动拆箱</strong></p><p><strong>自动装箱：</strong>基本数据类型自动转换成包装类</p><p><strong>自动拆箱：</strong>包装类自动转换成基本数据类型</p><h2 id="2-6String类"><a href="#2-6String类" class="headerlink" title="2.6String类"></a>2.6String类</h2><p>字符串广泛应用 在 Java 编程中，在 Java 中<code>字符串属于对象</code>，Java 提供了 String 类来创建和操作字符串。</p><p>String类型变量的使用</p><ul><li>String属于引用数据类型，翻译为“字符串”</li><li>声明String类型变量时，使用一对””</li></ul><p><strong>创建字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"Runoob"</span>;</span><br></pre></td></tr></table></figure><p>代码中遇到字符串常量时，这里的值是 “<strong>Runoob</strong>“”，编译器会使用该值创建一个 String 对象。</p><p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p><p><strong>用构造函数创建字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str2=<span class="keyword">new</span> String(<span class="string">"Runoob"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"Runoob"</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s2 = <span class="string">"Runoob"</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s3 = s1;                    <span class="comment">// 相同引用</span></span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line">String s5 = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);   <span class="comment">// String 对象创建</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/java-string-1-2020-12-01.png" alt="img"></p><p><strong>注意:</strong>String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变。</p><p>如果需要对字符串做很多修改，那么应该选择使用 <a href="https://www.runoob.com/java/java-stringbuffer.html" target="_blank" rel="noopener">StringBuffer &amp; StringBuilder 类</a>。</p><p><strong>String方法</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">SN(序号)</th><th style="text-align:left">方法描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-charat.html" target="_blank" rel="noopener">char charAt(int index)</a> 返回指定索引处的 char 值。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-compareto.html" target="_blank" rel="noopener">int compareTo(Object o)</a> 把这个字符串和另一个对象比较。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-compareto.html" target="_blank" rel="noopener">int compareTo(String anotherString)</a> 按字典顺序比较两个字符串。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-comparetoignorecase.html" target="_blank" rel="noopener">int compareToIgnoreCase(String str)</a> 按字典顺序比较两个字符串，不考虑大小写。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-concat.html" target="_blank" rel="noopener">String concat(String str)</a> 将指定字符串连接到此字符串的结尾。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-contentequals.html" target="_blank" rel="noopener">boolean contentEquals(StringBuffer sb)</a> 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-copyvalueof.html" target="_blank" rel="noopener">static String copyValueOf(char[] data)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-copyvalueof.html" target="_blank" rel="noopener">static String copyValueOf(char[] data, int offset, int count)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-endswith.html" target="_blank" rel="noopener">boolean endsWith(String suffix)</a> 测试此字符串是否以指定的后缀结束。</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-equals.html" target="_blank" rel="noopener">boolean equals(Object anObject)</a> 将此字符串与指定的对象比较。</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-equalsignorecase.html" target="_blank" rel="noopener">boolean equalsIgnoreCase(String anotherString)</a> 将此 String 与另一个 String 比较，不考虑大小写。</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-getbytes.html" target="_blank" rel="noopener">byte[] getBytes()</a>  使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-getbytes.html" target="_blank" rel="noopener">byte[] getBytes(String charsetName)</a> 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-getchars.html" target="_blank" rel="noopener">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</a> 将字符从此字符串复制到目标字符数组。</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-hashcode.html" target="_blank" rel="noopener">int hashCode()</a> 返回此字符串的哈希码。</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-indexof.html" target="_blank" rel="noopener">int indexOf(int ch)</a> 返回指定字符在此字符串中第一次出现处的索引。</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-indexof.html" target="_blank" rel="noopener">int indexOf(int ch, int fromIndex)</a> 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-indexof.html" target="_blank" rel="noopener">int indexOf(String str)</a>  返回指定子字符串在此字符串中第一次出现处的索引。</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-indexof.html" target="_blank" rel="noopener">int indexOf(String str, int fromIndex)</a> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-intern.html" target="_blank" rel="noopener">String intern()</a>  返回字符串对象的规范化表示形式。</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-lastindexof.html" target="_blank" rel="noopener">int lastIndexOf(int ch)</a>  返回指定字符在此字符串中最后一次出现处的索引。</td></tr><tr><td style="text-align:left">22</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-lastindexof.html" target="_blank" rel="noopener">int lastIndexOf(int ch, int fromIndex)</a> 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td></tr><tr><td style="text-align:left">23</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-lastindexof.html" target="_blank" rel="noopener">int lastIndexOf(String str)</a> 返回指定子字符串在此字符串中最右边出现处的索引。</td></tr><tr><td style="text-align:left">24</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-lastindexof.html" target="_blank" rel="noopener">int lastIndexOf(String str, int fromIndex)</a>  返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td></tr><tr><td style="text-align:left">25</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-length.html" target="_blank" rel="noopener">int length()</a> 返回此字符串的长度。</td></tr><tr><td style="text-align:left">26</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-matches.html" target="_blank" rel="noopener">boolean matches(String regex)</a> 告知此字符串是否匹配给定的正则表达式。</td></tr><tr><td style="text-align:left">27</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-regionmatches.html" target="_blank" rel="noopener">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td style="text-align:left">28</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-regionmatches.html" target="_blank" rel="noopener">boolean regionMatches(int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td style="text-align:left">29</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-replace.html" target="_blank" rel="noopener">String replace(char oldChar, char newChar)</a> 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-replaceall.html" target="_blank" rel="noopener">String replaceAll(String regex, String replacement)</a> 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td style="text-align:left">31</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-replacefirst.html" target="_blank" rel="noopener">String replaceFirst(String regex, String replacement)</a>  使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr><tr><td style="text-align:left">32</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-split.html" target="_blank" rel="noopener">String[] split(String regex)</a> 根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td style="text-align:left">33</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-split.html" target="_blank" rel="noopener">String[] split(String regex, int limit)</a> 根据匹配给定的正则表达式来拆分此字符串。</td></tr><tr><td style="text-align:left">34</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-startswith.html" target="_blank" rel="noopener">boolean startsWith(String prefix)</a> 测试此字符串是否以指定的前缀开始。</td></tr><tr><td style="text-align:left">35</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-startswith.html" target="_blank" rel="noopener">boolean startsWith(String prefix, int toffset)</a> 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</td></tr><tr><td style="text-align:left">36</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-subsequence.html" target="_blank" rel="noopener">CharSequence subSequence(int beginIndex, int endIndex)</a>  返回一个新的字符序列，它是此序列的一个子序列。</td></tr><tr><td style="text-align:left">37</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-substring.html" target="_blank" rel="noopener">String substring(int beginIndex)</a> 返回一个新的字符串，它是此字符串的一个子字符串。</td></tr><tr><td style="text-align:left">38</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-substring.html" target="_blank" rel="noopener">String substring(int beginIndex, int endIndex)</a> 返回一个新字符串，它是此字符串的一个子字符串。</td></tr><tr><td style="text-align:left">39</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-tochararray.html" target="_blank" rel="noopener">char[] toCharArray()</a> 将此字符串转换为一个新的字符数组。</td></tr><tr><td style="text-align:left">40</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-tolowercase.html" target="_blank" rel="noopener">String toLowerCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td style="text-align:left">41</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-tolowercase.html" target="_blank" rel="noopener">String toLowerCase(Locale locale)</a>  使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td style="text-align:left">42</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-tostring.html" target="_blank" rel="noopener">String toString()</a>  返回此对象本身（它已经是一个字符串！）。</td></tr><tr><td style="text-align:left">43</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-touppercase.html" target="_blank" rel="noopener">String toUpperCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td style="text-align:left">44</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-touppercase.html" target="_blank" rel="noopener">String toUpperCase(Locale locale)</a> 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td style="text-align:left">45</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-trim.html" target="_blank" rel="noopener">String trim()</a> 返回字符串的副本，忽略前导空白和尾部空白。</td></tr><tr><td style="text-align:left">46</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-valueof.html" target="_blank" rel="noopener">static String valueOf(primitive data type x)</a> 返回给定data type类型x参数的字符串表示形式。</td></tr><tr><td style="text-align:left">47</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-contains.html" target="_blank" rel="noopener">contains(CharSequence chars)</a> 判断是否包含指定的字符系列。</td></tr><tr><td style="text-align:left">48</td><td style="text-align:left"><a href="https://www.runoob.com/java/java-string-isempty.html" target="_blank" rel="noopener">isEmpty()</a> 判断字符串是否为空。</td></tr></tbody></table></div><h2 id="2-7运算符"><a href="#2-7运算符" class="headerlink" title="2.7运算符"></a>2.7运算符</h2><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p><p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加法 - 相加运算符两侧的值</td><td style="text-align:left">A + B 等于 30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减法 - 左操作数减去右操作数</td><td style="text-align:left">A – B 等于 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘法 - 相乘操作符两侧的值</td><td style="text-align:left">A * B等于200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除法 - 左操作数除以右操作数</td><td style="text-align:left">B / A等于2</td></tr><tr><td style="text-align:left">％</td><td style="text-align:left">取余 - 左操作数除以右操作数的余数</td><td style="text-align:left">B%A等于0</td></tr><tr><td style="text-align:left">++</td><td style="text-align:left">自增: 操作数的值增加1</td><td style="text-align:left">B++ 或 ++B 等于 21</td></tr><tr><td style="text-align:left">—</td><td style="text-align:left">自减: 操作数的值减少1</td><td style="text-align:left">B— 或 —B 等于 19</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">交换两个变量的值</span><br><span class="line"><span class="keyword">int</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num2=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：定义临时变量，安全，也可用于String类型</span></span><br><span class="line"><span class="keyword">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：不用，因为会导致数据溢出，得到的结果超出数据类型长度，且不适用与String类型</span></span><br><span class="line">num1 = num1 + num2;</span><br><span class="line">num2 = num1 - num2;</span><br><span class="line">num1 = num1 - num2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：使用位运算 ,</span></span><br><span class="line">num1 = num1 ^ num2;  <span class="number">1010</span> ^ <span class="number">10100</span> = <span class="number">11110</span> = <span class="number">30</span></span><br><span class="line">num2 = num1 ^ num2;  <span class="number">11110</span> ^ <span class="number">10100</span> = <span class="number">01010</span> = <span class="number">10</span></span><br><span class="line">num1 = num1 ^ num2;  <span class="number">11110</span> ^ <span class="number">1010</span> = <span class="number">10100</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>下表为Java支持的关系运算符</p><p>表格中的实例整数变量A的值为10，变量B的值为20：</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">（A == B）为假。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A&gt; B）为假。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A &lt;B）为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A&gt; = B）为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A &lt;= B）为真。</td></tr></tbody></table></div><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A | B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A ^ B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~A= <span class="number">1100</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将整数转化为16进制</span></span><br><span class="line">        <span class="comment">// 47: 0010 1111</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">47</span>;</span><br><span class="line">        <span class="comment">//先获取后四位的值，这里的15是 1111 </span></span><br><span class="line">        <span class="keyword">int</span> n1 = num &amp; <span class="number">15</span>;</span><br><span class="line">        System.out.println(<span class="string">"n1:"</span> + n1);</span><br><span class="line">        <span class="comment">//判断后四位的十进制值是否大于9，若大于9则从10开始也就是A继续加数</span></span><br><span class="line">        String j=(n1&gt;<span class="number">9</span>)?(<span class="keyword">char</span>)(n1-<span class="number">10</span>+<span class="string">'A'</span>)+<span class="string">""</span>:n1+<span class="string">""</span>;</span><br><span class="line">        <span class="comment">//右移四位，取前面的值</span></span><br><span class="line">        num = num &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = num &amp; <span class="number">15</span>;</span><br><span class="line">        System.out.println(<span class="string">"n2;"</span> + n2);</span><br><span class="line">        String b=(n2&gt;<span class="number">9</span>)?(<span class="keyword">char</span>)(n2-<span class="number">10</span>+<span class="string">'A'</span>)+<span class="string">""</span>:n2+<span class="string">""</span>;</span><br><span class="line">        System.out.println(b+j);</span><br><span class="line"><span class="comment">//结果为：2F</span></span><br></pre></td></tr></table></figure><p>位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：</p><p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">＆</td><td style="text-align:left">如果相对应位都是1，则结果为1，否则为0</td><td style="text-align:left">（A＆B），得到12，即0000 1100</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left"></td><td style="text-align:left">如果相对应位都是 0，则结果为 0，否则为 1</td><td>（A \</td><td>B）得到61，即 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">如果相对应位值相同，则结果为0，否则为1</td><td style="text-align:left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td style="text-align:left">〜</td><td style="text-align:left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td style="text-align:left">（〜A）得到-61，即1100 0011</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td style="text-align:left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td style="text-align:left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td style="text-align:left">&gt;&gt;&gt;</td><td style="text-align:left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td style="text-align:left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;:右移表示除<span class="number">2</span>^n</span><br><span class="line">&lt;&lt;:左移表示乘<span class="number">2</span>^n</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">最高效的计算方式 <span class="number">60</span>*<span class="number">64</span>=？</span><br><span class="line"></span><br><span class="line"><span class="number">60</span>&lt;&lt;<span class="number">6</span>    =   <span class="number">60</span>×<span class="number">2</span>的<span class="number">6</span>次方</span><br><span class="line"><span class="number">60</span>&gt;&gt;<span class="number">6</span>    =   <span class="number">60</span>÷<span class="number">2</span>的<span class="number">6</span>次方</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td style="text-align:left">（A &amp;&amp; B）为假。</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">\</td><td style="text-align:left"></td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td>（A \</td><td>\</td><td>B）为真。</td></tr><tr><td style="text-align:left">！</td><td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td style="text-align:left">！（A &amp;&amp; B）为真。</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">a &amp;&amp; b = <span class="keyword">false</span></span><br><span class="line">a || b = <span class="keyword">true</span></span><br><span class="line">!(a &amp;&amp; b) = <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p><code>&amp;&amp;</code>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><p><code>||</code>当符号左边为true时，<code>|</code>会继续执行符号右边的运算，而<code>||</code>则不再执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuoJi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">boolean</span> b = (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"使用短路逻辑运算符的结果为"</span>+b);</span><br><span class="line">        System.out.println(<span class="string">"a的结果为"</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用短路逻辑运算符的结果为false</span></span><br><span class="line"><span class="comment">a的结果为5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><em>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</em></p></blockquote><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>下面是Java语言支持的赋值运算符：</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td style="text-align:left">C = A + B将把A + B得到的值赋给C</td></tr><tr><td style="text-align:left">+ =</td><td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td style="text-align:left">C + = A等价于C = C + A</td></tr><tr><td style="text-align:left">- =</td><td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td style="text-align:left">C - = A等价于C = C - A</td></tr><tr><td style="text-align:left">* =</td><td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td style="text-align:left">C <em> = A等价于C = C </em> A</td></tr><tr><td style="text-align:left">/ =</td><td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td style="text-align:left">C / = A，C 与 A 同类型时等价于 C = C / A</td></tr><tr><td style="text-align:left">（％）=</td><td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td style="text-align:left">C％= A等价于C = C％A</td></tr><tr><td style="text-align:left">&lt;&lt; =</td><td style="text-align:left">左移位赋值运算符</td><td style="text-align:left">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left">&gt;&gt; =</td><td style="text-align:left">右移位赋值运算符</td><td style="text-align:left">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left">＆=</td><td style="text-align:left">按位与赋值运算符</td><td style="text-align:left">C＆= 2等价于C = C＆2</td></tr><tr><td style="text-align:left">^ =</td><td style="text-align:left">按位异或赋值操作符</td><td style="text-align:left">C ^ = 2等价于C = C ^ 2</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">=</td><td style="text-align:left">按位或赋值操作符</td><td>C \</td><td>= 2等价于C = C \</td><td>2</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = a + b = <span class="number">30</span></span><br><span class="line">c += a  = <span class="number">40</span></span><br><span class="line">c -= a = <span class="number">30</span></span><br><span class="line">c *= a = <span class="number">300</span></span><br><span class="line">c /= a = <span class="number">1</span></span><br><span class="line">c %= a  = <span class="number">5</span></span><br><span class="line">c &lt;&lt;= <span class="number">2</span> = <span class="number">20</span></span><br><span class="line">c &gt;&gt;= <span class="number">2</span> = <span class="number">5</span></span><br><span class="line">c &gt;&gt;= <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">c &amp;= a  = <span class="number">0</span></span><br><span class="line">c ^= a   = <span class="number">10</span></span><br><span class="line">c |= a   = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">variable x = (expression) ? value <span class="keyword">if</span> <span class="keyword">true</span> : value <span class="keyword">if</span> <span class="keyword">false</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">"Value of b is : "</span> +  b );</span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">"Value of b is : "</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p>instanceof运算符使用格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (<span class="class"><span class="keyword">class</span>/<span class="title">interface</span> <span class="title">type</span>)</span></span><br></pre></td></tr></table></figure><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"James"</span>;</span><br><span class="line"><span class="keyword">boolean</span> result = name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Vehicle a = <span class="keyword">new</span> Car();</span><br><span class="line">      <span class="keyword">boolean</span> result =  a <span class="keyword">instanceof</span> Car;</span><br><span class="line">      System.out.println( result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="2-8流程控制"><a href="#2-8流程控制" class="headerlink" title="2.8流程控制"></a>2.8流程控制</h2><ul><li><strong>分支结构</strong></li><li><strong>循环结构</strong></li><li><strong>顺序结构</strong></li></ul><h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><p>一个 if 语句包含一个布尔表达式和一条或多条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if…else-if…else-语句"><a href="#if…else-if…else-语句" class="headerlink" title="if…else if…else 语句"></a>if…else if…else 语句</h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p><p>使用 if，else if，else 语句的时候，需要注意下面几点：</p><ul><li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li><li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li><li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//如果以上布尔表达式都不为true执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">////如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">   <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="comment">////如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-case-语句"><a href="#switch-case-语句" class="headerlink" title="switch case 语句"></a>switch case 语句</h3><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><p>switch中的表达式只能是如下六种数据类型之一：<code>byte,short,char,int,枚举类型（ JDK 5.0 ）,String类型( JDK 7.0 )</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">char</span> grade = <span class="string">'C'</span>;</span><br><span class="line">      <span class="keyword">switch</span>(grade)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'A'</span> :</span><br><span class="line">            System.out.println(<span class="string">"优秀"</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'B'</span> :</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'C'</span> :</span><br><span class="line">            System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'D'</span> :</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'F'</span> :</span><br><span class="line">            System.out.println(<span class="string">"你需要再努力努力"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span> :</span><br><span class="line">            System.out.println(<span class="string">"未知等级"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"你的等级是 "</span> + grade);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch case 语句有如下规则：</p><ul><li>switch 语句中的变量类型可以是：<code>byte、short、int 或者 char</code>。从 Java SE 7 开始，switch 支持字符串 <code>String</code>类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要<code>比较的值和冒号</code>。</li><li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>增强 for 循环</code></p><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p><p>Java 增强 for 循环语法格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) &#123;</span><br><span class="line">  <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>do…while 循环</code></p><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p><h3 id="中止语句"><a href="#中止语句" class="headerlink" title="中止语句"></a>中止语句</h3><p><strong>关键字后面不能声明执行语句</strong></p><p><code>break</code>  结束当前循环     （跳出该语句，继续执行下面的语句）</p><p><code>continue</code>    结束当次循环 （结束操作，且不在执行下面的语句，类似于return终止本次运行）</p><h1 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h1><h2 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[] myList;         <span class="comment">// 首选的方法 </span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">double</span> myList[];         <span class="comment">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>使用new操作符来创建数组，数组变量的声明，和创建数组可以用一条语句完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态初始化：数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">String[] arrays = <span class="keyword">new</span> String [<span class="number">10</span>];</span><br><span class="line">...</span><br><span class="line"><span class="comment">//对数组进行赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态初始化：数组的初始化和数组元素的赋值操作同时进行</span></span><br><span class="line">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">int</span>[] ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;</span><br></pre></td></tr></table></figure><p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 ids.length-1。</p><h2 id="处理数组"><a href="#处理数组" class="headerlink" title="处理数组"></a>处理数组</h2><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">         System.out.println(myList[i] + <span class="string">" "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 计算所有元素的总和</span></span><br><span class="line">      <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Total is "</span> + total);</span><br><span class="line">      <span class="comment">// 查找最大元素</span></span><br><span class="line">      <span class="keyword">double</span> max = myList[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Max is "</span> + max);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1.9</span></span><br><span class="line"><span class="number">2.9</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line"><span class="number">3.5</span></span><br><span class="line">Total is <span class="number">11.7</span></span><br><span class="line">Max is <span class="number">3.5</span></span><br></pre></td></tr></table></figure><h2 id="For-Each-循环"><a href="#For-Each-循环" class="headerlink" title="For-Each 循环"></a>For-Each 循环</h2><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(type element: array)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">double</span> element: myList) &#123;</span><br><span class="line">         System.out.println(element);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays工具类的使用"><a href="#Arrays工具类的使用" class="headerlink" title="Arrays工具类的使用"></a>Arrays工具类的使用</h2><p>Arrays类中的方法都是<code>static修饰的静态方法</code>,在使用的时候可以<code>直接使用类名进行调用,而&quot;不用&quot;使用对象来调用</code>(注意:是”不用” 而不是 “不能”)</p><h3 id="1-toString-方法"><a href="#1-toString-方法" class="headerlink" title="1.toString()方法"></a><strong>1.toString()方法</strong></h3><p>把数组转换为字符串形式并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(a));   </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span>  <span class="number">7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="2-binarySearch-方法"><a href="#2-binarySearch-方法" class="headerlink" title="2.binarySearch()方法　"></a><strong>2.binarySearch()方法</strong>　</h3><p>在数组中查找指定元素并返回其下标</p><p>注意：使用二分搜索法来搜索指定的数组，以获得指定的值。必须在进行此调用之前对数组进行排序(通过sort方法等)。如果没有对数组进行排序，则结果是不确定的。</p><p>如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> bs = Arrays.binarySearch(a, <span class="number">7</span>);</span><br><span class="line">        System.out.println(bs);  </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="3-sort-方法"><a href="#3-sort-方法" class="headerlink" title="3.sort()方法"></a><strong>3.sort()方法</strong></h3><p>把数据中的元素进行排序</p><p><code>sort(int[] a)</code>  对指定的 int 型数组按数字升序进行排序　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"before"</span>+Arrays.toString(a));</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">System.out.println(<span class="string">"after"</span>+Arrays.toString(a));</span><br></pre></td></tr></table></figure><p><code>sort(byte[] a, int fromIndex, int toIndex)</code>   对指定 byte 型数组的指定范围按数字升序进行排序。</p><p>参数概述：　</p><ul><li><code>a</code> - 要排序的数组</li><li><code>fromIndex</code> - 要排序的第一个元素的索引（包括）</li><li><code>toIndex</code> - 要排序的最后一个元素的索引（不包括）</li></ul><p><code>sort(T[ ] a, Comparator&lt;? super T&gt; c)</code> 根据指定比较器产生的顺序对指定对象数组进行排序</p><h3 id="4-equals-方法"><a href="#4-equals-方法" class="headerlink" title="4.equals()方法"></a>4.equals()方法</h3><p> 比较俩个数组是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> eq = Arrays.equals(a, b);</span><br><span class="line">        System.out.println(eq);</span><br><span class="line">        System.out.println(a==b);</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>注意:</p><ul><li><code>==</code>比较的是引用所指向对象的内存地址</li><li><code>Arrays.equals</code>方法比较是俩个数组中的内容</li></ul><h3 id="5-fill-方法"><a href="#5-fill-方法" class="headerlink" title="5.fill()方法"></a>5.fill()方法</h3><p>用指定值去填充数组对象</p><p><code>fill(int[] a, int val)</code>将指定的 int 值分配给指定 int 型数组的每个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        Arrays.fill(a, <span class="number">666</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"><span class="number">666</span>, <span class="number">666</span>, <span class="number">666</span>, <span class="number">666</span>, <span class="number">666</span></span><br></pre></td></tr></table></figure><p><code>fill(int[] a, int fromIndex, int toIndex, int val)</code>   将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。</p><p>参数：</p><ul><li><code>a</code> - 要填充的数组</li><li><code>fromIndex</code> - 要使用指定值填充的第一个元素的索引（包括）</li><li><code>toIndex</code> - 要使用指定值填充的最后一个元素的索引（不包括）</li><li><code>val</code> - 要存储在数组所有元素中的值 </li></ul><h3 id="6-asList-方法"><a href="#6-asList-方法" class="headerlink" title="6.asList()方法"></a>6.asList()方法</h3><p>　可以把数组转换为List集合,返回一个受指定数组支持的固定大小的列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; list = Arrays.asList(a);</span><br></pre></td></tr></table></figure><h1 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h1><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3是行，4是列</span></span><br><span class="line">String str[][] = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String s[][] = <span class="keyword">new</span> String[<span class="number">2</span>][];</span><br><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"Good"</span>);</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">"Luck"</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"to"</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">"you"</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>] = <span class="keyword">new</span> String(<span class="string">"!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取二维数组长度</span></span><br><span class="line">System.out.println(s.length);<span class="comment">//该二维数组长度为2，只看最外层行</span></span><br><span class="line">System.out.println(s[<span class="number">0</span>].length);<span class="comment">//该二维数组长度为2，一共赋了两个值，00，01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组元素初始化：外层元素初始化：地址值； 内层元素初始化：null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);<span class="comment">//地址码</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">2</span>]);<span class="comment">// ！ 值</span></span><br></pre></td></tr></table></figure><p>解析：</p><p><strong>s[0]=new String[2]</strong> 和 <strong>s[1]=new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0=new String(“Good”)</strong> 等操作。</p><p>==<strong>Arrays 类</strong>==</p><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p><p>具有以下功能：</p><ul><li>给数组赋值：通过 fill 方法。</li><li>对数组排序：通过 sort 方法,按升序。</li><li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li><li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法和说明</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong><code>public static int binarySearch(Object[] a, Object key)</code> </strong>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong><code>public static boolean equals(long[] a, long[] a2)</code></strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong><code>public static void fill(int[] a, int val)</code></strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong><code>public static void sort(Object[] a)</code></strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr></tbody></table></div><p><strong>==注意==</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array1[] array2[];</span><br><span class="line">array1[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">//这里并不是将array1的值赋给array2，而是将array1的地址给了array2</span></span><br><span class="line">array2=array1;</span><br><span class="line"><span class="comment">//赋值，更改的是array1的值，array2并没有开辟新的内存地址,类似于创建快捷方式</span></span><br><span class="line">array2[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//打印输出array1：</span></span><br><span class="line"><span class="comment">//未修改前</span></span><br><span class="line"><span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span></span><br><span class="line"><span class="comment">//通过array2赋值后的array1</span></span><br><span class="line"><span class="number">1</span>，<span class="number">0</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//数组的赋值</span></span><br><span class="line">array2[]=<span class="keyword">new</span> <span class="keyword">int</span>[array1.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">    array2[i] = array1[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-数组算法"><a href="#5-数组算法" class="headerlink" title="5.数组算法"></a>5.数组算法</h1><h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><p>==直角三角形==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当i=0时，j=0；这个时候在第一行，打印输出1；</span></span><br><span class="line"><span class="comment">    当i=1时，j=0，这个时候在第二行，打印输出1；j=1，打印输出1；</span></span><br><span class="line"><span class="comment">    当i=2时，j=0，这个时候在第三行，打印输出1；j=1，打印输出2；j=2，打印输出1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    arr[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">            <span class="comment">//第一个和最后一个初始值为1，当j=0以及j=i的时候是首位两个位置</span></span><br><span class="line">            arr[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一行上的每一列进行输出</span></span><br><span class="line">        System.out.print(arr[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//换行打印输出</span></span><br><span class="line">    System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">3</span>    <span class="number">3</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">4</span>    <span class="number">6</span>    <span class="number">4</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">5</span>    <span class="number">10</span>    <span class="number">10</span>    <span class="number">5</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">6</span>    <span class="number">15</span>    <span class="number">20</span>    <span class="number">15</span>    <span class="number">6</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">7</span>    <span class="number">21</span>    <span class="number">35</span>    <span class="number">35</span>    <span class="number">21</span>    <span class="number">7</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">8</span>    <span class="number">28</span>    <span class="number">56</span>    <span class="number">70</span>    <span class="number">56</span>    <span class="number">28</span>    <span class="number">8</span>    <span class="number">1</span>    </span><br><span class="line"><span class="number">1</span>    <span class="number">9</span>    <span class="number">36</span>    <span class="number">84</span>    <span class="number">126</span>    <span class="number">126</span>    <span class="number">84</span>    <span class="number">36</span>    <span class="number">9</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure><p>==等腰三角形==</p><p>杨辉三角形第n层（顶层称第0层，第1行，第n层即第n+1行，此处n为包含0在内的自然数）正好对应于<a href="https://zh.wikipedia.org/wiki/二项式" target="_blank" rel="noopener">二项式</a><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a3d2a32d6b3eeff13df392a644c48a00a16891da" alt="\left(a+b\right)^">展开的系数。例如第二层1 2 1是幂指数为2的二项式<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a6503f65726de0cbccad0a167f274649a9a0d363" alt="\left(a+b\right)^2">展开形式<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9e6c57179b6cfcc57e76bb7e9f8e8368d4605ddc" alt="a^2+2ab+b^2">的系数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> rows = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">       <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">       System.out.format(<span class="string">"%"</span> + (rows - i) * <span class="number">2</span> + <span class="string">"s"</span>, <span class="string">""</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">           System.out.format(<span class="string">"%4d"</span>, num);</span><br><span class="line">           num = num * (i - j) / (j + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//换行打印输出</span></span><br><span class="line">       System.out.println(<span class="string">""</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="number">1</span></span><br><span class="line">                <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">              <span class="number">1</span>   <span class="number">2</span>   <span class="number">1</span></span><br><span class="line">            <span class="number">1</span>   <span class="number">3</span>   <span class="number">3</span>   <span class="number">1</span></span><br><span class="line">          <span class="number">1</span>   <span class="number">4</span>   <span class="number">6</span>   <span class="number">4</span>   <span class="number">1</span></span><br><span class="line">        <span class="number">1</span>   <span class="number">5</span>  <span class="number">10</span>  <span class="number">10</span>   <span class="number">5</span>   <span class="number">1</span></span><br><span class="line">      <span class="number">1</span>   <span class="number">6</span>  <span class="number">15</span>  <span class="number">20</span>  <span class="number">15</span>   <span class="number">6</span>   <span class="number">1</span></span><br><span class="line">    <span class="number">1</span>   <span class="number">7</span>  <span class="number">21</span>  <span class="number">35</span>  <span class="number">35</span>  <span class="number">21</span>   <span class="number">7</span>   <span class="number">1</span></span><br><span class="line">  <span class="number">1</span>   <span class="number">8</span>  <span class="number">28</span>  <span class="number">56</span>  <span class="number">70</span>  <span class="number">56</span>  <span class="number">28</span>   <span class="number">8</span>   <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   <span class="number">9</span>  <span class="number">36</span>  <span class="number">84</span> <span class="number">126</span> <span class="number">126</span>  <span class="number">84</span>  <span class="number">36</span>   <span class="number">9</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="回形打印二维数组"><a href="#回形打印二维数组" class="headerlink" title="回形打印二维数组"></a>回形打印二维数组</h2><p>==<strong>一、问题描述</strong>==</p><blockquote><p>输入两个数字 行数和列数，回形打印出一个二维数组，大小按回形的方向依次递增。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如:  输入:  4 、5</span><br><span class="line">输出: </span><br><span class="line">0   1   2   3 </span><br><span class="line">13  14  15  4</span><br><span class="line">12  19  16  5</span><br><span class="line">11  18  17  6</span><br><span class="line">10  9   8   7</span><br></pre></td></tr></table></figure><p>==<strong>二、解题思路</strong>==</p><blockquote><p>顺着数字的轨迹，你会发现他的打印是一层一层的，即:第一层0-13、第二层为14-19。所以这个问题我们可以将他拆分开来，采用递归来做。</p></blockquote><h2 id="数组的反转、查找搜索"><a href="#数组的反转、查找搜索" class="headerlink" title="数组的反转、查找搜索"></a>数组的反转、查找搜索</h2><p><code>1.数组的反转</code></p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>&#125;;</span><br><span class="line"><span class="comment">//            中间折半，进行一次交换即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            定义一个临时变量，这里直接保存arr当前前半部的数据</span></span><br><span class="line">            String temp = arr[i];</span><br><span class="line"><span class="comment">//            对arr的前半部进行交换赋值</span></span><br><span class="line">            arr[i] = arr[arr.length - i - <span class="number">1</span>];</span><br><span class="line"><span class="comment">//            对arr的后半部与与原来保存的前半部进行交换赋值</span></span><br><span class="line">            arr[arr.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">    String temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        对整个arr[i]进行打印输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2.数组的查找</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性查找</span></span><br><span class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>&#125;;</span><br><span class="line">String dest = <span class="string">"e"</span>;</span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dest.equals(arr[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">"找到了指定的元素,下标位置为："</span> + i);</span><br><span class="line">        isFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFlag) &#123;</span><br><span class="line">    System.out.println(<span class="string">"没有找到"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找（折半查找）</span></span><br><span class="line"><span class="comment">//前提：所要查找的数组必须有序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">100</span>, -<span class="number">77</span>, -<span class="number">30</span>, -<span class="number">15</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">108</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dest = -<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr.length - <span class="number">1</span>;<span class="comment">//初始的末尾索引</span></span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (head &lt;= end) &#123;</span><br><span class="line"><span class="comment">//找到中间的数</span></span><br><span class="line"><span class="keyword">int</span> middle = (head + end) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//判断中间的那个数值与指定的是否相等</span></span><br><span class="line"><span class="keyword">if</span> (dest == arr[middle]) &#123;</span><br><span class="line">System.out.println(<span class="string">"找到指定的元素，下标位置："</span> + middle);</span><br><span class="line">isFlag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[middle] &gt; dest) &#123;</span><br><span class="line"><span class="comment">//如果中间的那个数值大于要找的，说明给定的数值在前半部分。那么就减去后半部分，重新在给定区间内进行查找</span></span><br><span class="line">end = middle - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果中间的那个数值小于要找的，说明给定的数值在后半部分，那么就减去前半部分，重新查找</span></span><br><span class="line"><span class="comment">//arr[middle] &lt; dest</span></span><br><span class="line">head = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFlag) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有找到"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><ul><li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。 </li><li><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/849589-20190306165258970-1789860540.png" alt="img"></li><li>算法复杂度</li><li><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/849589-20180402133438219-1946132192.png" alt="img"></li></ul><p>相关概念：</p><ul><li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li><li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li><strong>空间复杂度：</strong>是指算法在计算机</li></ul><p>内执行时所需存储空间的度量，它也是数据规模n的函数。 </p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><code>冒泡排序</code></h3><blockquote><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p></blockquote><p><strong>冒泡排序对数组的重新排列是从末尾开始，即按从后往前的方向，将数组元素从大到小排列</strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/849589-20171015223238449-2146169197.gif" alt="img"></p><p>数据执行流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">24124</span>, <span class="number">342342</span>, <span class="number">454</span>, <span class="number">4534</span>, <span class="number">5</span>, <span class="number">2342</span>, <span class="number">23421</span>,&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 第一波循环：共发生7次检查对比，</span></span><br><span class="line"><span class="comment">            * 第一次，检查0与1的值，未发生交换</span></span><br><span class="line"><span class="comment">            * 第二次，检查1与2的值，未发生交换</span></span><br><span class="line"><span class="comment">            * 第三次，检查2与3的值，发生交换</span></span><br><span class="line"><span class="comment">            * 第四次，检查3与4的值，发生交换</span></span><br><span class="line"><span class="comment">            * 第五次，检查4与5的值，发生交换</span></span><br><span class="line"><span class="comment">            * 第六次，检查5与6的值，发生交换</span></span><br><span class="line"><span class="comment">            * 第七次，检查6与7的值，发生交换</span></span><br><span class="line"><span class="comment">            * 第二波循环：共发生6此检查对比</span></span><br><span class="line"><span class="comment">            * ......</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="comment">//                从小到大排序，前面比后面的大，交换一下数值</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                打印输出每次对比后的数组内容</span></span><br><span class="line"><span class="comment">//                for (int k = 0; k &lt; arr.length; k++) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(arr[k] + "\t");</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                System.out.println("");</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        打印输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span><span class="number">123</span><span class="number">454</span><span class="number">2342</span><span class="number">4534</span><span class="number">23421</span><span class="number">24124</span><span class="number">342342</span></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><code>快速排序</code></h3><blockquote><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p></blockquote><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/849589-20171015230936371-1413523412.gif" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传递一个整型数组集合</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">24124</span>, <span class="number">342342</span>, <span class="number">454</span>, <span class="number">4534</span>, <span class="number">5</span>, <span class="number">2342</span>, <span class="number">23421</span>&#125;;</span><br><span class="line"><span class="comment">//        调用方法</span></span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        遍历打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   整型数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右下标</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        在整个循环中不允许出现，left大于right，出现即终止程序</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *      base  基准元素</span></span><br><span class="line"><span class="comment">         *      arr[left]数组最左边的值赋给base</span></span><br><span class="line"><span class="comment">         *      同时定义 i 和 j 来表示左下标和右下标</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">int</span> base = arr[left];</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *      i！=j表示：当左下标和右下标不等时，分别执行 从左往右查找和从右往左查找</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line"><span class="comment">//            先进行从右往左查找，右边查找的值与基准元素进行对比，如果所查找的值小于基准元素，则右下标停止在当前值的下标，退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt;= base &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            右查找结束后，开始左查找，左边查找的值与基准元素进行对比，如果所查找的值大于基准元素，则左下标停止在当前值的下标，退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt;= base &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            设置一个临时变量，供数据进行交换。    通过上面两个循环找到的下标，对数组指定位置的数据进行交换</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 将左查找的数据赋给临时变量temp;</span></span><br><span class="line"><span class="comment">             * 再将右查找的数据赋给左查找指定位置的数组arr[i];</span></span><br><span class="line"><span class="comment">             * 之后再将刚刚保存再临时变量里面的arr[i]的数据赋值给右查找指定位置的数组arr[j];</span></span><br><span class="line"><span class="comment">             * 至此完成数组指定位置的数据交换.</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           这里就是当左下标与右下标相同的时候，i=j;</span></span><br><span class="line"><span class="comment">           当前的位置 arr[i]==arr[j]；这两个时相同的，因为下标相同</span></span><br><span class="line"><span class="comment">           这个时候交换基准元素和相遇的下标所对应的值</span></span><br><span class="line"><span class="comment">           由于left一直为0，所以 arr[left]就是基准元素（最左边的数据常定义为基准元素）</span></span><br><span class="line"><span class="comment">           将当前位置的值赋值给新定义的基准元素</span></span><br><span class="line"><span class="comment">           将老基准元素赋值给前下标的所在位置。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        arr[left] = arr[i];</span><br><span class="line">        arr[i] = base;</span><br><span class="line"><span class="comment">//        下面进行回调，同样的步骤。</span></span><br><span class="line"><span class="comment">//        执行左半部</span></span><br><span class="line">        sort(arr, left, i - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        执行右半部</span></span><br><span class="line">        sort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终结果：5123454234245342342124124</span></span><br></pre></td></tr></table></figure><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6.异常处理"></a>6.异常处理</h1><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p><p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p><p>异常发生的原因有很多，通常包含以下几大类：</p><ul><li>用户输入了非法数据。</li><li>要打开的文件不存在。</li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul><p><strong>三种类型异常</strong></p><ul><li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/690102-20160728164909622-1770558953.png" alt="img"></p><h2 id="Error层次"><a href="#Error层次" class="headerlink" title="Error层次"></a>Error层次</h2><p>Java虚拟机无法解决的严重问题。一般不处理</p><ul><li>JVM系统内部错误，资源耗尽等严重情况。</li><li><code>SatckOverFlowError</code>栈溢出和<code>OutOfMemoryError</code>堆溢出</li></ul><h2 id="Exception-类的层次"><a href="#Exception-类的层次" class="headerlink" title="Exception 类的层次"></a>Exception 类的层次</h2><ol><li>所有的异常类是从 java.lang.Exception 类继承的子类。</li><li>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。</li><li>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。</li><li>Error 用来指示运行时环境发生的错误。</li></ol><p><strong><em>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</em></strong></p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/exception-hierarchy.png" alt="img"></p><p>在 Java 内置类中，有大部分常用检查性和非检查性异常。</p><h2 id="内置异常类"><a href="#内置异常类" class="headerlink" title="内置异常类"></a>内置异常类</h2><p>异常类在 java.lang 标准包中。</p><p>标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。</p><p> <strong>非检查性异常</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>异常</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>ArithmeticException</code></td><td style="text-align:left">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td></tr><tr><td style="text-align:left"><code>ArrayIndexOutOfBoundsException</code></td><td style="text-align:left">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td style="text-align:left"><code>ArrayStoreException</code></td><td style="text-align:left">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td></tr><tr><td style="text-align:left"><code>ClassCastException</code></td><td style="text-align:left">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td></tr><tr><td style="text-align:left"><code>IllegalArgumentException</code></td><td style="text-align:left">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td style="text-align:left"><code>IllegalMonitorStateException</code></td><td style="text-align:left">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td></tr><tr><td style="text-align:left"><code>IllegalStateException</code></td><td style="text-align:left">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td></tr><tr><td style="text-align:left"><code>IllegalThreadStateException</code></td><td style="text-align:left">线程没有处于请求操作所要求的适当状态时抛出的异常。</td></tr><tr><td style="text-align:left"><code>IndexOutOfBoundsException</code></td><td style="text-align:left">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td></tr><tr><td style="text-align:left"><code>NegativeArraySizeException</code></td><td style="text-align:left">如果应用程序试图创建大小为负的数组，则抛出该异常。</td></tr><tr><td style="text-align:left"><code>NullPointerException</code></td><td style="text-align:left">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td></tr><tr><td style="text-align:left"><code>NumberFormatException</code></td><td style="text-align:left">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td></tr><tr><td style="text-align:left"><code>SecurityException</code></td><td style="text-align:left">由安全管理器抛出的异常，指示存在安全侵犯。</td></tr><tr><td style="text-align:left"><code>StringIndexOutOfBoundsException</code></td><td style="text-align:left">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td></tr><tr><td style="text-align:left"><code>UnsupportedOperationException</code></td><td style="text-align:left">当不支持请求的操作时，抛出该异常。</td></tr></tbody></table></div><p><strong>检查性异常类</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>异常</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>ClassNotFoundException</code></td><td style="text-align:left">应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td style="text-align:left"><code>CloneNotSupportedException</code></td><td style="text-align:left">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td></tr><tr><td style="text-align:left"><code>IllegalAccessException</code></td><td style="text-align:left">拒绝访问一个类的时候，抛出该异常。</td></tr><tr><td style="text-align:left"><code>InstantiationException</code></td><td style="text-align:left">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr><tr><td style="text-align:left"><code>InterruptedException</code></td><td style="text-align:left">一个线程被另一个线程中断，抛出该异常。</td></tr><tr><td style="text-align:left"><code>NoSuchFieldException</code></td><td style="text-align:left">请求的变量不存在</td></tr><tr><td style="text-align:left"><code>NoSuchMethodException</code></td><td style="text-align:left">请求的方法不存在</td></tr></tbody></table></div><h2 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h2><p><strong>Throwable 类的主要方法</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>序号</strong></th><th style="text-align:left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong><code>public String getMessage()</code></strong> 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong><code>public Throwable getCause()</code></strong> 返回一个Throwable 对象代表异常原因。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong><code>public String toString()</code></strong> 使用getMessage()的结果返回类的串级名字。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong><code>public void printStackTrace()</code></strong> 打印toString()结果和栈层次到System.err，即错误输出流。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><strong><code>public StackTraceElement [] getStackTrace()</code></strong> 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><strong><code>public Throwable fillInStackTrace()</code></strong> 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td></tr></tbody></table></div><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><h3 id="常规捕获"><a href="#常规捕获" class="headerlink" title="常规捕获"></a>常规捕获</h3><blockquote><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p></blockquote><p>try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">         System.out.println(<span class="string">"Access element three :"</span> + a[<span class="number">3</span>]);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">         System.out.println(<span class="string">"Exception thrown  :"</span> + e);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Out of the block"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p><p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p><h3 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    file = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">    x = (<span class="keyword">byte</span>) file.read();</span><br><span class="line">&#125; <span class="keyword">catch</span>(FileNotFoundException f) &#123; <span class="comment">// Not valid!</span></span><br><span class="line">    f.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">    i.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码段包含了 3 个 catch块;可以在 try 语句后面添加任意数量的 catch 块。</p><ol><li>如果保护代码中发生异常，异常被抛给第一个 catch 块。</li><li>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</li><li>如果不匹配，它会被传递给第二个 catch 块。</li><li>如此，直到异常被捕获或者通过所有的 catch 块。</li></ol><h2 id="throws-throw-关键字"><a href="#throws-throw-关键字" class="headerlink" title="throws/throw 关键字"></a>throws/throw 关键字</h2><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部，也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// 方法的实现</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//类定义的剩余部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException,InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// 方法的实现</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//类定义的剩余部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h2><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p><p>无论是否发生异常，finally 代码块中的代码总会被执行。</p><p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p><p>finally 代码块出现在 catch 代码块最后，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Access element three :"</span> + a[<span class="number">3</span>]);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">       System.out.println(<span class="string">"Exception thrown  :"</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">       a[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">       System.out.println(<span class="string">"First element value: "</span> +a[<span class="number">0</span>]);</span><br><span class="line">       System.out.println(<span class="string">"The finally statement is executed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意下面事项：</p><ul><li>catch 不能独立于 try 存在。</li><li>在 try/catch 后面添加 finally 块并非强制性要求的。</li><li>try 代码后不能既没 catch 块也没 finally 块。</li><li>try, catch, finally 块之间不能添加任何代码。</li></ul><h2 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h2><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p><ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul><p>只继承Exception 类来创建的异常类是检查性异常类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常类，继承Exception类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsufficientFundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InsufficientFundsException</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> amount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用异常"><a href="#通用异常" class="headerlink" title="通用异常"></a>通用异常</h2><p>在Java中定义了两种类型的异常和错误。</p><ul><li><strong>JVM(Java虚拟机)异常：</strong>由 JVM 抛出的异常或错误。例如：<code>NullPointerException</code>类，<code>ArrayIndexOutOfBoundsException</code>类，<code>ClassCastException</code> 类。</li><li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 <code>IllegalArgumentException</code>类，<code>IllegalStateException</code> 类。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java I </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序的实现</title>
      <link href="/2021/07/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/07/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h2><blockquote><p><strong>快速排序的基本思想：</strong>通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><p><strong>解决思路：</strong>对于给定的一组记录，选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分，直到序列中的所有记录均有序为止。</p></blockquote><h2 id="2-例图"><a href="#2-例图" class="headerlink" title="2.例图"></a>2.例图</h2><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/849589-20171015230936371-1413523412.gif" alt="img"></p><h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h2><p>一整型数组 无序排列，使其按从小到大的顺序进行排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">24124</span>, <span class="number">342342</span>, <span class="number">454</span>, <span class="number">4534</span>, <span class="number">5</span>, <span class="number">2342</span>, <span class="number">23421</span>&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>定基准元素：最左边的数；设两个下标，左下标和右下标</li><li>先<code>从右往左</code>进行查找，并与基准元素进行对比，如发现查找的值<code>小于</code>基准元素，则停止查找，并记录当前下标的值</li><li>之后开始<code>从左往右</code>查找，并与基准元素进行对比，如发现查找的值<code>大于</code>基准元素，则停止查找，并记录当前下标的值</li><li>交换两个下标所对应的数据</li><li>重复以上操作，直到两下标相遇也就是 两个下标值相同</li><li>令其当前下标的值与基准元素进行交换</li><li>此时以当前下标所在位置，将整个数组分为左右两部分</li><li>左右两个部分分别重复以上操作。</li></ul><p>Java代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传递一个整型数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">24124</span>, <span class="number">342342</span>, <span class="number">454</span>, <span class="number">4534</span>, <span class="number">5</span>, <span class="number">2342</span>, <span class="number">23421</span>&#125;;</span><br><span class="line"><span class="comment">//        调用方法</span></span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        遍历打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   整型数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右下标</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        在整个循环中不允许出现，left大于right，出现即终止程序</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *      base  基准元素</span></span><br><span class="line"><span class="comment">         *      arr[left]数组最左边的值赋给base</span></span><br><span class="line"><span class="comment">         *      同时定义 i 和 j 来表示左下标和右下标</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">int</span> base = arr[left];</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *      i！=j表示：当左下标和右下标不等时，分别执行 从左往右查找和从右往左查找</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line"><span class="comment">//            先进行从右往左查找，右边查找的值与基准元素进行对比，如果所查找的值小于基准元素，则右下标停止在当前值的下标，退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt;= base &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            右查找结束后，开始左查找，左边查找的值与基准元素进行对比，如果所查找的值大于基准元素，则左下标停止在当前值的下标，退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt;= base &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            设置一个临时变量，供数据进行交换。    通过上面两个循环找到的下标，对数组指定位置的数据进行交换</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 将左查找的数据赋给临时变量temp;</span></span><br><span class="line"><span class="comment">             * 再将右查找的数据赋给左查找指定位置的数组arr[i];</span></span><br><span class="line"><span class="comment">             * 之后再将刚刚保存再临时变量里面的arr[i]的数据赋值给右查找指定位置的数组arr[j];</span></span><br><span class="line"><span class="comment">             * 至此完成数组指定位置的数据交换.</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           这里就是当左下标与右下标相同的时候，i=j;</span></span><br><span class="line"><span class="comment">           当前的位置 arr[i]==arr[j]；这两个时相同的，因为下标相同</span></span><br><span class="line"><span class="comment">           这个时候交换基准元素和相遇的下标所对应的值</span></span><br><span class="line"><span class="comment">           由于left一直为0，所以 arr[left]就是基准元素（最左边的数据常定义为基准元素）</span></span><br><span class="line"><span class="comment">           将当前位置的值赋值给新定义的基准元素</span></span><br><span class="line"><span class="comment">           将老基准元素赋值给前下标的所在位置。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        arr[left] = arr[i];</span><br><span class="line">        arr[i] = base;</span><br><span class="line"><span class="comment">//        下面进行回调，同样的步骤。</span></span><br><span class="line"><span class="comment">//        执行左半部</span></span><br><span class="line">        sort(arr, left, i - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        执行右半部</span></span><br><span class="line">        sort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果：</p><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/image-20210713210929336.png" alt="image-20210713210929336"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus 学习</title>
      <link href="/2021/07/07/MyBatis-Plus-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/07/MyBatis-Plus-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-Plus-学习"><a href="#MyBatis-Plus-学习" class="headerlink" title="MyBatis-Plus 学习"></a>MyBatis-Plus 学习</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">MyBatis-Plus </a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><h3 id="1-1特性"><a href="#1-1特性" class="headerlink" title="1.1特性"></a>1.1特性</h3><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="1-2框架结构"><a href="#1-2框架结构" class="headerlink" title="1.2框架结构"></a>1.2框架结构</h3><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/m4pqwNluPS1aBFJ.png" alt="m4pqwNluPS1aBFJ"></p><h3 id="1-3快速入门"><a href="#1-3快速入门" class="headerlink" title="1.3快速入门"></a>1.3快速入门</h3><h4 id="添加Pom依赖"><a href="#添加Pom依赖" class="headerlink" title="添加Pom依赖"></a>添加Pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建Pojo类"><a href="#创建Pojo类" class="headerlink" title="创建Pojo类"></a>创建Pojo类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和之前的操作一样</span></span><br></pre></td></tr></table></figure><h4 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在对应的mapper上面继承基本的类 BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span><span class="comment">//代表持久层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//所有CRUD操作都已经编写完成了</span></span><br><span class="line">    <span class="comment">//你不需要向以前一样配置一大堆文件了!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mapper配置"><a href="#mapper配置" class="headerlink" title="mapper配置"></a>mapper配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用注解<span class="meta">@MapperScan</span>(<span class="string">"com.codeyuaiiao.mapper"</span>)在springboot启动类上面</span><br><span class="line">使用注解<span class="meta">@Mapper</span>在mapper接口上添加</span><br></pre></td></tr></table></figure><h4 id="测试类测试"><a href="#测试类测试" class="headerlink" title="测试类测试"></a>测试类测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继承了BaseMapper, 所有的方法都来自己父类</span></span><br><span class="line">    <span class="comment">//我们也可以编写自己的扩展方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数是一个Wrapper , 条件构造器,这里我们先不用 --null</span></span><br><span class="line">        <span class="comment">//查询全部用户</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-配置日志"><a href="#2-配置日志" class="headerlink" title="2.配置日志"></a>2.配置日志</h2><p>在配置文件中添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置日志  (默认控制台输出)</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/eternal0918/mdimages.github.io/img/RCVQkBsX4nY2ucT.png" alt="RCVQkBsX4nY2ucT"></p><h2 id="3-CRUD拓展"><a href="#3-CRUD拓展" class="headerlink" title="3.CRUD拓展"></a>3.CRUD拓展</h2><h3 id="3-1插入数据"><a href="#3-1插入数据" class="headerlink" title="3.1插入数据"></a>3.1插入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"codeyuaiiao"</span>);</span><br><span class="line">    user.setAge(<span class="number">3</span>);</span><br><span class="line">    user.setEmail(<span class="string">"747557612@qq.com"</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所插入的数据ID默认值为：全局唯一id</p><h3 id="3-2主键生成策略"><a href="#3-2主键生成策略" class="headerlink" title="3.2主键生成策略"></a>3.2主键生成策略</h3><ul><li>默认 ID_WORKER 全局唯一id</li><li>对应数据库中的主键(uuid.自增id.雪花算法.redis.zookeeper)</li></ul><p><strong>雪花算法😦Twitter的snowflake算法</strong></p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0.可以保证几乎全球唯一</p><h3 id="3-3主键自增"><a href="#3-3主键自增" class="headerlink" title="3.3主键自增"></a>3.3主键自增</h3><ul><li>实体类字段上<code>@TableId(type = IdType.AUTO)</code></li><li><img src="https://i.loli.net/2021/06/02/kFZq8h5c3XYHnNG.png" alt=""></li><li>数据库字段一定要是<strong>自增</strong>!</li><li><img src="https://i.loli.net/2021/06/02/S3fRETXdxHayJY4.png" alt="image-20210602200701170"></li></ul><p><strong>源码解释</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> IdType &#123;</span><br><span class="line">     </span><br><span class="line">    AUTO(<span class="number">0</span>),<span class="comment">//数据库ID自增  </span></span><br><span class="line">    NONE(<span class="number">1</span>),<span class="comment">//该类型为未设置主键类型      </span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//用户输入ID</span></span><br><span class="line">       <span class="comment">//该类型可以通过自己注册自动填充插件进行填充  </span></span><br><span class="line"><span class="comment">//以下3种类型、只有当插入对象ID 为空，才自动填充。     </span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),<span class="comment">//全局唯一ID (idWorker)      </span></span><br><span class="line">    UUID(<span class="number">4</span>),<span class="comment">//全局唯一ID (UUID)          </span></span><br><span class="line">    ID_WORKER_STR(<span class="number">5</span>);<span class="comment">//字符串全局唯一ID (idWorker 的字符串表示)    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4更新数据"><a href="#3-4更新数据" class="headerlink" title="3.4更新数据"></a>3.4更新数据</h3><h2 id="4-查询操作"><a href="#4-查询操作" class="headerlink" title="4.查询操作"></a>4.查询操作</h2><h3 id="4-1单个查询"><a href="#4-1单个查询" class="headerlink" title="4.1单个查询"></a>4.1单个查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询单个</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2批量查询"><a href="#4-2批量查询" class="headerlink" title="4.2批量查询"></a>4.2批量查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部数据  </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//批量查询，根据多个ID查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; user = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        user.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-3条件查询"><a href="#4-3条件查询" class="headerlink" title="4.3条件查询"></a>4.3条件查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：map</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//自定义查询条件</span></span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectByMap(map);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4分页查询"><a href="#4-4分页查询" class="headerlink" title="4.4分页查询"></a>4.4分页查询</h3><p>1.原始的limit分页</p><p>2.pagehelper 等第三方插件</p><p>3.MyBatis-Plus分页插件</p><p>示例操作：</p><h4 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring xml 方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlParser"</span> <span class="attr">ref</span>=<span class="string">"自定义解析类、可以没有"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialectClazz"</span> <span class="attr">value</span>=<span class="string">"自定义方言类、可以没有"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- COUNT SQL 解析.可以没有 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"countSqlParser"</span> <span class="attr">ref</span>=<span class="string">"countSqlParser"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"countSqlParser"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置为 true 可以优化部分 left join 的sql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"optimizeJoin"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="springboot配置"><a href="#springboot配置" class="headerlink" title="springboot配置"></a>springboot配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring boot方式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.baomidou.cloud.service.*.mapper*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旧版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setLimit(500);</span></span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> JsqlParserCountOptimize(<span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.H2));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml自定义分页"><a href="#xml自定义分页" class="headerlink" title="xml自定义分页"></a>xml自定义分页</h4><ul><li>UserMapper.java 方法内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;<span class="comment">//可以继承或者不继承BaseMapper</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询 : 根据state状态查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state 状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(Page&lt;?&gt; page, Integer state)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.xml 等同于编写一个普通 list 查询，mybatis-plus 自动替你分页</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPageVo"</span> <span class="attr">resultType</span>=<span class="string">"com.baomidou.cloud.entity.UserVo"</span>&gt;</span></span><br><span class="line">    SELECT id,name FROM user WHERE state=#&#123;state&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UserServiceImpl.java 调用分页方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IPage&lt;User&gt; <span class="title">selectUserPage</span><span class="params">(Page&lt;User&gt; page, Integer state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不进行 count sql 优化，解决 MP 无法自动优化 SQL 问题，这时候你需要自己查询 count 部分</span></span><br><span class="line">    <span class="comment">// page.setOptimizeCountSql(false);</span></span><br><span class="line">    <span class="comment">// 当 total 为小于 0 或者设置 setSearchCount(false) 分页插件不会进行 count 查询</span></span><br><span class="line">    <span class="comment">// 要点!! 分页返回的对象与传入的对象是同一个</span></span><br><span class="line">    <span class="keyword">return</span> userMapper.selectPageVo(page, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="springboot测试分页功能"><a href="#springboot测试分页功能" class="headerlink" title="springboot测试分页功能"></a>springboot测试分页功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//测试分页查询</span></span><br><span class="line">    <span class="meta">@Test</span>   <span class="comment">//int current, int size</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数一，当前页    参数二，查询的数量</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//        获得查询的结果并遍历打印输出</span></span><br><span class="line">        page.getRecords().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-删除操作"><a href="#5-删除操作" class="headerlink" title="5.删除操作"></a>5.删除操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与查询操作类似，共四个方法</span></span><br><span class="line">      userMapper.deleteById(<span class="number">1</span>);</span><br><span class="line">        userMapper.deleteBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        userMapper.delete(<span class="keyword">null</span>);</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</span><br><span class="line">        userMapper.deleteByMap(map);</span><br></pre></td></tr></table></figure><h2 id="6-逻辑删除"><a href="#6-逻辑删除" class="headerlink" title="6.逻辑删除"></a>6.逻辑删除</h2><ul><li>物理删除：从数据库中移除</li><li>逻辑删除：在数据库中没有被移除，而是通过一个变量来让它失效    deleted = 0&gt; deleted = 1</li></ul><p>管理员可以查看被删除的记录，防止数据的丢失，类似于回收站</p><p>示例：</p><p>1.数据库表中创建字段，int为0</p><p><img src="https://i.loli.net/2021/06/03/xM5h2pK7yeBA1Fk.png" alt="image-20210603085803889"></p><p>2.pojo实体类添加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span>   <span class="comment">//逻辑删除</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><p>3.配置类中添加（3.3.0之后不再进行注册）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑删除</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志功能</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"> <span class="comment">#逻辑删除配置，删除的值为1，不删除的值为0</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>4.测试删除</p><p><img src="https://i.loli.net/2021/06/03/mUYG9IpaxfKoRnD.png" alt="image-20210603092812702"></p><p>本质是更新操作，并不是删除操作，数据仍在数据库中</p><p>再次进行查询操作，查不到数据库中的数据</p><p><img src="https://i.loli.net/2021/06/03/B6CNmqRGl23f4nL.png" alt="image-20210603091508984"></p><h2 id="7-性能分析插件"><a href="#7-性能分析插件" class="headerlink" title="7.性能分析插件"></a>7.性能分析插件</h2><p>我们在平时开发中，会遇到一些慢SQL，通常需要进行测试其性能！  druid</p><p>MP提供了性能分析插件，如果超过了个这个时间就停止运行！</p><p>1.导入插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SQL执行性能插件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>, <span class="string">"test"</span>&#125;) <span class="comment">//设置 dev test 环境开启，保证我们的性能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">    <span class="comment">//在工作中，不允许用户等待</span></span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">1000</span>);   <span class="comment">//设置sql执行的最大时间，如果超过了则不执行</span></span><br><span class="line">    performanceInterceptor.setFormat(<span class="keyword">true</span>);  <span class="comment">//开启格式化sql</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.测试功能</p><p>如果时间过长，或过短，则会报错，经过多次测试，进行调节sql执行的最大时间</p><p><strong>注意：</strong>要在sprigboot中配置环境为dev或者test环境</p><h2 id="8-条件构造器"><a href="#8-条件构造器" class="headerlink" title="8.条件构造器"></a>8.条件构造器</h2><p>十分重要：wrapper</p><p>我们写一些复杂的sql语句</p><p>查询测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper</span><br><span class="line">            .isNotNull(<span class="string">"name"</span>)</span><br><span class="line">            .isNotNull(<span class="string">"email"</span>)</span><br><span class="line">            .ge(<span class="string">"age"</span>, <span class="number">12</span>);</span><br><span class="line">    userMapper.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</span><br><span class="line">    User user = userMapper.selectOne(wrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//按区间查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.between(<span class="string">"age"</span>, <span class="number">20</span>, <span class="number">30</span>);  <span class="comment">//年龄在10-20岁之间的</span></span><br><span class="line">        Integer c = userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询名字中不包含e的，以及邮箱编码中包含t的</span></span><br><span class="line">        <span class="comment">//左和右  %e%，t%</span></span><br><span class="line">        wrapper</span><br><span class="line">                .notLike(<span class="string">"name"</span>, <span class="string">"e"</span>)</span><br><span class="line">                .likeRight(<span class="string">"email"</span>, <span class="string">"t"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">        maps.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//子查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// id 在子查询中查询出来</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,deleted FROM user WHERE deleted=0 AND id IN (select id from user where id&lt;3) </span></span><br><span class="line">        wrapper.inSql(<span class="string">"id"</span>,<span class="string">"select id from user where id&lt;3"</span>);</span><br><span class="line">        List&lt;Object&gt; objectList = userMapper.selectObjs(wrapper);</span><br><span class="line">        objectList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过id进行排序</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,deleted FROM user WHERE deleted=0 ORDER BY id DESC</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">"id"</span>);   <span class="comment">//降序</span></span><br><span class="line">        wrapper.orderByAsc(<span class="string">"id"</span>);  <span class="comment">//升序</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 持久层框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 5 学习</title>
      <link href="/2021/07/07/Spring-5-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/07/Spring-5-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-5-学习"><a href="#Spring-5-学习" class="headerlink" title="Spring 5 学习"></a>Spring 5 学习</h1><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>Spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架</p><p>SSH:    Struct2 + Spring + Hibernate </p><p>SSM:    SpringMVC + Spring + Mybatis</p><p>Spring官网：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html#overview</a></p><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1.优点"></a>1.优点</h4><ul><li>Spring是一个开源免费的 框架（容器）</li><li>Spring是一个轻量级的，非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><p><strong>Spring是一个轻量级的控制反转，面向切面编程的框架</strong></p><h4 id="2-拓展"><a href="#2-拓展" class="headerlink" title="2.拓展"></a>2.拓展</h4><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li></ul></li><li>Spring Cloud<ul><li>Spring Cloud是基于SpringBoot实现的</li><li>约定大于配置（同Maven）</li></ul></li></ul><p>学习SpringBoot需要完全掌握Spring及SpringMVC，承上启下的作用</p><p><strong>弊端：配置繁琐</strong></p><h3 id="2-基本环境配置"><a href="#2-基本环境配置" class="headerlink" title="2.基本环境配置"></a>2.基本环境配置</h3><p>Pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-IOC理论推导"><a href="#3-IOC理论推导" class="headerlink" title="3.IOC理论推导"></a>3.IOC理论推导</h3><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>UserServiceImpl业务实现类</li></ol><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码，若代码量十分庞大，则修改一次的成本代价会十分昂贵</p><p>我们用一个set接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImp();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    常规实现方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    利用set进行动态实现值的注入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test0</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，dao层不需要接触</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.getUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当添加需求的时候则要反复实例化业务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"><span class="comment">//        这里强转是因为接口为定义对象及方法，因此讲对象向上提一级</span></span><br><span class="line">        ((UserServiceImpl) userService).setUserDao(<span class="keyword">new</span> UserDaoMySqlImpl());</span><br><span class="line">        <span class="comment">/*当业务需要更改的时候，只需更换dao层即可无需再次创建</span></span><br><span class="line"><span class="comment">         ((UserServiceImpl) userService).setUserDao(new UserDaoImp());*/</span> </span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前，程序是主动创建对象，控制权在程序员手上！</li><li>使用set注入后，程序不再具有主动性，而是变成了被动的接受对象！</li></ul><p><strong>这种思想，从本质上解决了问题，不用再去管理对象的创建，系统的耦合性大大降低，可以更加专注地在业务的实现上！这是IOC的原型！</strong></p><h3 id="4-IOC本质"><a href="#4-IOC本质" class="headerlink" title="4.IOC本质"></a>4.IOC本质</h3><ul><li><strong>就相当于你请人吃饭</strong></li><li>传统：你写好菜单买好菜，客人来了自己把菜炒好招待</li><li>IOC：你告诉楼下餐厅，你要哪些菜，客人来的时候，餐厅把做好你需要的菜送上来；炒菜这件事不再由你自己来做，而是委托给第三方餐厅来做。</li></ul><p>左边老版，右边为IOC思想 </p><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210124212948798.png" alt="image-20210124212948798"></p><p>解耦过程：</p><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210124214442873.png" alt="image-20210124214442873"></p><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p><strong>IOC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。</p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从Ioc容器中取出需要的对象。</p><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210124214701891.png" alt="image-20210124214701891"></p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><h3 id="5-HelloSpring"><a href="#5-HelloSpring" class="headerlink" title="5.HelloSpring"></a>5.HelloSpring</h3><p><strong>xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoImp"</span> <span class="attr">class</span>=<span class="string">"com.zxp.dao.UserDaoImp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoMySql"</span> <span class="attr">class</span>=<span class="string">"com.zxp.dao.UserDaoMySqlImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下面这个是service层，上面的都是dao层，更换业务时，直接将ref中的名称改为dao层的id--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zxp.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        ref: 引用spring容器中创建好的对象</span></span><br><span class="line"><span class="comment">            value: 具体的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDaoMySql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        获取applicationContext;</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        需要什么就get什么</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-IOC创建对象的方式"><a href="#6-IOC创建对象的方式" class="headerlink" title="6.IOC创建对象的方式"></a>6.IOC创建对象的方式</h3><p>1.使用无参构造创建对象，默认！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化UserT对象时就加载该方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"UserT是无参构造！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.假设我们要使用有参构造创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        1.下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        2.类型创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不建议使用，通过类型创建对象，参数类型重复的时候不适用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">假如某类有多个构造器，变量都只有一个只是传入类型不同，那么此时为了区分重载就只能使用第二种按类型注入的方式--&gt;</span></span><br></pre></td></tr></table></figure><p>​        3.参数名创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    直接通过参数名来设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：在配置文件加载的时候，容器中管理的对象就已经被初始化。</strong></p><h3 id="7-Spring配置"><a href="#7-Spring配置" class="headerlink" title="7.Spring配置"></a>7.Spring配置</h3><h4 id="1-别名"><a href="#1-别名" class="headerlink" title="1.别名"></a>1.别名</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    别名，如果添加了别名，我们也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"abcd"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210125113504431.png" alt="image-20210125113504431"></p><h4 id="2-Bean配置"><a href="#2-Bean配置" class="headerlink" title="2.Bean配置"></a>2.Bean配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id : bean 的唯一标识符，也就是相当于我们所学的对象名</span></span><br><span class="line"><span class="comment">class ： bean对象所对应的全限定名 ： 包名 + 类型</span></span><br><span class="line"><span class="comment">name ： 也是别名，而且更高级相对于alias，可以同时取多个别名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userT"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.UserT"</span> <span class="attr">name</span>=<span class="string">"userT2,u2 u3;u4"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏大佬"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210125114552011.png" alt="image-20210125114552011"></p><h4 id="3-import"><a href="#3-import" class="headerlink" title="3.import"></a>3.import</h4><p>一般用于团队开发使用，可以将多个配置文件，导入合并为一个</p><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210125115530504.png" alt="image-20210125115530504"></p><p>总的在此导入，引用的时候直接用applicationContext.xml</p><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210125115541914.png" alt="image-20210125115541914"></p><h3 id="8-DI依赖注入"><a href="#8-DI依赖注入" class="headerlink" title="8.DI依赖注入"></a>8.DI依赖注入</h3><h4 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1.构造器注入"></a>1.构造器注入</h4><p>上述示范既是构造器注入（construct-args）</p><h4 id="2-Set方式注入【重点】"><a href="#2-Set方式注入【重点】" class="headerlink" title="2.Set方式注入【重点】"></a>2.Set方式注入【重点】</h4><p>依赖注入：Set注入</p><p>​    依赖：bean对象的创建依赖于容器</p><p>​    注入：bean对象中所有的属性都有容器来注入</p><p>环境搭建</p><p>1.复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Addres</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这里要填上toString方法，方便在Student中打印出来</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Addres&#123;"</span> +</span><br><span class="line">                <span class="string">"address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.真实测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Addres addres;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", addres="</span> + addres.toString() +</span><br><span class="line">                <span class="string">", books="</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">", hobbys="</span> + hobbys +</span><br><span class="line">                <span class="string">", card="</span> + card +</span><br><span class="line">                <span class="string">", games="</span> + games +</span><br><span class="line">                <span class="string">", info="</span> + info +</span><br><span class="line">                <span class="string">", wife='"</span> + wife + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Addres"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"信阳"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    第一种 普通注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    第二种： 引用上面的address，Bean注入，ref引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addres"</span> <span class="attr">ref</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    第三种： 数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        第四种：List--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>抱女友<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        第五中：Map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"身份证"</span> <span class="attr">value</span>=<span class="string">"411528199909188538"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"手机号"</span> <span class="attr">value</span>=<span class="string">"18603762237"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"QQ号"</span> <span class="attr">value</span>=<span class="string">"1728456478"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        第六中 ：Set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>CF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第七种：null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第八中：Properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"学号"</span>&gt;</span>20181516227<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"班级"</span>&gt;</span>网软三班<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Student student = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">    System.out.println(student.toString());</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Student&#123;</span></span><br><span class="line"><span class="comment">        name='朱晓鹏',</span></span><br><span class="line"><span class="comment">        addres=Addres&#123;address='信阳'&#125;,</span></span><br><span class="line"><span class="comment">        books=[红楼梦, 西游记, 水浒传, 三国演义],</span></span><br><span class="line"><span class="comment">        hobbys=[听歌, 打游戏, 敲代码, 抱女友, 跑步],</span></span><br><span class="line"><span class="comment">        card=&#123;身份证=411528199909188538, 手机号=18603762237, QQ号=1728456478&#125;,</span></span><br><span class="line"><span class="comment">        games=[LOL, CF, 王者荣耀],</span></span><br><span class="line"><span class="comment">        info=&#123;学号=20181516227, 班级=网软三班, password=root, driver=10086, username=root&#125;,</span></span><br><span class="line"><span class="comment">        wife='null'&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-其他方式注入"><a href="#3-其他方式注入" class="headerlink" title="3.其他方式注入"></a>3.其他方式注入</h4><p><strong>我们可以用c命名和p命名空间进行注入</strong></p><h5 id="前提："><a href="#前提：" class="headerlink" title="前提："></a><strong>前提：</strong></h5><ul><li>​            c命名必须含有有参构造，否则无法使用</li><li>​            p命名空间可以无需有参构造，但存在有参构造时必须写无参构造</li><li>​            两者都运用时，有参和无参方法必须存在</li></ul><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="userBean-xml"><a href="#userBean-xml" class="headerlink" title="userBean.xml"></a>userBean.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    p命名空间注入，可以直接注入属性的值，property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span> <span class="attr">p:name</span>=<span class="string">"朱晓鹏"</span> <span class="attr">p:age</span>=<span class="string">"21"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--    c命名空间注入，通过构造器注入，construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span> <span class="attr">c:age</span>=<span class="string">"21"</span> <span class="attr">c:name</span>=<span class="string">"朱晓鹏c命名"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"userBean.xml"</span>);</span><br><span class="line">    User user = context.getBean(<span class="string">"user2"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//User&#123;name='朱晓鹏c命名', age=21&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>c和p命名空间必须先导入约束才可以使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br></pre></td></tr></table></figure><h3 id="9-Bean的作用域"><a href="#9-Bean的作用域" class="headerlink" title="9.Bean的作用域"></a>9.Bean的作用域</h3><h4 id="1-单例模式（Spring默认机制）"><a href="#1-单例模式（Spring默认机制）" class="headerlink" title="1.单例模式（Spring默认机制）"></a>1.单例模式（Spring默认机制）</h4><p> scope=”singleton”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span> <span class="attr">c:age</span>=<span class="string">"21"</span> <span class="attr">c:name</span>=<span class="string">"朱晓鹏c命名"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"userBean.xml"</span>);</span><br><span class="line">    User user = context.getBean(<span class="string">"user2"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1=context.getBean(<span class="string">"user2"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(user.hashCode());</span><br><span class="line">    System.out.println(user1.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   1151593579</span></span><br><span class="line"><span class="comment">//   1151593579</span></span><br></pre></td></tr></table></figure><h4 id="2-原型模式"><a href="#2-原型模式" class="headerlink" title="2.原型模式"></a>2.原型模式</h4><p>每次从容器中get的时候，都会产生一个新对象</p><p>scope=”prototype”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.User"</span> <span class="attr">c:age</span>=<span class="string">"21"</span> <span class="attr">c:name</span>=<span class="string">"朱晓鹏c命名"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"userBean.xml"</span>);</span><br><span class="line">        User user = context.getBean(<span class="string">"user2"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user1 = context.getBean(<span class="string">"user2"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user.hashCode());</span><br><span class="line">        System.out.println(user1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    1151593579 </span></span><br><span class="line"><span class="comment">//    1902260856</span></span><br></pre></td></tr></table></figure><h4 id="3-其余"><a href="#3-其余" class="headerlink" title="3.其余"></a>3.其余</h4><p>request,session,application,这些都只能在web开发中使用</p><h3 id="10-Bean的自动装配"><a href="#10-Bean的自动装配" class="headerlink" title="10.Bean的自动装配"></a>10.Bean的自动装配</h3><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性</li></ul><p>在Spring中有三种装配的方式</p><ul><li>在xml中显式配置</li><li>在java中显式配置</li><li>隐式的自动装配bean【重要】</li></ul><p>1.测试</p><p>环境搭建：一个人两只宠物</p><h4 id="1-常规显式配置"><a href="#1-常规显式配置" class="headerlink" title="1.常规显式配置"></a>1.常规显式配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Dog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.People"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    People people = context.getBean(<span class="string">"people"</span>, People<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-自动装配"><a href="#2-自动装配" class="headerlink" title="2.自动装配"></a>2.自动装配</h4><h5 id="1-byName"><a href="#1-byName" class="headerlink" title="1.byName"></a><strong>1.byName</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Dog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    byName: 会自动在容器中上下文查找，和自己对象set方法后面的值对应  beanId</span></span><br><span class="line"><span class="comment">        People对象中的dog和cat对应set后面的名字</span></span><br><span class="line"><span class="comment">        如果更改上述的dog名为abc则会报错</span></span><br><span class="line"><span class="comment">！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-byType"><a href="#2-byType" class="headerlink" title="2.byType"></a><strong>2.byType</strong></h5><p>主要根据类的类型 id可省略</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Dog"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   byTyep: ·····，和自己对象属性类型相同的 beanId!</span></span><br><span class="line"><span class="comment">！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"朱晓鹏"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h5><ul><li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set的方法值一致</li><li>byType的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性类型一致</li></ul><h4 id="3-使用注解实现自动装配"><a href="#3-使用注解实现自动装配" class="headerlink" title="3.使用注解实现自动装配"></a>3.使用注解实现自动装配</h4><p>jdk1.5支持注解，Spring2.5支持注解</p><p>使用须知：</p><p>1.导入约束</p><p>2.配置注解的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@Autowired</strong></p><p>直接在属性上使用即可，也可以在set方式上使用</p><p>使用<strong>Autowired</strong>我们可以不用编写set方法，前提是自动装配的属性在IOC容器中存在，且符合名字byName！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果定义了 @Autowired(required = false)，说明这个对象可以为null，否则不允许为空，一般用不到</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>@Qualifier(value = “abcd”)</strong></p><p>设置属性id，多样化，指定id名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(value = <span class="string">"abcd"</span>)</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>xml配置里面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"abcd"</span> <span class="attr">class</span>=<span class="string">"com.zxp.pojo.Dog"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果<strong>@Autowired</strong>自动装配的环境比较复杂，自动装配无法通过一个注解<strong>@Autowired</strong>完成的时候，我们可以使用<strong>@Qualifier(value = “xxx”)</strong>配合@Autowired使用，指定一个唯一的id名</p><p><strong>@Resource</strong></p><p>是byName与byType的集合体，先根据名字查找，没有则根据类型（对应的只有一个相同的类型，而不是相同类型多个id名）查找，如果都没的话则报错。</p><p>同时也可不用写set方法,是qualifier和autowried的两者集合</p><p><strong>@Resource(name=”abcd”)</strong>指定一个类（在xml中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"abcd"</span>)</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p><strong>@Autowired</strong>和<strong>@Resource</strong>的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li><strong>@Autowired</strong>通过byType的方式实现，而且必须要求这个对象存在【常用】</li><li><strong>@Resource</strong>默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li><li>执行顺序不同：<strong>@Autowired</strong>通过byType的方式实现</li></ul><h3 id="11-使用注解开发"><a href="#11-使用注解开发" class="headerlink" title="11.使用注解开发"></a>11.使用注解开发</h3><p>使用注解的时候，观察是否左侧栏有绿色的叶子显示，没有则说明该类或包没有被扫描</p><p>没有的话需要进行指定扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>= <span class="string">"com.zxp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-bean"><a href="#1-bean" class="headerlink" title="1.bean"></a><strong>1.bean</strong></h4><h4 id="2-属性如何注入"><a href="#2-属性如何注入" class="headerlink" title="2.属性如何注入"></a><strong>2.属性如何注入</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于    &lt;bean id="user" class="com.zxp.pojo.User"/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件  </span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    public String name = "朱晓鹏";</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//    相当于        &lt;property name="name" value="朱晓鹏"/&gt;</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"朱晓鹏"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-衍生的注解"><a href="#3-衍生的注解" class="headerlink" title="3.衍生的注解"></a><strong>3.衍生的注解</strong></h4><ul><li><p>@Component有几个衍生注解，我们在web开发中，会按照mvc三层架构分层</p><ul><li>dao【@Repository】</li><li>servic【@Service】</li><li>controller【@Controller】</li></ul><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p></li></ul><h4 id="4-自动装配置"><a href="#4-自动装配置" class="headerlink" title="4.自动装配置"></a><strong>4.自动装配置</strong></h4><p>第十节</p><h4 id="5-作用域"><a href="#5-作用域" class="headerlink" title="5.作用域"></a><strong>5.作用域</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   @Scope("prototype")单例模式</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//    相当于        &lt;property name="name" value="朱晓鹏"/&gt;</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"朱晓鹏"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a><strong>6.总结</strong></h4><p>xml与注解：</p><ul><li><p>xml更加万能，适用于任何场景，维护简单方便</p></li><li><p>注解，不是自己类使用不了，维护相对复杂！</p></li></ul><p>xml与注解最佳实践：</p><ul><li><p>xml用来管理bean;</p></li><li><p>注解只负责完成属性的注入</p></li><li><p>让注解生效须知：一是扫描包下的类，二是开启注解支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>= <span class="string">"com.zxp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="12-使用Java的方式配置Spring"><a href="#12-使用Java的方式配置Spring" class="headerlink" title="12.使用Java的方式配置Spring"></a>12.使用Java的方式配置Spring</h3><p>xml的配置，交给Java来做</p><p>JavaConfig是Spring的一个子项目【核心功能】</p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解的意思，说明这个类被Spring接管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"朱晓鹏"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个会被Spring容器托管，注入到容器中，因为他本来就是一个@Component,@Configuration代表这是一个配置类，就和我们之前看到的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxp.pojo"</span>)</span><br><span class="line"><span class="comment">//导入import</span></span><br><span class="line"><span class="meta">@Import</span>(ZxpConfig2<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ZxpConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 注册一个bean  就相当于我们之前写的一个bean标签</span></span><br><span class="line"><span class="comment">    * 这个方法的名字，就相当于bean标签中的id属性</span></span><br><span class="line"><span class="comment">    * 这个方法的返回值，就相当于bean标签纸的class属性</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 如果完全使用了配置类方式去做，我们只能通过AnnotationConfig 上下文来获取容器，通过配置类的class对象加载</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ZxpConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User getUser = context.getBean(<span class="string">"getUser"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(getUser.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯Java配置方式，在SpringBoot中随处可见</p><h3 id="13-代理模式"><a href="#13-代理模式" class="headerlink" title="13.代理模式"></a>13.代理模式</h3><p>为什么学习代理模式？     =====》SpringAOP的底层        【SpringAOP  和  SpringMVC】</p><p>代理模式分类：</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><h5 id="角色分析："><a href="#角色分析：" class="headerlink" title="角色分析："></a>角色分析：</h5><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些操作</li><li>客户：访问代理对象的人</li></ul><p>代码步骤：</p><p>1.接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"中介带你看房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收中介费"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">htong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"签租赁合同"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        房东要租房子</span></span><br><span class="line">        Host host=<span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理。中介帮房东租房子，此外代理一般会有一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        无需面对房东，直接找中介即可</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理模式的好处："><a href="#代理模式的好处：" class="headerlink" title="代理模式的好处："></a>代理模式的好处：</h5><ul><li>可以使真是角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低（反射可解决该问题）</li></ul><h4 id="加深理解"><a href="#加深理解" class="headerlink" title="加深理解"></a>加深理解</h4><p>AOP面向切面编程，无需更改底层代码，直接在业务区添加即可，不改变原有的代码，实现拓展功能。</p><p><img src="https://gitee.com/dont-leave-the-old/clode-images/raw/master/img/image-20210131102929367.png" alt="image-20210131102929367"></p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承接口实现接口的功能，并新添一个log打印功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserServiceImp userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImp userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"add"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"delete"</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"update"</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"query"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String log)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"日志："</span>+log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImp userServiceImp = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">        UserServiceProxy userServiceProxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        <span class="comment">//加载对象</span></span><br><span class="line">        userServiceProxy.setUserService(userServiceImp);</span><br><span class="line">        userServiceProxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理和静态代理角色一样</p><p>动态代理的代理类是动态生成的，不是我们直接写好的</p><p>动态代理分为两大类：基于接口的动态代理，基于类的动态代理</p><ul><li>基于接口====JDK动态代理</li><li>基于类====cglib</li><li>Java字节码====javassist</li></ul><p>需要了解两个类：Proxy代理，invocationHandler ：调用处理程序</p><h5 id="动态代理的好处："><a href="#动态代理的好处：" class="headerlink" title="动态代理的好处："></a>动态代理的好处：</h5><ul><li>可以使真实角色的操作更加纯粹！不用关注一些公共的业务</li><li>公共也就交给代理角色，实现了业务的分工</li><li>公共业务发展拓展的时候，方便集中管理</li><li>一个动态代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用这个类自动生成代理类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocation</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口（所写的接口）</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    生成得到的代理类(更改的时候只需更改接口名rent)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    处理代理实例，并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        动态代理的本职，使用反射机制实现</span></span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        真实角色(接口实现类)</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    代理角色(刚刚创建的ProxyInvocation) </span></span><br><span class="line">        ProxyInvocation pih = <span class="keyword">new</span> ProxyInvocation();</span><br><span class="line">        <span class="comment">//通过调用程序处理角色来处理我们要调用的接口</span></span><br><span class="line">        pih.setRent(host);</span><br><span class="line">        Rent proxy= (Rent) pih.getProxy();</span><br><span class="line">        <span class="comment">//实现接口功能</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>万能工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocation</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">log</span><span class="params">(String log)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"日志："</span>+log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//接口实现类</span></span><br><span class="line">        UserServiceImp userServiceImp=<span class="keyword">new</span> UserServiceImp();</span><br><span class="line">        ProxyInvocation proxyInvocation=<span class="keyword">new</span> ProxyInvocation();</span><br><span class="line">        proxyInvocation.setTarget(userServiceImp);</span><br><span class="line">        <span class="comment">//接口方法实现</span></span><br><span class="line">        UserService userService= (UserService) proxyInvocation.getProxy();</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-AOP"><a href="#14-AOP" class="headerlink" title="14.AOP"></a>14.AOP</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zxp.service.UserServiceImp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.zxp.log.Log"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.zxp.log.AfterLog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diy"</span> <span class="attr">class</span>=<span class="string">"com.zxp.diy.DiyPointCut"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原生Spring-API接口"><a href="#原生Spring-API接口" class="headerlink" title="原生Spring API接口"></a>原生Spring API接口</h4><p>增加一个日志功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//method:要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//objects == args：参数</span></span><br><span class="line">    <span class="comment">//o == target：目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(o.getClass().getName()+<span class="string">"的"</span>+method.getName()+<span class="string">"被执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  o相当于returnValue；返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了"</span>+method.getName()+<span class="string">"方法，返回结果为："</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop,需要导入aop约束--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        切入点:expression:表达式，execution(要执行的位置 * * * * *)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxp.service.UserServiceImp.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h4><p>增加一个日志功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============方法执行前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">efg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============方法执行后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    方式二：自定义类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        自定义切面，ref要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxp.service.UserServiceImp.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"abc"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"efg"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//动态代理，代理的是接口</span></span><br><span class="line">        UserService userServiceImp = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userServiceImp.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">原生Spring API</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">com.zxp.service.UserServiceImp的add被执行了</span></span><br><span class="line"><span class="comment">增加一个用户</span></span><br><span class="line"><span class="comment">执行了add方法，返回结果为：null</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">自定义类</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">============方法执行前</span></span><br><span class="line"><span class="comment">增加一个用户</span></span><br><span class="line"><span class="comment">============方法执行后</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>​        相比较下自定义类更加方便，但功能单一，而原生的则能提供复杂的功能</p><h3 id="15-注解AOP"><a href="#15-注解AOP" class="headerlink" title="15.注解AOP"></a>15.注解AOP</h3><h4 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    方式三：--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointCut"</span> <span class="attr">class</span>=<span class="string">"com.zxp.annotation.AnnotationPoint"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    开启注解支持  JDK(默认 proxy-target-class="false") cglib(proxy-target-class="true")--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span><span class="comment">//标注这个类是一个切面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.zxp.service.UserServiceImp.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    切入点</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.zxp.service.UserServiceImp.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在环绕增强中，我们可以给定一个参数，代表我们要获取处理切入的点</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.zxp.service.UserServiceImp.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        Signature signature = jp.getSignature();<span class="comment">//获得签名</span></span><br><span class="line">        System.out.println(<span class="string">"signature:"</span> + signature);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        执行方法</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">环绕前</span></span><br><span class="line"><span class="comment">signature:void com.zxp.service.UserService.add()</span></span><br><span class="line"><span class="comment">方法执行前</span></span><br><span class="line"><span class="comment">增加一个用户</span></span><br><span class="line"><span class="comment">环绕后</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">方法执行后</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="16-整合MyBatis-1-重点掌握"><a href="#16-整合MyBatis-1-重点掌握" class="headerlink" title="16.整合MyBatis  1   (重点掌握)"></a>16.整合MyBatis  1   (重点掌握)</h3><p>步骤</p><h4 id="1-导入相关jar包（pom依赖）"><a href="#1-导入相关jar包（pom依赖）" class="headerlink" title="1.导入相关jar包（pom依赖）"></a><strong>1.导入相关jar包（pom依赖）</strong></h4><ul><li>Junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop植入器</li><li>mybatis-spring </li></ul><h4 id="2-编写配置文件"><a href="#2-编写配置文件" class="headerlink" title="2.编写配置文件"></a><strong>2.编写配置文件</strong></h4><p><strong>spring-mybatis.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource:使用Spring的数据源替换Mybatis的配置  c3p0   dbcp   druid  我们这里使用Spring提供的JDBC  :  org.springframework.jdbc.datasource.DriverManagerDataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    mapper.xml路径导入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/zxp/mapper/*.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    SqlSessionTemplate是我们使用的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      只能使用构造器注入sqlSessionFactory，因为他没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入配置资源--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mybatis.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.zxp.mapper.UserMapperImp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxp.pojo"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-Java代码编写"><a href="#3-Java代码编写" class="headerlink" title="3.Java代码编写"></a><strong>3.Java代码编写</strong></h4><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>接口实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImp</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    我们的所有操作，都是用SQLSession执行，现在都是用SqlSessionTemplate;</span></span><br><span class="line"><span class="comment">//    通过Spring来实现mybatis，手动写一个set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a><strong>4.测试</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        常规mybatis操作</span></span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Spring代理的Mybatis，无需mybatis的代码</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserMapper userMapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-整合Mybatis-2-（理解即可）"><a href="#17-整合Mybatis-2-（理解即可）" class="headerlink" title="17.整合Mybatis 2  （理解即可）"></a>17.整合Mybatis 2  （理解即可）</h3><p>在1的基础上新增一个类</p><p><strong>UserMapperImp2.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImp2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        SqlSession sqlSession = getSqlSession();</span></span><br><span class="line"><span class="comment">//        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment">//        return mapper.selectUser();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        写完类配置到spring中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper<span class="class">.<span class="keyword">class</span>).<span class="title">selectUser</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper2"</span> <span class="attr">class</span>=<span class="string">"com.zxp.mapper.UserMapperImp2"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类只需更改bean的id即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserMapper userMapper = context.getBean(<span class="string">"userMapper2"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="18-声明式事务"><a href="#18-声明式事务" class="headerlink" title="18.声明式事务"></a>18.声明式事务</h3><h4 id="1-回顾事务"><a href="#1-回顾事务" class="headerlink" title="1.回顾事务"></a>1.回顾事务</h4><ul><li>要么都成功，要么都失败！</li><li>事务在项目的开发中，涉及到数据的一致性问题</li><li>确保完整性和一致性</li><li>把一组业务当成一个业务来做</li></ul><p>事物的ACID原则：</p><ul><li>原子性</li><li>一致性</li><li>隔离性（多个业务可能操作同一个资源，相互独立，防止数据损坏）</li><li>持久性（事务一旦提交，无论系统发生什么问题，结果都不会被影响，被持久化的写到存储器中）</li></ul><h4 id="2-spring中事务管理"><a href="#2-spring中事务管理" class="headerlink" title="2.spring中事务管理"></a>2.spring中事务管理</h4><ul><li>声明式事务：AOP</li><li>编程式事务：需要在代码中进行事务的管理</li></ul><p><strong>spring-mybatis.xml</strong></p><p>开启事务新增配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg ref="dataSource"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    结合AOP实现事务的植入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事务的类：Spring帮做--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        给部分方法配置事务--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置事务的传播特性：新增 propagation =" " --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;tx:method name="add" propagation="REQUIRED"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name="delete" propagation="REQUIRED"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name="update" propagation="REQUIRED"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;tx:method name="query" propagation="REQUIRED"/&gt;--&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">&lt;!--            如果全部支持事务，则可直接写下面的，上面的四个就不用写了--&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置事务切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxp.mapper.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-思考"><a href="#3-思考" class="headerlink" title="3.思考"></a>3.思考</h4><p>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况；</li><li>如果我们不在Spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目开发中十分重要，涉及到数据的一致性和完整性问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring 全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM 常用Pom依赖</title>
      <link href="/2021/07/06/SSM-%E5%B8%B8%E7%94%A8Pom%E4%BE%9D%E8%B5%96/"/>
      <url>/2021/07/06/SSM-%E5%B8%B8%E7%94%A8Pom%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架整合基本流程"><a href="#SSM框架整合基本流程" class="headerlink" title="SSM框架整合基本流程"></a>SSM框架整合基本流程</h1><p>1.实体类属性编写</p><p>2.对应的Mapper接口编写</p><p>3.mapper.xml编写（mysql语句）</p><p>4.service层接口编写</p><p>5.service层接口实现类</p><p>6.编写mybatis-config.xml（       typeAliases别名，    引用所需要的mapper.xml        ）</p><p>7.编写applicationContext.xml（       将所有的spring.xml导入在一起       ）</p><p>8.编写spring-mapper.xml（       填写jdbc驱动 c3p0       ，spring与mybatis整合，       将mapper接口注入spring中，省去Impl实现类的编写<strong>MapperScannerConfigurer</strong>       ）</p><p>9.编写spring-mvc.xml（       注解驱动的加载，       扫描controller包，       静态资源过滤，       视图解析器配置<strong>InternalResourceViewResolver</strong>       ）</p><p>10.编写spring-service.xml（       扫描service包，       将service的接口实现类注入到spring中，并将其实现类的private属性注入，       声明式事务配置<strong>DataSourceTransactionManager</strong>，       注入数据源<strong>dataSource</strong>，       aop横切事务配置       ）</p><p>11.填写web.xml（       <strong>DispatcherServlet</strong>       ）</p><h1 id="SSM常用Pom依赖"><a href="#SSM常用Pom依赖" class="headerlink" title="SSM常用Pom依赖"></a>SSM常用Pom依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   spring    spring-jdbc    mybatis    mybatis-spring连接   aop  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--servlet  jsp  jstl mysql  c3p0 file--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="静态资源过滤"><a href="#静态资源过滤" class="headerlink" title="静态资源过滤"></a>静态资源过滤</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态资源导出问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据源，交给spring做--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.zxp.pojo.Books"</span> <span class="attr">alias</span>=<span class="string">"Books"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"zxp/mapper/BookMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxp.springboot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mvc.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="spring-mapper-xml"><a href="#spring-mapper-xml" class="headerlink" title="spring-mapper.xml"></a>spring-mapper.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    整合数据库：关联数据库配置文件(固定写法)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    连接池:</span></span><br><span class="line"><span class="comment">                    dbcp:半自动化操作，不能自动连接，需要手动连接</span></span><br><span class="line"><span class="comment">                    c3p0:自动化操作（自动化的加载配置文件，可以自动设置到对象中）</span></span><br><span class="line"><span class="comment">                    druid:</span></span><br><span class="line"><span class="comment">                    hikari:</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssmbuild?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    sqlSessionFactory 整合mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置mapper接口扫描包，动态的实现了mapper接口注入到spring容器中（反射）   省去了mapper里面的接口实现类：mapperImpl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        注入 sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        要先扫描的mapper包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.zxp.mapper"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--扫描包：controller    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxp.controller"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    静态资源过滤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描service下的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxp.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    将我们的所有业务类，注入到spring，可以通过配置，注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.zxp.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        如果ref爆红，则在applicationContext里面通过导入import--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"BookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明式事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    横切事务支持（aop）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    字符编码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zxp.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    默认session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="中文字符乱码"><a href="#中文字符乱码" class="headerlink" title="中文字符乱码"></a>中文字符乱码</h1><h2 id="1-添加过滤器"><a href="#1-添加过滤器" class="headerlink" title="1.添加过滤器"></a>1.添加过滤器</h2><h3 id="1-1-对-web-xml-进行配置"><a href="#1-1-对-web-xml-进行配置" class="headerlink" title="1.1 对 web.xml 进行配置"></a>1.1 对 web.xml 进行配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    字符编码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zxp.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2字符编码过滤器（对经过-JSON-字符串转换过的无效）"><a href="#1-2字符编码过滤器（对经过-JSON-字符串转换过的无效）" class="headerlink" title="1.2字符编码过滤器（对经过 JSON 字符串转换过的无效）"></a>1.2字符编码过滤器（对经过 JSON 字符串转换过的无效）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) response;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Fastjson转换后中文字符乱码"><a href="#2-Fastjson转换后中文字符乱码" class="headerlink" title="2.Fastjson转换后中文字符乱码"></a>2.Fastjson转换后中文字符乱码</h2><h3 id="2-0问题原因"><a href="#2-0问题原因" class="headerlink" title="2.0问题原因"></a>2.0问题原因</h3><ul><li><p>springmvc在处理请求时，默认采用的是 ISO-8859-1 编码格式，具体原因不了解，个人觉得是还没有来得及更改，所以在处理一些json格式的时候，会出现中文乱码。</p></li><li><p>org.springframework.http.converter.StringHttpMessageConverter类是处理请求或相应字符串的类，并且默认字符集为ISO-8859-1，所以在当返回json中有中文时会出现乱码。</p></li></ul><h3 id="2-1无需配置xml"><a href="#2-1无需配置xml" class="headerlink" title="2.1无需配置xml"></a>2.1无需配置xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在controller 的方法中 地址映射加入指定编码格式 这个时候也中文不乱码了</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, produces = <span class="string">"application/json; charset=utf-8"</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2配置xml"><a href="#2-2配置xml" class="headerlink" title="2.2配置xml"></a>2.2配置xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 处理请求时返回json字符串的中文乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="文件上传下载配置文件"><a href="#文件上传下载配置文件" class="headerlink" title="文件上传下载配置文件"></a>文件上传下载配置文件</h1><p>写在mvc配置文件里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    请求的编码格式，必须和jsp的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    上传文件大小上限，单位为字节(10485760=10M)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要下载的文件地址</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    String fileName = <span class="string">"xxx.png"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.设置response响应头</span></span><br><span class="line">    response.reset();   <span class="comment">//设置页面不缓存，清空buffer</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"utf-8"</span>);  <span class="comment">//字符编码</span></span><br><span class="line">    response.setContentType(<span class="string">"multipart/form-data"</span>);   <span class="comment">//二进制传输数据</span></span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;fileName="</span> + URLEncoder.encode(fileName, <span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">    <span class="comment">//2.读取文件--输入流</span></span><br><span class="line">    InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="comment">//3.写出文件--输出流</span></span><br><span class="line">    OutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//4.执行  写操作</span></span><br><span class="line">    <span class="keyword">while</span> ((index = inputStream.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        outputStream.write(buff, <span class="number">0</span>, index);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    outputStream.close();</span><br><span class="line">    inputStream.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上传文件方式一"><a href="#上传文件方式一" class="headerlink" title="上传文件方式一"></a><strong>上传文件方式一</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*@RequestParam("file") 将name=file控件得到的文件封装成 CommonsMultipartFile 对象</span></span><br><span class="line"><span class="comment">     * 批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名：file.getOriginalFilename()</span></span><br><span class="line">        String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空，直接返回到首页！</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">""</span>.equals(uploadFileName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"上传文件名："</span> + uploadFileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists()) &#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"上传文件保存地址："</span> + realPath);</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = file.getInputStream();  <span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath, uploadFileName));  <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传完跳到首页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="上传文件方式二"><a href="#上传文件方式二" class="headerlink" title="上传文件方式二"></a><strong>上传文件方式二</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload2"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">upload2</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">//上传路径保存设置</span></span><br><span class="line">      String path=request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">      File realPath=<span class="keyword">new</span> File(path);</span><br><span class="line">      <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">          realPath.mkdir();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//上传文件地址</span></span><br><span class="line">      System.out.println(<span class="string">"上传文件保存地址："</span> + realPath);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//通过 CommonsMultipartFile 的方法直接写文件</span></span><br><span class="line">      file.transferTo(<span class="keyword">new</span> File(realPath+<span class="string">"/"</span>+file.getOriginalFilename()));</span><br><span class="line">      <span class="comment">//上传完跳到首页</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Druid数据库连接池"><a href="#Druid数据库连接池" class="headerlink" title="Druid数据库连接池"></a>Druid数据库连接池</h1><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_url&#125;"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_user&#125;"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_password&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通常来说，只需要修改initialSize、minIdle、maxActive。</p><p>如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。</p><p>连接池监控———配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Druid连接池监控 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>exclusions<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring + SpringMVC + MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2021/06/01/Hexo-Theme-Snail/"/>
      <url>/2021/06/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>hexo -theme-snail是一个简洁的hexo主题。它有 light 和 star 两种，可以在设置中根据自己的喜好进行设置，还具有分享和评论功能。更多的功能正在开发中。</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>-浅色主题和星星主题</li><li>-多元化评论系统</li><li>注意技巧</li><li>-分享给其他平台(正在开发中)</li><li>-图片分享(正在开发中)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>修改’ config.yml ‘中的’ theme: ‘的值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>用您自己的信息替换以下信息。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>把定制的图片放在“img”目录中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>如果不想显示，可以直接删除。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># 是否使用侧栏。</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># 使用绝对URL，在' / '和' /about/ '中都使用</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># 是否使用特性标签</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># 如果一个标签的大小大于这个条件值，它将被显示</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>详细的配置方法请参见httpymls://github.com/imsun/gitment。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## 这个评论系统是开源的</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## 如果修改后仍无效，请清空缓存后重试。</span></span><br><span class="line"><span class="comment">## ⚠️ 以下特效会占用大量cpu资源，请小心打开。</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
